/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//bring in body for our app
	document.write(__webpack_require__(1));
	__webpack_require__(2);
	angular.bootstrap(document.body, ['app']);




/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = "<body>\n\t<hello></hello>\n</body>";

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// Declare app level module which depends on views, and components

	__webpack_require__(3);
	__webpack_require__(5);

	document.write(__webpack_require__(19));

	var app = angular.module('app', []);

	app.directive('hello', function() {
	    return {
	        restrict: 'AE',
	        template: __webpack_require__(20),
	        link:function(){
	            console.log("hello", this);
	        }
	    };
	});

	module.exports = app;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	module.exports = angular;


/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.4.7
	 * (c) 2010-2015 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, document, undefined) {'use strict';

	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */

	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;

	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;

	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;

	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }

	      return match;
	    });

	    message += '\nhttp://errors.angularjs.org/1.4.7/' +
	      (module ? module + '/' : '') + code;

	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }

	    return new ErrorConstructor(message);
	  };
	}

	/* We need to tell jshint what variables are being exported */
	/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,

	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  shallowCopy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,

	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/

	////////////////////////////////////

	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */

	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';

	/**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */
	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


	var manualLowercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	};
	var manualUppercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	};


	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives.
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}


	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),

	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;

	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = document.documentMode;


	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {
	  if (obj == null || isWindow(obj)) {
	    return false;
	  }

	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = "length" in Object(obj) && obj.length;

	  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
	    return true;
	  }

	  return isString(obj) || isArray(obj) || length === 0 ||
	         typeof length === 'number' && length > 0 && (length - 1) in obj;
	}

	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */

	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}

	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}


	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) { iteratorFn(key, value); };
	}

	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}


	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}


	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;

	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];

	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }

	  setHashKey(dst, h);
	  return dst;
	}

	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}


	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}



	function toInt(str) {
	  return parseInt(str, 10);
	}


	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}

	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];


	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	     function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
	   ```
	  * @param {*} value to be returned.
	  * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];


	function valueFn(value) {return function() {return value;};}

	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;
	}


	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}


	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}


	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}


	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}


	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}


	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}


	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;

	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}


	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}


	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}


	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}


	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}


	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}


	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}


	function isBoolean(value) {
	  return typeof value === 'boolean';
	}


	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}


	var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
	function isTypedArray(value) {
	  return TYPED_ARRAY_REGEXP.test(toString.call(value));
	}


	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};

	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	           replace(/\x08/g, '\\x08');
	};


	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // we are a direct element
	    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
	}

	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(","), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}


	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}

	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) != -1;
	}

	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}

	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>

	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};

	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };

	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };

	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
	function copy(source, destination, stackSource, stackDest) {
	  if (isWindow(source) || isScope(source)) {
	    throw ngMinErr('cpws',
	      "Can't copy! Making copies of Window or Scope instances is not supported.");
	  }
	  if (isTypedArray(destination)) {
	    throw ngMinErr('cpta',
	      "Can't copy! TypedArray destination cannot be mutated.");
	  }

	  if (!destination) {
	    destination = source;
	    if (isObject(source)) {
	      var index;
	      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {
	        return stackDest[index];
	      }

	      // TypedArray, Date and RegExp have specific copy functionality and must be
	      // pushed onto the stack before returning.
	      // Array and other objects create the base object and recurse to copy child
	      // objects. The array/object will be pushed onto the stack when recursed.
	      if (isArray(source)) {
	        return copy(source, [], stackSource, stackDest);
	      } else if (isTypedArray(source)) {
	        destination = new source.constructor(source);
	      } else if (isDate(source)) {
	        destination = new Date(source.getTime());
	      } else if (isRegExp(source)) {
	        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        destination.lastIndex = source.lastIndex;
	      } else if (isFunction(source.cloneNode)) {
	          destination = source.cloneNode(true);
	      } else {
	        var emptyObject = Object.create(getPrototypeOf(source));
	        return copy(source, emptyObject, stackSource, stackDest);
	      }

	      if (stackDest) {
	        stackSource.push(source);
	        stackDest.push(destination);
	      }
	    }
	  } else {
	    if (source === destination) throw ngMinErr('cpi',
	      "Can't copy! Source and destination are identical.");

	    stackSource = stackSource || [];
	    stackDest = stackDest || [];

	    if (isObject(source)) {
	      stackSource.push(source);
	      stackDest.push(destination);
	    }

	    var result, key;
	    if (isArray(source)) {
	      destination.length = 0;
	      for (var i = 0; i < source.length; i++) {
	        destination.push(copy(source[i], null, stackSource, stackDest));
	      }
	    } else {
	      var h = destination.$$hashKey;
	      if (isArray(destination)) {
	        destination.length = 0;
	      } else {
	        forEach(destination, function(value, key) {
	          delete destination[key];
	        });
	      }
	      if (isBlankObject(source)) {
	        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	        for (key in source) {
	          destination[key] = copy(source[key], null, stackSource, stackDest);
	        }
	      } else if (source && typeof source.hasOwnProperty === 'function') {
	        // Slow path, which must rely on hasOwnProperty
	        for (key in source) {
	          if (source.hasOwnProperty(key)) {
	            destination[key] = copy(source[key], null, stackSource, stackDest);
	          }
	        }
	      } else {
	        // Slowest path --- hasOwnProperty can't be called as a method
	        for (key in source) {
	          if (hasOwnProperty.call(source, key)) {
	            destination[key] = copy(source[key], null, stackSource, stackDest);
	          }
	        }
	      }
	      setHashKey(destination,h);
	    }
	  }
	  return destination;
	}

	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];

	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};

	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }

	  return dst || src;
	}


	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 == t2) {
	    if (t1 == 'object') {
	      if (isArray(o1)) {
	        if (!isArray(o2)) return false;
	        if ((length = o1.length) == o2.length) {
	          for (key = 0; key < length; key++) {
	            if (!equals(o1[key], o2[key])) return false;
	          }
	          return true;
	        }
	      } else if (isDate(o1)) {
	        if (!isDate(o2)) return false;
	        return equals(o1.getTime(), o2.getTime());
	      } else if (isRegExp(o1)) {
	        return isRegExp(o2) ? o1.toString() == o2.toString() : false;
	      } else {
	        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	        keySet = createMap();
	        for (key in o1) {
	          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	          if (!equals(o1[key], o2[key])) return false;
	          keySet[key] = true;
	        }
	        for (key in o2) {
	          if (!(key in keySet) &&
	              key.charAt(0) !== '$' &&
	              isDefined(o2[key]) &&
	              !isFunction(o2[key])) return false;
	        }
	        return true;
	      }
	    }
	  }
	  return false;
	}

	var csp = function() {
	  if (!isDefined(csp.rules)) {


	    var ngCspElement = (document.querySelector('[ng-csp]') ||
	                    document.querySelector('[data-ng-csp]'));

	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }

	  return csp.rules;

	  function noUnsafeEval() {
	    try {
	      /* jshint -W031, -W054 */
	      new Function('');
	      /* jshint +W031, +W054 */
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};

	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }

	  return (jq.name_ = name);
	};

	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}

	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}


	/* jshint -W101 */
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	/* jshint +W101 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
	    return fn;
	  }
	}


	function toJsonReplacer(key, value) {
	  var val = value;

	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }

	  return val;
	}


	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 */
	function toJson(obj, pretty) {
	  if (typeof obj === 'undefined') return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}


	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}


	function timezoneToOffset(timezone, fallback) {
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}


	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}


	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
	  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));
	}


	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) {}
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
	  } catch (e) {
	    return lowercase(elemHtml);
	  }

	}


	/////////////////////////////////////////////////

	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component
	  }
	}


	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || "").split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}

	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}


	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}


	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}

	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}

	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 * found in the document will be used to define the root element to auto-bootstrap as an
	 * application. To run multiple applications in an HTML document you must manually bootstrap them using
	 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>

	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!

	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>

	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}

	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};

	  // The element `element` has priority over any other element
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';

	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;

	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * See: {@link guide/bootstrap Bootstrap}
	 *
	 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);

	    if (element.injector()) {
	      var tag = (element[0] === document) ? 'document' : startingTag(element);
	      //Encode angle brackets to prevent input from being sanitized to empty string #8683
	      throw ngMinErr(
	          'btstrpd',
	          "App Already Bootstrapped with this Element '{0}'",
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }

	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);

	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }

	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };

	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }

	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }

	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };

	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}

	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}

	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}

	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}

	var bindJQueryFired = false;
	var skipDestroyOnNextJQueryCleanData;
	function bindJQuery() {
	  var originalCleanData;

	  if (bindJQueryFired) {
	    return;
	  }

	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`

	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });

	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      if (!skipDestroyOnNextJQueryCleanData) {
	        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	          events = jQuery._data(elem, "events");
	          if (events && events.$destroy) {
	            jQuery(elem).triggerHandler('$destroy');
	          }
	        }
	      } else {
	        skipDestroyOnNextJQueryCleanData = false;
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }

	  angular.element = jqLite;

	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}

	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}

	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }

	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}

	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
	  }
	}

	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;

	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}

	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;

	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }

	  return blockNodes || nodes;
	}


	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}

	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */

	function setupModuleLoader(window) {

	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');

	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }

	  var angular = ensure(window, 'angular', Object);

	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;

	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};

	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };

	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
	             "the module name or forgot to load it. If registering a module ensure that you " +
	             "specify the dependencies as the second argument.", name);
	        }

	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];

	        /** @type {!Array.<Function>} */
	        var configBlocks = [];

	        /** @type {!Array.<Function>} */
	        var runBlocks = [];

	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,

	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,

	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,


	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constant are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),

	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} The name of the service to decorate.
	           * @param {Function} This function will be invoked when the service needs to be
	           *                                    instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,

	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };

	        if (configFn) {
	          config(configFn);
	        }

	        return moduleInstance;

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }

	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method) {
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            invokeQueue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });

	}

	/* global: toDebugString: true */

	function serializeObject(obj) {
	  var seen = [];

	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {

	      if (seen.indexOf(val) >= 0) return '...';

	      seen.push(val);
	    }
	    return val;
	  });
	}

	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}

	/* global angularModule: true,
	  version: true,

	  $CompileProvider,

	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,

	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateQueueProvider,
	  $$CoreAnimateRunnerProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/


	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  full: '1.4.7',    // all of these placeholder strings will be replaced by grunt's
	  major: 1,    // package task
	  minor: 4,
	  dot: 7,
	  codeName: 'dark-luminescence'
	};


	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {counter: 0},
	    'getTestability': getTestability,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    'reloadWithDebugInfo': reloadWithDebugInfo
	  });

	  angularModule = setupModuleLoader(window);

	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            style: styleDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$CoreAnimateRunnerProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/

	//////////////////////////////////
	//JQLite
	//////////////////////////////////

	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
	 *
	 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.</div>
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.
	 *
	 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
	 * jqLite; they are never raw DOM references.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/)
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/)
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */

	JQLite.expando = 'ng339';

	var jqCache = JQLite.cache = {},
	    jqId = 1,
	    addEventListenerFn = function(element, type, fn) {
	      element.addEventListener(type, fn, false);
	    },
	    removeEventListenerFn = function(element, type, fn) {
	      element.removeEventListener(type, fn, false);
	    };

	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};

	function jqNextId() { return ++jqId; }


	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
	var jqLiteMinErr = minErr('jqLite');

	/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
	function camelCase(name) {
	  return name.
	    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	      return offset ? letter.toUpperCase() : letter;
	    }).
	    replace(MOZ_HACK_REGEXP, 'Moz$1');
	}

	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],

	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, "", ""]
	};

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}

	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}

	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}

	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;

	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = tmp || fragment.appendChild(context.createElement("div"));
	    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }

	    nodes = concat(nodes, tmp.childNodes);

	    tmp = fragment.firstChild;
	    tmp.textContent = "";
	  }

	  // Remove wrapper from fragment
	  fragment.textContent = "";
	  fragment.innerHTML = ""; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });

	  return fragment;
	}

	function jqLiteParseHTML(html, context) {
	  context = context || document;
	  var parsed;

	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }

	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }

	  return [];
	}

	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }

	  var argIsString;

	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) != '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }

	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}

	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}

	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);

	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}

	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;

	  if (!handle) return; //no listeners registered

	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        removeEventListenerFn(element, type, handle);
	      }
	      delete events[type];
	    }
	  } else {
	    forEach(type.split(' '), function(type) {
	      if (isDefined(fn)) {
	        var listenerFns = events[type];
	        arrayRemove(listenerFns || [], fn);
	        if (listenerFns && listenerFns.length > 0) {
	          return;
	        }
	      }

	      removeEventListenerFn(element, type, handle);
	      delete events[type];
	    });
	  }
	}

	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];

	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }

	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}


	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];

	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }

	  return expandoStore;
	}


	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {

	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;

	    if (isSimpleSetter) { // data('key', value)
	      data[key] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[key];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          extend(data, key);
	        }
	      }
	    }
	  }
	}

	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
	      indexOf(" " + selector + " ") > -1);
	}

	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (" " + (element.getAttribute('class') || '') + " ")
	          .replace(/[\n\t]/g, " ")
	          .replace(" " + trim(cssClass) + " ", " "))
	      );
	    });
	  }
	}

	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, " ");

	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });

	    element.setAttribute('class', trim(existingClasses));
	  }
	}


	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

	  if (elements) {

	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;

	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}


	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}

	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType == NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];

	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }

	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}

	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}

	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}


	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behaviour
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}

	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: function(fn) {
	    var fired = false;

	    function trigger() {
	      if (fired) return;
	      fired = true;
	      fn();
	    }

	    // check if document is already loaded
	    if (document.readyState === 'complete') {
	      setTimeout(trigger);
	    } else {
	      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
	      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
	      // jshint -W064
	      JQLite(window).on('load', trigger); // fallback to window.onload for others
	      // jshint +W064
	    }
	  },
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },

	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },

	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};

	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern'
	};

	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}

	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}

	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});

	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,

	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },

	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },

	  controller: jqLiteController,

	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },

	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },

	  hasClass: jqLiteHasClass,

	  css: function(element, name, value) {
	    name = camelCase(name);

	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },

	  attr: function(element, name, value) {
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
	      return;
	    }
	    var lowercasedName = lowercase(name);
	    if (BOOLEAN_ATTR[lowercasedName]) {
	      if (isDefined(value)) {
	        if (!!value) {
	          element[name] = true;
	          element.setAttribute(name, lowercasedName);
	        } else {
	          element[name] = false;
	          element.removeAttribute(lowercasedName);
	        }
	      } else {
	        return (element[name] ||
	                 (element.attributes.getNamedItem(name) || noop).specified)
	               ? lowercasedName
	               : undefined;
	      }
	    } else if (isDefined(value)) {
	      element.setAttribute(name, value);
	    } else if (element.getAttribute) {
	      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
	      // some elements (e.g. Document) don't have get attribute, so return undefined
	      var ret = element.getAttribute(name, 2);
	      // normalize non-existing attributes to undefined (as jQuery)
	      return ret === null ? undefined : ret;
	    }
	  },

	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },

	  text: (function() {
	    getText.$dv = '';
	    return getText;

	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),

	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result.length === 0 ? null : result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },

	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },

	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;

	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {

	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});

	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };

	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;

	    if (!eventFnsLength) return;

	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;

	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }

	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }

	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };

	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }

	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        eventFns[i].call(element, event);
	      }
	    }
	  };

	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}

	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,

	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }

	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;

	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }

	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;

	    while (i--) {
	      type = types[i];
	      var eventFns = events[type];

	      if (!eventFns) {
	        events[type] = [];

	        if (type === 'mouseenter' || type === 'mouseleave') {
	          // Refer to jQuery's implementation of mouseenter & mouseleave
	          // Read about mouseenter and mouseleave:
	          // http://www.quirksmode.org/js/events_mouse.html#link8

	          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {
	            var target = this, related = event.relatedTarget;
	            // For mousenter/leave call the handler if related is outside the target.
	            // NB: No relatedTarget if the mouse left/entered the browser window
	            if (!related || (related !== target && !target.contains(related))) {
	              handle(event, type);
	            }
	          });

	        } else {
	          if (type !== '$destroy') {
	            addEventListenerFn(element, type, handle);
	          }
	        }
	        eventFns = events[type];
	      }
	      eventFns.push(fn);
	    }
	  },

	  off: jqLiteOff,

	  one: function(element, type, fn) {
	    element = jqLite(element);

	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },

	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },

	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },

	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },

	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

	    node = new JQLite(node);

	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },

	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },

	  wrap: function(element, wrapNode) {
	    wrapNode = jqLite(wrapNode).eq(0).clone()[0];
	    var parent = element.parentNode;
	    if (parent) {
	      parent.replaceChild(wrapNode, element);
	    }
	    wrapNode.appendChild(element);
	  },

	  remove: jqLiteRemove,

	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },

	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);

	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },

	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,

	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },

	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },

	  next: function(element) {
	    return element.nextElementSibling;
	  },

	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },

	  clone: jqLiteClone,

	  triggerHandler: function(element, event, extraParameters) {

	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];

	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };

	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }

	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;

	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };

	  // bind legacy bind/unbind to on/off
	  JQLite.prototype.bind = JQLite.prototype.on;
	  JQLite.prototype.unbind = JQLite.prototype.off;
	});


	// Provider for private $$jqLite service
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}

	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;

	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }

	  var objType = typeof obj;
	  if (objType == 'function' || (objType == 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }

	  return key;
	}

	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },

	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },

	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};

	var $$HashMapProvider = [function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];

	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */


	/**
	 * @ngdoc module
	 * @name auto
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */

	var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');

	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
	      args = fnText.match(FN_ARGS);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}

	function annotate(fn, strictDi, name) {
	  var $inject,
	      fnText,
	      argDecl,
	      last;

	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        fnText = fn.toString().replace(STRIP_COMMENTS, '');
	        argDecl = fnText.match(FN_ARGS);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}

	///////////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */

	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */




	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 *
	 * See the individual methods for more information and examples.
	 */

	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance

	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */

	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is the service
	 * constructor function that will be used to instantiate the service instance.
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function.  This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular
	 * {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service**, such as a string, a number, an array, an object or a function,
	 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */


	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
	 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
	 * service. The object returned by the decorator may be the original service, or a new service
	 * object which replaces or wraps and delegates to the original service.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    instantiated and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */


	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
	          })),
	      instanceCache = {},
	      instanceInjector = (instanceCache.$injector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
	          }));


	  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });

	  return instanceInjector;

	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////

	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }

	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
	    }
	    return providerCache[name + providerSuffix] = provider_;
	  }

	  function enforceReturnValue(name, factory) {
	    return function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
	      }
	      return result;
	    };
	  }

	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }

	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }

	  function value(name, val) { return factory(name, valueFn(val), false); }

	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }

	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;

	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }

	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);

	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);

	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }

	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          /* jshint -W022 */
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }

	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////

	  function createInternalInjector(cache, factory) {

	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          return cache[serviceName] = factory(serviceName, caller);
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }

	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }

	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName),
	          length, i,
	          key;

	      for (i = 0, length = $inject.length; i < length; i++) {
	        key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(
	          locals && locals.hasOwnProperty(key)
	          ? locals[key]
	          : getService(key, serviceName)
	        );
	      }
	      if (isArray(fn)) {
	        fn = fn[length];
	      }

	      // http://jsperf.com/angularjs-invoke-apply-vs-switch
	      // #5388
	      return fn.apply(self, args);
	    }

	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      // Object creation: http://jsperf.com/create-constructor/2
	      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
	      var returnedValue = invoke(Type, instance, locals, serviceName);

	      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
	    }

	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}

	createInjector.$$annotate = annotate;

	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {

	  var autoScrollingEnabled = true;

	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };

	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');

	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }

	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }

	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }

	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }

	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;

	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }

	    function getYOffset() {

	      var offset = scroll.yOffset;

	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }

	      return offset;
	    }

	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();

	        var offset = getYOffset();

	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }

	    function scroll(hash) {
	      hash = isString(hash) ? hash : $location.hash();
	      var elm;

	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);

	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);

	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

	      // no element and hash == 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }

	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;

	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }

	    return scroll;
	  }];
	}

	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }

	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}

	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}

	var $$CoreAnimateRunnerProvider = function() {
	  this.$get = ['$q', '$$rAF', function($q, $$rAF) {
	    function AnimateRunner() {}
	    AnimateRunner.all = noop;
	    AnimateRunner.chain = noop;
	    AnimateRunner.prototype = {
	      end: noop,
	      cancel: noop,
	      resume: noop,
	      pause: noop,
	      complete: noop,
	      then: function(pass, fail) {
	        return $q(function(resolve) {
	          $$rAF(function() {
	            resolve();
	          });
	        }).then(pass, fail);
	      }
	    };
	    return AnimateRunner;
	  }];
	};

	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];

	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,

	      push: function(element, event, options, domOperation) {
	        domOperation        && domOperation();

	        options = options || {};
	        options.from        && element.css(options.from);
	        options.to          && element.css(options.to);

	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }

	        return new $$AnimateRunner(); // jshint ignore:line
	      }
	    };


	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }

	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });

	          forEach(element, function(elm) {
	            toAdd    && jqLiteAddClass(elm, toAdd);
	            toRemove && jqLiteRemoveClass(elm, toRemove);
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }


	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};

	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);

	      if (classesAdded || classesRemoved) {

	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);

	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};

	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', function($provide) {
	  var provider = this;

	  this.$$registeredAnimations = Object.create(null);

	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
	    }

	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };

	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };

	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      afterElement ? afterElement.after(element) : parentElement.prepend(element);
	    }

	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `listenerFn` that is set
	       * // to listen for `enter` on the given `element` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,

	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,

	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        runner.end && runner.end();
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },

	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },

	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
	       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
	       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be appplied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;

	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];

	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', function($$rAF, $q) {

	    var RAFPromise = function() {};
	    RAFPromise.prototype = {
	      done: function(cancel) {
	        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();
	      },
	      end: function() {
	        this.done();
	      },
	      cancel: function() {
	        this.done(true);
	      },
	      getPromise: function() {
	        if (!this.defer) {
	          this.defer = $q.defer();
	        }
	        return this.defer.promise;
	      },
	      then: function(f1,f2) {
	        return this.getPromise().then(f1,f2);
	      },
	      'catch': function(f1) {
	        return this.getPromise()['catch'](f1);
	      },
	      'finally': function(f1) {
	        return this.getPromise()['finally'](f1);
	      }
	    };

	    return function(element, options) {
	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }

	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }

	      var closed, runner = new RAFPromise();
	      return {
	        start: run,
	        end: run
	      };

	      function run() {
	        $$rAF(function() {
	          close();
	          if (!closed) {
	            runner.done();
	          }
	          closed = true;
	        });
	        return runner;
	      }

	      function close() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};

	/* global stripHash: true */

	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      rawDocument = document[0],
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};

	  self.isMock = false;

	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];

	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }

	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }

	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };

	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////

	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null;

	  cacheState();
	  lastHistoryState = cachedState;

	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }

	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;

	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;

	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase || pendingLocation) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,"'");
	    }
	  };

	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };

	  var urlChangeListeners = [],
	      urlChangeInit = false;

	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }

	  function getCurrentState() {
	    try {
	      return history.state;
	    } catch (e) {
	      // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	    }
	  }

	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;

	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }

	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }

	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }

	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState

	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

	      urlChangeInit = true;
	    }

	    urlChangeListeners.push(callback);
	    return callback;
	  };

	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };

	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;

	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////

	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
	  };

	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };


	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };

	}

	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}

	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>

	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {

	  this.$get = function() {
	    var caches = {};

	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
	      }

	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = {},
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = {},
	          freshEnd = null,
	          staleEnd = null;

	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return caches[cacheId] = {

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

	            refresh(lruEntry);
	          }

	          if (!(key in data)) size++;
	          data[key] = value;

	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }

	          return value;
	        },

	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            refresh(lruEntry);
	          }

	          return data[key];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];

	            if (!lruEntry) return;

	            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);

	            delete lruHash[key];
	          }

	          delete data[key];
	          size--;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = {};
	          size = 0;
	          lruHash = {};
	          freshEnd = staleEnd = null;
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },


	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      };


	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry != freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd == entry) {
	            staleEnd = entry.n;
	          }

	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }


	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry != prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };


	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };


	    return cacheFactory;
	  };
	}

	/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */


	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
	 * or just the `postLink` function (all other properties will have the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioural (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `true`, an object or a falsy value:
	 *
	 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created. The new scope rule does not apply for the root of the template
	 * since the root of the template always gets a new scope.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
	 *   attribute name is assumed to be the same as the local name.
	 *   Given `<widget my-attr="hello {{name}}">` and widget definition
	 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
	 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
	 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
	 *   component scope).
	 *
	 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
	 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
	 *   name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<widget my-attr="parentModel">` and widget definition of
	 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
	 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
	 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
	 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
	 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
	 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
	 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
	 *   pass data from the isolated scope via an expression to the parent scope, this can be
	 *   done by passing a map of local variable names and values into the expression wrapper fn.
	 *   For example, if the expression is `increment(amount)` then we can specify the amount value
	 *   by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
	 * is instantiated, the initial values of the isolate scope bindings are already available.
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement)`.
	 *    * `scope`: optional argument to override the scope.
	 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
	 *    * `futureParentElement`:
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
	 * injected argument will be an array in corresponding order. If no such directive can be
	 * found, or if the directive does not have a controller, then an error is raised (unless no link function
	 * is specified, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element or the entire element:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>

	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and a
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>

	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude`
	 *     parameter of directive controllers, see there for details.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	 * ```
	 * - $rootScope
	 *   - isolate
	 *     - transclusion
	 * ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	 * ```
	 * - $rootScope
	 *   - transclusion
	 * - isolate
	 * ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * accessing *Normalized attribute names:*
	 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
	 * the attributes object allows for normalized access to
	 *   the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);

	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>

	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to controller instances; if given, it will make the controllers
	 *        available to directives.
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */

	var $compileMinErr = minErr('$compile');

	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

	    var bindings = {};

	    forEach(scope, function(definition, scopeName) {
	      var match = definition.match(LOCAL_REGEXP);

	      if (!match) {
	        throw $compileMinErr('iscp',
	            "Invalid {3} for directive '{0}'." +
	            " Definition: {... {1}: '{2}' ...}",
	            directiveName, scopeName, definition,
	            (isController ? "controller bindings definition" :
	            "isolate scope definition"));
	      }

	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	    });

	    return bindings;
	  }

	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (isObject(bindings.bindToController)) {
	      var controller = directive.controller;
	      var controllerAs = directive.controllerAs;
	      if (!controller) {
	        // There is no controller, there may or may not be a controllerAs property
	        throw $compileMinErr('noctrl',
	              "Cannot bind to controller without directive '{0}'s controller.",
	              directiveName);
	      } else if (!identifierForController(controller, controllerAs)) {
	        // There is a controller, but no identifier or controllerAs property
	        throw $compileMinErr('noident',
	              "Cannot bind to controller without identifier for directive '{0}'.",
	              directiveName);
	      }
	    }
	    return bindings;
	  }

	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
	            name);
	    }
	  }

	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See
	   *    {@link guide/directive} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	   this.directive = function registerDirective(name, directiveFactory) {
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = directive.require || (directive.controller && directive.name);
	                directive.restrict = directive.restrict || 'EA';
	                var bindings = directive.$$bindings =
	                    parseDirectiveBindings(directive, directive.name);
	                if (isObject(bindings.isolateScope)) {
	                  directive.$$isolateBindings = bindings.isolateScope;
	                }
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };


	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };

	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

	    var Attributes = function(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;

	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }

	      this.$$element = element;
	    };

	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }

	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },

	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.

	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;

	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }

	        this[key] = value;

	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }

	        nodeName = nodeName_(this.$$element);

	        if ((nodeName === 'a' && key === 'href') ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset') {
	          // sanitize img[srcset] values
	          var result = "";

	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);

	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (" " + trim(rawUris[innerIdx + 1]));
	          }

	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);

	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (" " + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }

	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            this.$$element.attr(attrName, value);
	          }
	        }

	        // fire observers
	        var $$observers = this.$$observers;
	        $$observers && forEach($$observers[observer], function(fn) {
	          try {
	            fn(value);
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        });
	      },


	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));

	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });

	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };


	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }


	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;

	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];

	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }

	      $element.data('$binding', bindings);
	    } : noop;

	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;

	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;

	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;

	    return compile;

	    //================================

	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }
	      // We can not compile top level text elements since text nodes can be merged and we will
	      // not be able to attach scope data to them, so we will wrap them in <span>
	      forEach($compileNodes, function(node, index) {
	        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {
	          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
	        }
	      });
	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        assertArg(scope, 'scope');

	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;

	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }

	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }

	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }

	        compile.$$addScopeInfo($linkNode, scope);

	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	        return $linkNode;
	      };
	    }

	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
	      }
	    }

	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();

	        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);

	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;

	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }

	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);

	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }

	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }

	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;

	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;


	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);

	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i+=3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }

	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];

	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	              var destroyBindings = nodeLinkFn.$$destroyBindings;
	              if (destroyBindings) {
	                nodeLinkFn.$$destroyBindings = null;
	                childScope.$on('$destroyed', destroyBindings);
	              }
	            } else {
	              childScope = scope;
	            }

	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;

	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

	            } else {
	              childBoundTranscludeFn = null;
	            }

	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,
	                       nodeLinkFn);

	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }

	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {

	      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }

	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      };

	      return boundTranscludeFn;
	    }

	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          className;

	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;

	            attr = nAttrs[j];
	            name = attr.name;
	            value = trim(attr.value);

	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }

	            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
	            if (directiveIsMultiElement(directiveNName)) {
	              if (ngAttrName === directiveNName + 'Start') {
	                attrStartName = name;
	                attrEndName = name.substr(0, name.length - 5) + 'end';
	                name = name.substr(0, name.length - 6);
	              }
	            }

	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }

	          // use class as directive
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          if (msie === 11) {
	            // Workaround for #11781
	            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
	              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
	              node.parentNode.removeChild(node.nextSibling);
	            }
	          }
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          try {
	            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	            if (match) {
	              nName = directiveNormalize(match[1]);
	              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[2]);
	              }
	            }
	          } catch (e) {
	            // turns out that under some circumstances IE9 throws errors when one attempts to read
	            // comment's node value.
	            // Just ignore it and continue. (Can't seem to reproduce in test case.)
	          }
	          break;
	      }

	      directives.sort(byPriority);
	      return directives;
	    }

	    /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType == NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }

	      return jqLite(nodes);
	    }

	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }

	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};

	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          directiveValue;

	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;

	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;

	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }

	        if (directiveValue = directive.scope) {

	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }

	          newScopeDirective = newScopeDirective || directive;
	        }

	        directiveName = directive.name;

	        if (!directive.templateUrl && directive.controller) {
	          directiveValue = directive.controller;
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate("'" + directiveName + "' controller",
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }

	        if (directiveValue = directive.transclude) {
	          hasTranscludeDirective = true;

	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }

	          if (directiveValue == 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(document.createComment(' ' + directiveName + ': ' +
	                                              templateAttrs[directiveName] + ' '));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);

	            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {
	            $template = jqLite(jqLiteClone(compileNode)).contents();
	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compile($template, transcludeFn);
	          }
	        }

	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;

	          directiveValue = denormalizeTemplate(directiveValue);

	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  directiveName, '');
	            }

	            replaceWith(jqCollection, $compileNode, compileNode);

	            var newTemplateAttrs = {$attr: {}};

	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

	            if (newIsolateScopeDirective) {
	              markDirectivesAsIsolate(templateDirectives);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }

	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;

	          if (directive.replace) {
	            replaceDirective = directive;
	          }

	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            if (isFunction(linkFn)) {
	              addLinkFns(null, linkFn, attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }

	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }

	      }

	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;

	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;

	      ////////////////////

	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }


	      function getControllers(directiveName, require, $element, elementControllers) {
	        var value;

	        if (isString(require)) {
	          var match = require.match(REQUIRE_PREFIX_REGEXP);
	          var name = require.substring(match[0].length);
	          var inheritType = match[1] || match[3];
	          var optional = match[2] === '?';

	          //If only parents then start at the parent element
	          if (inheritType === '^^') {
	            $element = $element.parent();
	          //Otherwise attempt getting the controller from elementControllers in case
	          //the element is transcluded (and has no data) and to avoid .data if possible
	          } else {
	            value = elementControllers && elementControllers[name];
	            value = value && value.instance;
	          }

	          if (!value) {
	            var dataName = '$' + name + 'Controller';
	            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	          }

	          if (!value && !optional) {
	            throw $compileMinErr('ctreq',
	                "Controller '{0}', required by directive '{1}', can't be found!",
	                name, directiveName);
	          }
	        } else if (isArray(require)) {
	          value = [];
	          for (var i = 0, ii = require.length; i < ii; i++) {
	            value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	          }
	        }

	        return value || null;
	      }

	      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
	        var elementControllers = createMap();
	        for (var controllerKey in controllerDirectives) {
	          var directive = controllerDirectives[controllerKey];
	          var locals = {
	            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	            $element: $element,
	            $attrs: attrs,
	            $transclude: transcludeFn
	          };

	          var controller = directive.controller;
	          if (controller == '@') {
	            controller = attrs[directive.name];
	          }

	          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

	          // For directives with element transclusion the element is a comment,
	          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
	          // clean up (http://bugs.jquery.com/ticket/8335).
	          // Instead, we save the controllers for the element in a local hash and attach to .data
	          // later, once we have the actual element.
	          elementControllers[directive.name] = controllerInstance;
	          if (!hasElementTranscludeDirective) {
	            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	          }
	        }
	        return elementControllers;
	      }

	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,
	                          thisLinkFn) {
	        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
	            attrs;

	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }

	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        }

	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	        }

	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
	        }

	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          initializeDirectiveBindings(scope, attrs, isolateScope,
	                                      isolateScope.$$isolateBindings,
	                                      newIsolateScopeDirective, isolateScope);
	        }
	        if (elementControllers) {
	          // Initialize bindToController bindings for new/isolate scopes
	          var scopeDirective = newIsolateScopeDirective || newScopeDirective;
	          var bindings;
	          var controllerForBindings;
	          if (scopeDirective && elementControllers[scopeDirective.name]) {
	            bindings = scopeDirective.$$bindings.bindToController;
	            controller = elementControllers[scopeDirective.name];

	            if (controller && controller.identifier && bindings) {
	              controllerForBindings = controller;
	              thisLinkFn.$$destroyBindings =
	                  initializeDirectiveBindings(scope, attrs, controller.instance,
	                                              bindings, scopeDirective);
	            }
	          }
	          for (i in elementControllers) {
	            controller = elementControllers[i];
	            var controllerResult = controller();

	            if (controllerResult !== controller.instance) {
	              // If the controller constructor has a return value, overwrite the instance
	              // from setupControllers and update the element data
	              controller.instance = controllerResult;
	              $element.data('$' + i + 'Controller', controllerResult);
	              if (controller === controllerForBindings) {
	                // Remove and re-install bindToController bindings
	                thisLinkFn.$$destroyBindings();
	                thisLinkFn.$$destroyBindings =
	                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);
	              }
	            }
	          }
	        }

	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }

	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
	          var transcludeControllers;

	          // No scope passed in:
	          if (!isScope(scope)) {
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }

	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	        }
	      }
	    }

	    function markDirectivesAsIsolate(directives) {
	      // mark all directives as needing isolate scope.
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: true});
	      }
	    }

	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          try {
	            directive = directives[i];
	            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	                 directive.restrict.indexOf(location) != -1) {
	              if (startAttrName) {
	                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	              }
	              tDirectives.push(directive);
	              match = directive;
	            }
	          } catch (e) { $exceptionHandler(e); }
	        }
	      }
	      return match;
	    }


	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr,
	          $element = dst.$$element;

	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) != '$') {
	          if (src[key] && src[key] !== value) {
	            value += (key === 'style' ? ';' : ' ') + src[key];
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });

	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        if (key == 'class') {
	          safeAddClass($element, value);
	          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
	        } else if (key == 'style') {
	          $element.attr('style', $element.attr('style') + ';' + value);
	          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
	          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	          // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
	          dst[key] = value;
	          dstAttr[key] = srcAttr[key];
	        }
	      });
	    }


	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;

	      $compileNode.empty();

	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

	          content = denormalizeTemplate(content);

	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];

	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  origAsyncDirective.name, templateUrl);
	            }

	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

	            if (isObject(origAsyncDirective.scope)) {
	              markDirectivesAsIsolate(templateDirectives);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }

	          directives.unshift(derivedSyncDirective);

	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node == compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];

	            if (scope.$$destroyed) continue;

	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;

	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn, afterTemplateNodeLinkFn);
	          }
	          linkQueue = null;
	        });

	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,
	                                  afterTemplateNodeLinkFn);
	        }
	      };
	    }


	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }

	    function assertNoDuplicate(what, previousDirective, directive, element) {

	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }

	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }


	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;

	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }


	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }


	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName == "srcdoc") {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      if (attrNormalizedName == "xlinkHref" ||
	          (tag == "form" && attrNormalizedName == "action") ||
	          (tag != "img" && (attrNormalizedName == "src" ||
	                            attrNormalizedName == "ngSrc"))) {
	        return $sce.RESOURCE_URL;
	      }
	    }


	    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
	      var trustedContext = getTrustedContext(node, name);
	      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

	      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

	      // no interpolation found -> ignore
	      if (!interpolateFn) return;


	      if (name === "multiple" && nodeName_(node) === "select") {
	        throw $compileMinErr("selmulti",
	            "Binding to the 'multiple' attribute is not supported. Element: {0}",
	            startingTag(node));
	      }

	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

	                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	                  throw $compileMinErr('nodomevents',
	                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
	                          "ng- versions (such as ng-click instead of onclick) instead.");
	                }

	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }

	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;

	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);

	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue != oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }


	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;

	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] == firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;

	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }

	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }

	      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
	      var fragment = document.createDocumentFragment();
	      fragment.appendChild(firstElementToRemove);

	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite(newNode).data(jqLite(firstElementToRemove).data());

	        // Remove data of the replaced element. We cannot just call .remove()
	        // on the element it since that would deallocate scope that is needed
	        // for the new node. Instead, remove the data "manually".
	        if (!jQuery) {
	          delete jqLite.cache[firstElementToRemove[jqLite.expando]];
	        } else {
	          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
	          // the replaced element. The cleanData version monkey-patched by Angular would cause
	          // the scope to be trashed and we do need the very same scope to work with the new
	          // element. However, we cannot just cache the non-patched version and use it here as
	          // that would break if another library patches the method after Angular does (one
	          // example is jQuery UI). Instead, set a flag indicating scope destroying should be
	          // skipped this one time.
	          skipDestroyOnNextJQueryCleanData = true;
	          jQuery.cleanData([firstElementToRemove]);
	        }
	      }

	      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
	        var element = elementsToRemove[k];
	        jqLite(element).remove(); // must do this way to clean up expando
	        fragment.appendChild(element);
	        delete elementsToRemove[k];
	      }

	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }


	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }


	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }


	    // Set up $watches for isolate scope and controller bindings. This process
	    // only occurs for isolate scopes and new scopes with controllerAs.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings,
	                                         directive, newScope) {
	      var onNewScopeDestroyed;
	      forEach(bindings, function(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, or &
	        lastValue,
	        parentGet, parentSet, compare;

	        switch (mode) {

	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = void 0;
	            }
	            attrs.$observe(attrName, function(value) {
	              if (isString(value)) {
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            if (isString(attrs[attrName])) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(attrs[attrName])(scope);
	            }
	            break;

	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;

	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              compare = function(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  "Expression '{0}' used with directive '{1}' is non-assignable!",
	                  attrs[attrName], directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              return lastValue = parentValue;
	            };
	            parentValueWatch.$stateful = true;
	            var unwatch;
	            if (definition.collection) {
	              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            onNewScopeDestroyed = (onNewScopeDestroyed || []);
	            onNewScopeDestroyed.push(unwatch);
	            break;

	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;

	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });
	      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {
	        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {
	          onNewScopeDestroyed[i]();
	        }
	      } : noop;
	      if (newScope && destroyBindings !== noop) {
	        newScope.$on('$destroy', destroyBindings);
	        return noop;
	      }
	      return destroyBindings;
	    }
	  }];
	}

	var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return camelCase(name.replace(PREFIX_REGEXP, ''));
	}

	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */

	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */


	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */



	/**
	 * Closure compiler type information
	 */

	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}

	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);

	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token == tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}

	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;

	  if (i <= 1) {
	    return jqNodes;
	  }

	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT) {
	      splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}

	var $controllerMinErr = minErr('$controller');


	var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}


	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };


	  this.$get = ['$injector', '$window', function($injector, $window) {

	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }

	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            "Badly formed controller string '{0}'. " +
	            "Must match `__name__ as __id__` or `__name__`.", expression);
	        }
	        constructor = match[1],
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);

	        assertArgFn(expression, constructor, true);
	      }

	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);

	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }

	        var instantiate;
	        return instantiate = extend(function() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }

	      instance = $injector.instantiate(expression, locals, constructor);

	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }

	      return instance;
	    };

	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
	          name, identifier);
	      }

	      locals.$scope[identifier] = instance;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * ```js
	 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
	 * ```
	 *
	 * This example will override the normal action of `$exceptionHandler`, to make angular
	 * exceptions fail hard when they happen, instead of just logging to the console.
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}

	var $$ForceReflowProvider = function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};

	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var $httpMinErr = minErr('$http');
	var $httpMinErrLegacyFn = function(method) {
	  return function() {
	    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
	  };
	};

	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}


	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */

	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v, k) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });

	      return parts.join('&');
	    };
	  };
	}

	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');

	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}

	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }

	  return data;
	}

	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}

	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;

	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }

	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }

	  return parsed;
	}


	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;

	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);

	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === void 0) {
	        value = null;
	      }
	      return value;
	    }

	    return headersObj;
	  };
	}


	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }

	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });

	  return data;
	}


	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}


	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
	   * that will provide the cache for all requests who set their `cache` property to `true`.
	   * If you set the `defaults.cache = false` then only requests that specify their own custom
	   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],

	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],

	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },

	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',

	    paramSerializer: '$httpParamSerializer'
	  };

	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };

	  var useLegacyPromise = true;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useLegacyPromiseExtensions = function(value) {
	    if (isDefined(value)) {
	      useLegacyPromise = !!value;
	      return this;
	    }
	    return useLegacyPromise;
	  };

	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];

	  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
	      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

	    var defaultCache = $cacheFactory('$http');

	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];

	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });

	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and
	     * will result in the success callback being called. Note that if the response is a redirect,
	     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
	     * called for such responses.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * To enable caching, set the request configuration `cache` property to `true` (to use default
	     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
	     * When the cache is enabled, `$http` stores the response from the server in the specified
	     * cache. The next time the same request is made, the response is served from the cache without
	     * sending a request to the server.
	     *
	     * Note that even if the response is served from cache, delivery of the data is asynchronous in
	     * the same way that real requests are.
	     *
	     * If there are multiple GET requests for the same URL that should be cached using the same
	     * cache, but the cache is not populated yet, only one request to the server will be made and
	     * the remaining requests will be fulfilled using the response from the first request.
	     *
	     * You can change the default cache to a new object (built with
	     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
	     * their `cache` property to `true` will now use this cache object.
	     *
	     * If you set the default cache to `false` then only requests that specify their own custom
	     * cache object will be cached.
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
	     * an unauthorized site can gain your user's private data. Angular provides a mechanism
	     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
	     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
	     * JavaScript that runs on your domain could read the cookie, your server can be assured that
	     * the XHR came from JavaScript running on your domain. The header will not be set for
	     * cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default TransformationjqLiks}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
	     *      GET request, otherwise if a cache instance built with
	     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
	     *      caching.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';

	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;

	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };

	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });

	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });

	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {

	      if (!angular.isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }

	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer
	      }, requestConfig);

	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	        $injector.get(config.paramSerializer) : config.paramSerializer;

	      var serverRequest = function(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	                delete headers[header];
	            }
	          });
	        }

	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }

	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      };

	      var chain = [serverRequest, undefined];
	      var promise = $q.when(config);

	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          chain.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          chain.push(interceptor.response, interceptor.responseError);
	        }
	      });

	      while (chain.length) {
	        var thenFn = chain.shift();
	        var rejectFn = chain.shift();

	        promise = promise.then(thenFn, rejectFn);
	      }

	      if (useLegacyPromise) {
	        promise.success = function(fn) {
	          assertArgFn(fn, 'fn');

	          promise.then(function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };

	        promise.error = function(fn) {
	          assertArgFn(fn, 'fn');

	          promise.then(null, function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	      } else {
	        promise.success = $httpMinErrLegacyFn('success');
	        promise.error = $httpMinErrLegacyFn('error');
	      }

	      return promise;

	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        if (!response.data) {
	          resp.data = response.data;
	        } else {
	          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
	        }
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }

	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};

	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });

	        return processedHeaders;
	      }

	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

	        // using for-in instead of forEach to avoid unecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);

	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }

	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }

	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	    }

	    $http.pendingRequests = [];

	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');

	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */

	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');

	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;


	    return $http;


	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }


	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }


	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          url = buildUrl(config.url, config.paramSerializer(config.params));

	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);


	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }

	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }


	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }

	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType);
	      }

	      return promise;


	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }

	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }

	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }


	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;

	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }

	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }

	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }


	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}

	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
	  }];
	}

	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
	    $browser.$$incOutstandingRequestCount();
	    url = url || $browser.url();

	    if (lowercase(method) == 'jsonp') {
	      var callbackId = '_' + (callbacks.counter++).toString(36);
	      callbacks[callbackId] = function(data) {
	        callbacks[callbackId].data = data;
	        callbacks[callbackId].called = true;
	      };

	      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
	          callbackId, function(status, text) {
	        completeRequest(callback, status, callbacks[callbackId].data, "", text);
	        callbacks[callbackId] = noop;
	      });
	    } else {

	      var xhr = createXhr(method, url);

	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });

	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';

	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;

	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
	        }

	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };

	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };

	      xhr.onerror = requestError;
	      xhr.onabort = requestError;

	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }

	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }

	      xhr.send(isUndefined(post) ? null : post);
	    }

	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }


	    function timeoutRequest() {
	      jsonpDone && jsonpDone();
	      xhr && xhr.abort();
	    }

	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;

	      callback(status, response, headersString, statusText);
	      $browser.$$completeOutstandingRequest(noop);
	    }
	  };

	  function jsonpReq(url, callbackId, done) {
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = "text/javascript";
	    script.src = url;
	    script.async = true;

	    callback = function(event) {
	      removeEventListenerFn(script, "load", callback);
	      removeEventListenerFn(script, "error", callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = "unknown";

	      if (event) {
	        if (event.type === "load" && !callbacks[callbackId].called) {
	          event = { type: "error" };
	        }
	        text = event.type;
	        status = event.type === "error" ? 404 : 200;
	      }

	      if (done) {
	        done(status, text);
	      }
	    };

	    addEventListenerFn(script, "load", callback);
	    addEventListenerFn(script, "error", callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}

	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
	      "interpolations that concatenate multiple expressions when a trusted value is " +
	      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
	};

	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
	};

	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * @example
	<example module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);

	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });


	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-app="App" ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };


	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }

	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }

	    function stringify(value) {
	      if (value == null) { // null || undefined
	        return '';
	      }
	      switch (typeof value) {
	        case 'string':
	          break;
	        case 'number':
	          value = '' + value;
	          break;
	        default:
	          value = toJson(value);
	      }

	      return value;
	    }

	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];

	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }

	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }

	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };

	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };

	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);

	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }

	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }

	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }

	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }


	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };


	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };

	    return $interpolate;
	  }];
	}

	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q',
	       function($rootScope,   $window,   $q,   $$q) {
	    var intervals = {};


	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;

	      count = isDefined(count) ? count : 0;

	      promise.then(null, null, (!hasParams) ? fn : function() {
	        fn.apply(null, args);
	      });

	      promise.$$intervalId = setInterval(function tick() {
	        deferred.notify(iteration++);

	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }

	        if (!skipApply) $rootScope.$apply();

	      }, delay);

	      intervals[promise.$$intervalId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };

	    return interval;
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */

	var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');


	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;

	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }

	  return segments.join('/');
	}

	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);

	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}


	function parseAppUrl(relativeUrl, locationObj) {
	  var prefixed = (relativeUrl.charAt(0) !== '/');
	  if (prefixed) {
	    relativeUrl = '/' + relativeUrl;
	  }
	  var match = urlResolve(relativeUrl);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);

	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}


	/**
	 *
	 * @param {string} begin
	 * @param {string} whole
	 * @returns {string} returns text from whole after begin or undefined if it does not begin with
	 *                   expected string.
	 */
	function beginsWith(begin, whole) {
	  if (whole.indexOf(begin) === 0) {
	    return whole.substr(begin.length);
	  }
	}


	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index == -1 ? url : url.substr(0, index);
	}

	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}


	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}

	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}


	/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = beginsWith(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }

	    parseAppUrl(pathUrl, this);

	    if (!this.$$path) {
	      this.$$path = '/';
	    }

	    this.$$compose();
	  };

	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;

	    if (isDefined(appUrl = beginsWith(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile == url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

	  parseAbsoluteUrl(appBase, this);


	  /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
	    var withoutHashUrl;

	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

	      // The rest of the url starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }

	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }

	    parseAppUrl(withoutHashUrl, this);

	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

	    this.$$compose();

	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

	      var firstPathSegmentMatch;

	      //Get the relative path from the input URL.
	      if (url.indexOf(base) === 0) {
	        url = url.replace(base, '');
	      }

	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }

	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };

	  /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) == stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}


	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);

	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }

	    var rewrittenUrl;
	    var appUrl;

	    if (appBase == stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };

	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };

	}


	var locationPrototype = {

	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,

	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,

	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
	  absUrl: locationGetter('$$absUrl'),

	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }

	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');

	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
	  protocol: locationGetter('$$protocol'),

	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
	  host: locationGetter('$$host'),

	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),

	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {string} path
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) == '/' ? path : '/' + path;
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });

	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }

	    this.$$compose();
	    return this;
	  },

	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return hash fragment when called without any parameter.
	   *
	   * Change hash fragment when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),

	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during current `$digest` will be replacing current history
	   * record, instead of adding new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};

	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);

	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }

	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;

	    return this;
	  };
	});


	function locationGetter(property) {
	  return function() {
	    return this[property];
	  };
	}


	function locationGetterSetter(property, preprocess) {
	  return function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }

	    this[property] = preprocess(value);
	    this.$$compose();

	    return this;
	  };
	}


	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */

	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {

	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }

	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }

	      if (isBoolean(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }

	      return this;
	    } else {
	      return html5Mode;
	    }
	  };

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */

	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;

	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          "$location in HTML5 mode requires a <base> tag to be present!");
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);

	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);

	    $location.$$state = $browser.state();

	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);

	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;

	        throw e;
	      }
	    }

	    $rootElement.on('click', function(event) {
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then

	      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

	      var elm = jqLite(event.target);

	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }

	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');

	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }

	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;

	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() != $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });


	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }

	    var initializing = true;

	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {

	      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }

	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;

	        $location.$$parse(newUrl);
	        $location.$$state = newState;

	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;

	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;

	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });

	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

	      if (initializing || urlOrStateChanged) {
	        initializing = false;

	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;

	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;

	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }

	      $location.$$replace = false;

	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });

	    return $location;

	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}

	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;

	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };

	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),

	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),

	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),

	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),

	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');

	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      }())
	    };

	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }

	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;

	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) {}

	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }

	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $parseMinErr = minErr('$parse');

	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
	// native objects.
	//
	// See https://docs.angularjs.org/guide/security


	function ensureSafeMemberName(name, fullExpression) {
	  if (name === "__defineGetter__" || name === "__defineSetter__"
	      || name === "__lookupGetter__" || name === "__lookupSetter__"
	      || name === "__proto__") {
	    throw $parseMinErr('isecfld',
	        'Attempting to access a disallowed field in Angular expressions! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}

	function getStringValue(name, fullExpression) {
	  // From the JavaScript docs:
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use,
	  // we cast it to a string, if possible.
	  // Doing `name + ''` can cause a repl error if the result to `toString` is not a string,
	  // this is, this will handle objects that misbehave.
	  name = name + '';
	  if (!isString(name)) {
	    throw $parseMinErr('iseccst',
	        'Cannot convert object to primitive value! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}

	function ensureSafeObject(obj, fullExpression) {
	  // nifty check if obj is Function that is fast and works across iframes and other contexts
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isWindow(obj)
	        obj.window === obj) {
	      throw $parseMinErr('isecwindow',
	          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isElement(obj)
	        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
	      throw $parseMinErr('isecdom',
	          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// block Object so that we can't get hold of dangerous Object.* methods
	        obj === Object) {
	      throw $parseMinErr('isecobj',
	          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    }
	  }
	  return obj;
	}

	var CALL = Function.prototype.call;
	var APPLY = Function.prototype.apply;
	var BIND = Function.prototype.bind;

	function ensureSafeFunction(obj, fullExpression) {
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    } else if (obj === CALL || obj === APPLY || obj === BIND) {
	      throw $parseMinErr('isecff',
	        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    }
	  }
	}

	function ensureSafeAssignContext(obj, fullExpression) {
	  if (obj) {
	    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
	        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
	      throw $parseMinErr('isecaf',
	        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
	    }
	  }
	}

	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


	/////////////////////////////////////////


	/**
	 * @constructor
	 */
	var Lexer = function(options) {
	  this.options = options;
	};

	Lexer.prototype = {
	  constructor: Lexer,

	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];

	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === "'") {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdent(ch)) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },

	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },

	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },

	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === "string";
	  },

	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },

	  isIdent: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },

	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },

	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },

	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch == '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch == 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) == 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) == 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },

	  readIdent: function() {
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (!(this.isIdent(ch) || this.isNumber(ch))) {
	        break;
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },

	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};

	var AST = function(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};

	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';

	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';

	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);

	    var value = this.program();

	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }

	    return value;
	  },

	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },

	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },

	  filterChain: function() {
	    var left = this.expression();
	    var token;
	    while ((token = this.expect('|'))) {
	      left = this.filter(left);
	    }
	    return left;
	  },

	  expression: function() {
	    return this.assignment();
	  },

	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },

	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },

	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },

	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },

	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },

	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },

	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },

	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },

	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },

	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.constants.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.constants[this.consume().text]);
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }

	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },

	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

	    while (this.expect(':')) {
	      args.push(this.expression());
	    }

	    return result;
	  },

	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.expression());
	      } while (this.expect(','));
	    }
	    return args;
	  },

	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },

	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },

	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');

	    return { type: AST.ArrayExpression, elements: elements };
	  },

	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	        } else {
	          this.throwError("invalid key", this.peek());
	        }
	        this.consume(':');
	        property.value = this.expression();
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');

	    return {type: AST.ObjectExpression, properties: properties };
	  },

	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },

	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }

	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },

	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },

	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },

	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },

	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },


	  /* `undefined` is not a constant, it is an identifier,
	   * but using it as an identifier is not supported
	   */
	  constants: {
	    'true': { type: AST.Literal, value: true },
	    'false': { type: AST.Literal, value: false },
	    'null': { type: AST.Literal, value: null },
	    'undefined': {type: AST.Literal, value: undefined },
	    'this': {type: AST.ThisExpression }
	  }
	};

	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}

	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}

	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}

	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}

	function getInputs(body) {
	  if (body.length != 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}

	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}

	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}

	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}

	function isConstant(ast) {
	  return ast.constant;
	}

	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTCompiler.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      expensiveChecks: expensiveChecks,
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';

	    /* jshint -W054 */
	    var fn = (new Function('$filter',
	        'ensureSafeMemberName',
	        'ensureSafeObject',
	        'ensureSafeFunction',
	        'getStringValue',
	        'ensureSafeAssignContext',
	        'ifDefined',
	        'plus',
	        'text',
	        fnString))(
	          this.$filter,
	          ensureSafeMemberName,
	          ensureSafeObject,
	          ensureSafeFunction,
	          getStringValue,
	          ensureSafeAssignContext,
	          ifDefined,
	          plusFn,
	          expression);
	    /* jshint +W054 */
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  USE: 'use',

	  STRICT: 'strict',

	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },

	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },

	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },

	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },

	  body: function(section) {
	    return this.state[section].body.join('');
	  },

	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      ensureSafeMemberName(ast.name);
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.not(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
	        self.addEnsureSafeObject(intoId);
	      }
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            self.addEnsureSafeMemberName(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.ensureSafeObject(self.computedMember(left, right));
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            ensureSafeMemberName(ast.property.name);
	            if (create && create !== 1) {
	              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
	              expression = self.ensureSafeObject(expression);
	            }
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            self.addEnsureSafeFunction(right);
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, self.nextId(), undefined, function(argument) {
	                args.push(self.ensureSafeObject(argument));
	              });
	            });
	            if (left.name) {
	              if (!self.state.expensiveChecks) {
	                self.addEnsureSafeObject(left.context);
	              }
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            expression = self.ensureSafeObject(expression);
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      if (!isAssignable(ast.left)) {
	        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');
	      }
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
	          self.addEnsureSafeAssignContext(left.context);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        self.recurse(property.value, self.nextId(), undefined, function(expr) {
	          args.push(self.escape(
	              property.key.type === AST.Identifier ? property.key.name :
	                ('' + property.key.value)) +
	              ':' + expr);
	        });
	      });
	      expression = '{' + args.join(',') + '}';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn('s');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn('v');
	      break;
	    }
	  },

	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },

	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },

	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },

	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },

	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },

	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },

	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },

	  not: function(expression) {
	    return '!(' + expression + ')';
	  },

	  notNull: function(expression) {
	    return expression + '!=null';
	  },

	  nonComputedMember: function(left, right) {
	    return left + '.' + right;
	  },

	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },

	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },

	  addEnsureSafeObject: function(item) {
	    this.current().body.push(this.ensureSafeObject(item), ';');
	  },

	  addEnsureSafeMemberName: function(item) {
	    this.current().body.push(this.ensureSafeMemberName(item), ';');
	  },

	  addEnsureSafeFunction: function(item) {
	    this.current().body.push(this.ensureSafeFunction(item), ';');
	  },

	  addEnsureSafeAssignContext: function(item) {
	    this.current().body.push(this.ensureSafeAssignContext(item), ';');
	  },

	  ensureSafeObject: function(item) {
	    return 'ensureSafeObject(' + item + ',text)';
	  },

	  ensureSafeMemberName: function(item) {
	    return 'ensureSafeMemberName(' + item + ',text)';
	  },

	  ensureSafeFunction: function(item) {
	    return 'ensureSafeFunction(' + item + ',text)';
	  },

	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ',text)');
	  },

	  ensureSafeAssignContext: function(item) {
	    return 'ensureSafeAssignContext(' + item + ',text)';
	  },

	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },

	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },

	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },

	  escape: function(value) {
	    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';

	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },

	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },

	  current: function() {
	    return this.state[this.state.computing];
	  }
	};


	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}

	ASTInterpreter.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.expression = expression;
	    this.expensiveChecks = expensiveChecks;
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? function() {} :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },

	  recurse: function(ast, context, create) {
	    var left, right, self = this, args, expression;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      ensureSafeMemberName(ast.name, self.expression);
	      return self.identifier(ast.name,
	                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
	                             context, create, self.expression);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        ensureSafeMemberName(ast.property.name, self.expression);
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create, self.expression) :
	        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            ensureSafeObject(rhs.context, self.expression);
	            ensureSafeFunction(rhs.value, self.expression);
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
	            }
	            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        ensureSafeObject(lhs.value, self.expression);
	        ensureSafeAssignContext(lhs.context);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        args.push({key: property.key.type === AST.Identifier ?
	                        property.key.name :
	                        ('' + property.key.value),
	                   value: self.recurse(property.value)
	        });
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign, inputs) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },

	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && !(base[name])) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (expensiveChecks) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        ensureSafeMemberName(rhs, expression);
	        if (create && create !== 1 && lhs && !(lhs[rhs])) {
	          lhs[rhs] = {};
	        }
	        value = lhs[rhs];
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1 && lhs && !(lhs[right])) {
	        lhs[right] = {};
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};

	/**
	 * @constructor
	 */
	var Parser = function(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(this.lexer);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};

	Parser.prototype = {
	  constructor: Parser,

	  parse: function(text) {
	    return this.astCompiler.compile(text, this.options.expensiveChecks);
	  }
	};

	var getterFnCacheDefault = createMap();
	var getterFnCacheExpensive = createMap();

	function isPossiblyDangerousMemberName(name) {
	  return name == 'constructor';
	}

	var objectValueOf = Object.prototype.valueOf;

	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}

	///////////////////////////////////

	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */


	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cacheDefault = createMap();
	  var cacheExpensive = createMap();

	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          expensiveChecks: false
	        },
	        $parseOptionsExpensive = {
	          csp: noUnsafeEval,
	          expensiveChecks: true
	        };

	    return function $parse(exp, interceptorFn, expensiveChecks) {
	      var parsedExpression, oneTime, cacheKey;

	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;

	          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
	          parsedExpression = cache[cacheKey];

	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
	            var lexer = new Lexer(parseOptions);
	            var parser = new Parser(lexer, $filter, parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);

	        case 'function':
	          return addInterceptor(exp, interceptorFn);

	        default:
	          return noop;
	      }
	    };

	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }

	      if (typeof newValue === 'object') {

	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);

	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }

	        // fall-through to the primitive equality check
	      }

	      //Primitive or NaN
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }

	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;

	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }

	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }

	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;

	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }

	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }

	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }

	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }, objectEquality);
	    }

	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.call(this, value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);

	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }

	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantWatch(scope) {
	        return parsedExpression(scope);
	      }, function constantListener(value, old, scope) {
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        unwatch();
	      }, objectEquality);
	    }

	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;

	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;

	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };

	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }

	      return fn;
	    }
	  }];
	}

	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 *  # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	function $QProvider() {

	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler);
	  }];
	}

	function $$QProvider() {
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler);
	  }];
	}

	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler) {
	  var $qMinErr = minErr('$q', TypeError);
	  function callOnce(self, resolveFn, rejectFn) {
	    var called = false;
	    function wrap(fn) {
	      return function(value) {
	        if (called) return;
	        called = true;
	        fn.call(self, value);
	      };
	    }

	    return [wrap(resolveFn), wrap(rejectFn)];
	  }

	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  var defer = function() {
	    return new Deferred();
	  };

	  function Promise() {
	    this.$$state = { status: 0 };
	  }

	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Deferred();

	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

	      return result.promise;
	    },

	    "catch": function(callback) {
	      return this.then(null, callback);
	    },

	    "finally": function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, true, callback);
	      }, function(error) {
	        return handleCallback(error, false, callback);
	      }, progressBack);
	    }
	  });

	  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
	  function simpleBind(context, fn) {
	    return function(value) {
	      fn.call(context, value);
	    };
	  }

	  function processQueue(state) {
	    var fn, deferred, pending;

	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    for (var i = 0, ii = pending.length; i < ii; ++i) {
	      deferred = pending[i][0];
	      fn = pending[i][state.status];
	      try {
	        if (isFunction(fn)) {
	          deferred.resolve(fn(state.value));
	        } else if (state.status === 1) {
	          deferred.resolve(state.value);
	        } else {
	          deferred.reject(state.value);
	        }
	      } catch (e) {
	        deferred.reject(e);
	        exceptionHandler(e);
	      }
	    }
	  }

	  function scheduleProcessQueue(state) {
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    nextTick(function() { processQueue(state); });
	  }

	  function Deferred() {
	    this.promise = new Promise();
	    //Necessary to support unbound execution :/
	    this.resolve = simpleBind(this, this.resolve);
	    this.reject = simpleBind(this, this.reject);
	    this.notify = simpleBind(this, this.notify);
	  }

	  extend(Deferred.prototype, {
	    resolve: function(val) {
	      if (this.promise.$$state.status) return;
	      if (val === this.promise) {
	        this.$$reject($qMinErr(
	          'qcycle',
	          "Expected promise to be resolved with value other than itself '{0}'",
	          val));
	      } else {
	        this.$$resolve(val);
	      }

	    },

	    $$resolve: function(val) {
	      var then, fns;

	      fns = callOnce(this, this.$$resolve, this.$$reject);
	      try {
	        if ((isObject(val) || isFunction(val))) then = val && val.then;
	        if (isFunction(then)) {
	          this.promise.$$state.status = -1;
	          then.call(val, fns[0], fns[1], this.notify);
	        } else {
	          this.promise.$$state.value = val;
	          this.promise.$$state.status = 1;
	          scheduleProcessQueue(this.promise.$$state);
	        }
	      } catch (e) {
	        fns[1](e);
	        exceptionHandler(e);
	      }
	    },

	    reject: function(reason) {
	      if (this.promise.$$state.status) return;
	      this.$$reject(reason);
	    },

	    $$reject: function(reason) {
	      this.promise.$$state.value = reason;
	      this.promise.$$state.status = 2;
	      scheduleProcessQueue(this.promise.$$state);
	    },

	    notify: function(progress) {
	      var callbacks = this.promise.$$state.pending;

	      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
	        nextTick(function() {
	          var callback, result;
	          for (var i = 0, ii = callbacks.length; i < ii; i++) {
	            result = callbacks[i][0];
	            callback = callbacks[i][3];
	            try {
	              result.notify(isFunction(callback) ? callback(progress) : progress);
	            } catch (e) {
	              exceptionHandler(e);
	            }
	          }
	        });
	      }
	    }
	  });

	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  var reject = function(reason) {
	    var result = new Deferred();
	    result.reject(reason);
	    return result.promise;
	  };

	  var makePromise = function makePromise(value, resolved) {
	    var result = new Deferred();
	    if (resolved) {
	      result.resolve(value);
	    } else {
	      result.reject(value);
	    }
	    return result.promise;
	  };

	  var handleCallback = function handleCallback(value, isResolved, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return makePromise(e, false);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return makePromise(value, isResolved);
	      }, function(error) {
	        return makePromise(error, false);
	      });
	    } else {
	      return makePromise(value, isResolved);
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */


	  var when = function(value, callback, errback, progressBack) {
	    var result = new Deferred();
	    result.resolve(value);
	    return result.promise.then(callback, errback, progressBack);
	  };

	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;

	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */

	  function all(promises) {
	    var deferred = new Deferred(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};

	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        if (results.hasOwnProperty(key)) return;
	        results[key] = value;
	        if (!(--counter)) deferred.resolve(results);
	      }, function(reason) {
	        if (results.hasOwnProperty(key)) return;
	        deferred.reject(reason);
	      });
	    });

	    if (counter === 0) {
	      deferred.resolve(results);
	    }

	    return deferred.promise;
	  }

	  var $Q = function Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
	    }

	    if (!(this instanceof Q)) {
	      // More useful when $Q is the Promise itself.
	      return new Q(resolver);
	    }

	    var deferred = new Deferred();

	    function resolveFn(value) {
	      deferred.resolve(value);
	    }

	    function rejectFn(reason) {
	      deferred.reject(reason);
	    }

	    resolver(resolveFn, rejectFn);

	    return deferred.promise;
	  };

	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;

	  return $Q;
	}

	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;

	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;

	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };

	    raf.supported = rafSupported;

	    return raf;
	  }];
	}

	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - this means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
	 *
	 * There are few watches then a lot of observers. This is why you don't want the observer to be
	 * implemented in the same way as watch. Watch requires return of initialization function which
	 * are expensive to construct.
	 */


	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */

	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */


	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide an event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;

	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };

	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }

	  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
	      function($injector, $exceptionHandler, $parse, $browser) {

	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }

	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();

	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');

	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }

	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */

	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */

	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */

	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;

	        parent = parent || this;

	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }

	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

	        return child;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);



	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);

	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);

	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);

	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);

	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };

	        lastDirtyWatch = null;

	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }

	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);

	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;

	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }

	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }

	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });

	        function watchGroupAction() {
	          changeReactionScheduled = false;

	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }

	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;

	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });

	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();

	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);

	          $scope.names.pop();
	          $scope.$digest();

	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;

	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;

	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;

	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;

	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }

	            newLength = newValue.length;

	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];

	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];

	                if (key in oldValue) {
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }

	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }

	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }

	        return this.$watch(changeDetector, $watchCollectionAction);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;

	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);

	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);

	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);

	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, logMsg, asyncTask;

	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();

	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }

	        lastDirtyWatch = null;

	        do { // "while dirty" loop
	          dirty = false;
	          current = target;

	          while (asyncQueue.length) {
	            try {
	              asyncTask = asyncQueue.shift();
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }

	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    if ((value = watch.get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (typeof value === 'number' && typeof last === 'number'
	                               && isNaN(value) && isNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }

	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));

	          // `break traverseScopesLoop;` takes us to here

	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }

	        } while (dirty || asyncQueue.length);

	        clearPhase();

	        while (postDigestQueue.length) {
	          try {
	            postDigestQueue.shift()();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	      },


	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;

	        this.$broadcast('$destroy');
	        this.$$destroyed = true;

	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }

	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }

	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};

	        // All of the code below is bogus code that works around V8's memory leak via optimized code
	        // and inline caches.
	        //
	        // see:
	        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

	        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
	            this.$$childTail = this.$root = this.$$watchers = null;
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;

	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }

	        asyncQueue.push({scope: this, expression: expr, locals: locals});
	      },

	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            throw e;
	          }
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        expr && applyAsyncQueue.push($applyAsyncExpression);
	        scheduleApplyAsync();

	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },

	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);

	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));

	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;

	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {

	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);

	        event.currentScope = null;

	        return event;
	      },


	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };

	        if (!target.$$listenerCount[name]) return event;

	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;

	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }

	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }

	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }

	        event.currentScope = null;
	        return event;
	      }
	    };

	    var $rootScope = new Scope();

	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

	    return $rootScope;


	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }

	      $rootScope.$$phase = phase;
	    }

	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }

	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }

	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;

	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }

	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}

	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }

	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}

	/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };


	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };

	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $sceMinErr = minErr('$sce');

	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};

	// Helper functions follow.

	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace('\\*\\*', '.*').
	                  replace('\\*', '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}


	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}


	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */

	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */

	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;

	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   *     Note: **an empty whitelist array will block all URLs**!
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };

	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *     provided.  This must be an array or null.  A snapshot of this array is used so further
	   *     changes to the array are ignored.
	   *
	   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *     allowed in this array.
	   *
	   *     The typical usage for the blacklist is to **block
	   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *     these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *     Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */

	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };

	  this.$get = ['$injector', function($injector) {

	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };

	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }


	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }

	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }

	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }

	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};

	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }

	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }

	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}


	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */

	/* jshint maxlen: false*/

	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	/* jshint maxlen: 100 */

	function $SceProvider() {
	  var enabled = true;

	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };


	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */

	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }

	    var sce = shallowCopy(SCE_CONTEXTS);

	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;

	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }

	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };

	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */

	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;

	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[camelCase("parse_as_" + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[camelCase("get_trusted_" + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[camelCase("trust_as_" + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });

	    return sce;
	  }];
	}

	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        vendorPrefix,
	        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false,
	        match;

	    if (bodyStyle) {
	      for (var prop in bodyStyle) {
	        if (match = vendorRegex.exec(prop)) {
	          vendorPrefix = match[0];
	          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
	          break;
	        }
	      }

	      if (!vendorPrefix) {
	        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
	      }

	      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
	      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

	      if (android && (!transitions ||  !animations)) {
	        transitions = isString(bodyStyle.webkitTransition);
	        animations = isString(bodyStyle.webkitAnimation);
	      }
	    }


	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904

	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      // jshint -W018
	      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
	      // jshint +W018
	      hasEvent: function(event) {
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie <= 11) return false;

	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }

	        return eventSupport[event];
	      },
	      csp: csp(),
	      vendorPrefix: vendorPrefix,
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}

	var $compileMinErr = minErr('$compile');

	/**
	 * @ngdoc service
	 * @name $templateRequest
	 *
	 * @description
	 * The `$templateRequest` service runs security checks then downloads the provided template using
	 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	 * when `tpl` is of type string and `$templateCache` has the matching entry.
	 *
	 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	 *
	 * @return {Promise} a promise for the HTTP response data of the given URL.
	 *
	 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	 */
	function $TemplateRequestProvider() {
	  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {
	    function handleRequestFn(tpl, ignoreRequestError) {
	      handleRequestFn.totalPendingRequests++;

	      // We consider the template cache holds only trusted templates, so
	      // there's no need to go through whitelisting again for keys that already
	      // are included in there. This also makes Angular accept any script
	      // directive, no matter its name. However, we still need to unwrap trusted
	      // types.
	      if (!isString(tpl) || !$templateCache.get(tpl)) {
	        tpl = $sce.getTrustedResourceUrl(tpl);
	      }

	      var transformResponse = $http.defaults && $http.defaults.transformResponse;

	      if (isArray(transformResponse)) {
	        transformResponse = transformResponse.filter(function(transformer) {
	          return transformer !== defaultHttpResponseTransform;
	        });
	      } else if (transformResponse === defaultHttpResponseTransform) {
	        transformResponse = null;
	      }

	      var httpOptions = {
	        cache: $templateCache,
	        transformResponse: transformResponse
	      };

	      return $http.get(tpl, httpOptions)
	        ['finally'](function() {
	          handleRequestFn.totalPendingRequests--;
	        })
	        .then(function(response) {
	          $templateCache.put(tpl, response.data);
	          return response.data;
	        }, handleError);

	      function handleError(resp) {
	        if (!ignoreRequestError) {
	          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
	            tpl, resp.status, resp.statusText);
	        }
	        return $q.reject(resp);
	      }
	    }

	    handleRequestFn.totalPendingRequests = 0;

	    return handleRequestFn;
	  }];
	}

	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {

	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};

	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) != -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };

	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };

	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };

	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };

	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };

	    return testability;
	  }];
	}

	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

	    var deferreds = {};


	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
	      *   promise will be resolved with is the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }

	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;

	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        }
	        finally {
	          delete deferreds[promise.$$timeoutId];
	        }

	        if (!skipApply) $rootScope.$apply();
	      }, delay);

	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;

	      return promise;
	    }


	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };

	    return timeout;
	  }];
	}

	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = document.createElement("a");
	var originUrl = urlResolve(window.location.href);


	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;

	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }

	  urlParsingNode.setAttribute('href', href);

	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}

	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}

	/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}

	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';

	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }

	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';

	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};

	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}

	$$CookieReader.$inject = ['$document'];

	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}

	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */

	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */

	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>

	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	function $FilterProvider($provide) {
	  var suffix = 'Filter';

	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;

	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];

	  ////////////////////////////////////////

	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */

	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}

	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>

	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };

	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });

	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	function filterFilter() {
	  return function(array, expression, comparator) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }

	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;

	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        //jshint -W086
	      case 'object':
	        //jshint +W086
	        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }

	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}

	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
	  var predicateFn;

	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }

	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }

	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression.$, comparator, false);
	    }
	    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
	  };

	  return predicateFn;
	}

	function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);

	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
	    });
	  }

	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }

	          var matchAnyProperty = key === '$';
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	      break;
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}

	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}

	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }

	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }

	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}

	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });

	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */


	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {

	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}

	var DECIMAL_SEP = '.';
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
	  if (isObject(number)) return '';

	  var isNegative = number < 0;
	  number = Math.abs(number);

	  var isInfinity = number === Infinity;
	  if (!isInfinity && !isFinite(number)) return '';

	  var numStr = number + '',
	      formatedText = '',
	      hasExponent = false,
	      parts = [];

	  if (isInfinity) formatedText = '\u221e';

	  if (!isInfinity && numStr.indexOf('e') !== -1) {
	    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
	    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
	      number = 0;
	    } else {
	      formatedText = numStr;
	      hasExponent = true;
	    }
	  }

	  if (!isInfinity && !hasExponent) {
	    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

	    // determine fractionSize if it is not specified
	    if (isUndefined(fractionSize)) {
	      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
	    }

	    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
	    // inspired by:
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
	    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

	    var fraction = ('' + number).split(DECIMAL_SEP);
	    var whole = fraction[0];
	    fraction = fraction[1] || '';

	    var i, pos = 0,
	        lgroup = pattern.lgSize,
	        group = pattern.gSize;

	    if (whole.length >= (lgroup + group)) {
	      pos = whole.length - lgroup;
	      for (i = 0; i < pos; i++) {
	        if ((pos - i) % group === 0 && i !== 0) {
	          formatedText += groupSep;
	        }
	        formatedText += whole.charAt(i);
	      }
	    }

	    for (i = pos; i < whole.length; i++) {
	      if ((whole.length - i) % lgroup === 0 && i !== 0) {
	        formatedText += groupSep;
	      }
	      formatedText += whole.charAt(i);
	    }

	    // format fraction part.
	    while (fraction.length < fractionSize) {
	      fraction += '0';
	    }

	    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
	  } else {
	    if (fractionSize > 0 && number < 1) {
	      formatedText = number.toFixed(fractionSize);
	      number = parseFloat(formatedText);
	      formatedText = formatedText.replace(DECIMAL_SEP, decimalSep);
	    }
	  }

	  if (number === 0) {
	    isNegative = false;
	  }

	  parts.push(isNegative ? pattern.negPre : pattern.posPre,
	             formatedText,
	             isNegative ? pattern.negSuf : pattern.posSuf);
	  return parts.join('');
	}

	function padNumber(num, digits, trim) {
	  var neg = '';
	  if (num < 0) {
	    neg =  '-';
	    num = -num;
	  }
	  num = '' + num;
	  while (num.length < digits) num = '0' + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}


	function dateGetter(name, size, offset, trim) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset == -12) value = 12;
	    return padNumber(value, size, trim);
	  };
	}

	function dateStrGetter(name, shortForm) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var get = uppercase(shortForm ? ('SHORT' + name) : name);

	    return formats[get][value];
	  };
	}

	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? "+" : "";

	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);

	  return paddedZone;
	}

	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}

	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}

	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);

	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

	      return padNumber(result, size);
	   };
	}

	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}

	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}

	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}

	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4),
	    yy: dateGetter('FullYear', 2, 0, true),
	     y: dateGetter('FullYear', 1),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};

	var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^\-?\d+$/;

	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {


	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if (match = string.match(R_ISO8601_STR)) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;

	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }


	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;

	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }

	    if (isNumber(date)) {
	      date = new Date(date);
	    }

	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }

	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }

	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
	    });

	    return text;
	  };
	}


	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}


	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);


	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);

	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements
	 * are taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
	 * converted to a string.
	 *
	 * @param {Array|string|number} input Source array, string or number to be limited.
	 * @param {string|number} limit The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
	 *     indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
	 *     had less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });

	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });

	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNaN(limit)) return input;

	    if (isNumber(input)) input = input.toString();
	    if (!isArray(input) && !isString(input)) return input;

	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;

	    if (limit >= 0) {
	      return input.slice(begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return input.slice(limit, input.length);
	      } else {
	        return input.slice(Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}

	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
	 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
	 * as expected, make sure they are actually being saved as numbers and not strings.
	 *
	 * @param {Array} array The array to sort.
	 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
	 *    used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `function`: Getter function. The result of this function will be sorted using the
	 *      `<`, `===`, `>` operator.
	 *    - `string`: An Angular expression. The result of this expression is used to compare elements
	 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
	 *      3 first characters of a property called `name`). The result of a constant expression
	 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
	 *      to sort object by the value of their `special name` property). An expression can be
	 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
	 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
	 *      element itself is used to compare where sorting.
	 *    - `Array`: An array of function or string predicates. The first predicate in the array
	 *      is used for sorting, but when two items are equivalent, the next predicate is used.
	 *
	 *    If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse Reverse the order of the array.
	 * @returns {Array} Sorted copy of the source array.
	 *
	 *
	 * @example
	 * The example below demonstrates a simple ngRepeat, where the data is sorted
	 * by age in descending order (predicate is set to `'-age'`).
	 * `reverse` is not set, which means it defaults to `false`.
	   <example module="orderByExample">
	     <file name="index.html">
	       <script>
	         angular.module('orderByExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <table class="friend">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	   </example>
	 *
	 * The predicate and reverse parameters can be controlled dynamically through scope properties,
	 * as shown in the next example.
	 * @example
	   <example module="orderByExample">
	     <file name="index.html">
	       <script>
	         angular.module('orderByExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.friends =
	                 [{name:'John', phone:'555-1212', age:10},
	                  {name:'Mary', phone:'555-9876', age:19},
	                  {name:'Mike', phone:'555-4321', age:21},
	                  {name:'Adam', phone:'555-5678', age:35},
	                  {name:'Julie', phone:'555-8765', age:29}];
	             $scope.predicate = 'age';
	             $scope.reverse = true;
	             $scope.order = function(predicate) {
	               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	               $scope.predicate = predicate;
	             };
	           }]);
	       </script>
	       <style type="text/css">
	         .sortorder:after {
	           content: '\25b2';
	         }
	         .sortorder.reverse:after {
	           content: '\25bc';
	         }
	       </style>
	       <div ng-controller="ExampleController">
	         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	         <hr/>
	         [ <a href="" ng-click="predicate=''">unsorted</a> ]
	         <table class="friend">
	           <tr>
	             <th>
	               <a href="" ng-click="order('name')">Name</a>
	               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	             </th>
	             <th>
	               <a href="" ng-click="order('phone')">Phone Number</a>
	               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	             </th>
	             <th>
	               <a href="" ng-click="order('age')">Age</a>
	               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	   </example>
	 *
	 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
	 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
	 * desired parameters.
	 *
	 * Example:
	 *
	 * @example
	  <example module="orderByExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <table class="friend">
	          <tr>
	            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
	              (<a href="" ng-click="order('-name',false)">^</a>)</th>
	            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
	            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
	          </tr>
	          <tr ng-repeat="friend in friends">
	            <td>{{friend.name}}</td>
	            <td>{{friend.phone}}</td>
	            <td>{{friend.age}}</td>
	          </tr>
	        </table>
	      </div>
	    </file>

	    <file name="script.js">
	      angular.module('orderByExample', [])
	        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate, reverse) {
	            $scope.friends = orderBy($scope.friends, predicate, reverse);
	          };
	          $scope.order('-age',false);
	        }]);
	    </file>
	</example>
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder) {

	    if (!(isArrayLike(array))) return array;

	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

	    var predicates = processPredicates(sortPredicate, reverseOrder);
	    // Add a predicate at the end that evaluates to the element index. This makes the
	    // sort stable as it works as a tie-breaker when all the input predicates cannot
	    // distinguish between two elements.
	    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});

	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });

	    return array;

	    function getComparisonObject(value, index) {
	      return {
	        value: value,
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }

	    function doComparison(v1, v2) {
	      var result = 0;
	      for (var index=0, length = predicates.length; index < length; ++index) {
	        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
	        if (result) break;
	      }
	      return result;
	    }
	  };

	  function processPredicates(sortPredicate, reverseOrder) {
	    reverseOrder = reverseOrder ? -1 : 1;
	    return sortPredicate.map(function(predicate) {
	      var descending = 1, get = identity;

	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
	          descending = predicate.charAt(0) == '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return { get: get, descending: descending * reverseOrder };
	    });
	  }

	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }

	  function objectValue(value, index) {
	    // If `valueOf` is a valid function use that
	    if (typeof value.valueOf === 'function') {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }
	    // We have a basic object so we use the position of the object in the collection
	    return index;
	  }

	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'string') {
	      value = value.toLowerCase();
	    } else if (type === 'object') {
	      value = objectValue(value, index);
	    }
	    return { value: value, type: type };
	  }

	  function compare(v1, v2) {
	    var result = 0;
	    if (v1.type === v2.type) {
	      if (v1.value !== v2.value) {
	        result = v1.value < v2.value ? -1 : 1;
	      }
	    } else {
	      result = v1.type < v2.type ? -1 : 1;
	    }
	    return result;
	  }
	}

	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}

	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;

	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

	          element(by.id('link-3')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.

	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });

	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });

	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });

	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

	          element(by.id('link-6')).click();

	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */

	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute.  The following example would make the button enabled on Chrome/Firefox
	 * but not on older IEs:
	 *
	 * ```html
	 * <!-- See below for an example of ng-disabled being used correctly -->
	 * <div ng-init="isDisabled = false">
	 *  <button disabled="{{isDisabled}}">Disabled</button>
	 * </div>
	 * ```
	 *
	 * This is because the HTML specification does not require browsers to preserve the values of
	 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * ### Why do we need `ngChecked`?
	 *
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as checked. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngChecked` directive solves this problem for the `checked` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as readonly. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */


	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as selected. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngSelected` directive solves this problem for the `selected` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */

	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * The HTML specification does not require browsers to preserve the values of boolean attributes
	 * such as open. (Their presence means true and their absence means false.)
	 * If we put an Angular interpolation expression into such an attribute then the
	 * binding information would be lost when the browser removes the attribute.
	 * The `ngOpen` directive solves this problem for the `open` attribute.
	 * This complementary directive is not removed by the browser and so provides
	 * a permanent reliable place to store the binding information.
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */

	var ngAttributeAliasDirectives = {};

	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName == "multiple") return;

	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }

	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;

	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }

	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});

	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set("ngPattern", new RegExp(match[1], match[2]));
	            return;
	          }
	        }

	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});

	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;

	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }

	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }

	          attr.$set(name, value);

	          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // we use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});

	/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	SUBMITTED_CLASS = 'ng-submitted';

	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}

	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController(element, attrs, $scope, $animate, $interpolate) {
	  var form = this,
	      controls = [];

	  // init state
	  form.$error = {};
	  form.$$success = {};
	  form.$pending = undefined;
	  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
	  form.$dirty = false;
	  form.$pristine = true;
	  form.$valid = true;
	  form.$invalid = false;
	  form.$submitted = false;
	  form.$$parentForm = nullFormCtrl;

	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  form.$rollbackViewValue = function() {
	    forEach(controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  form.$commitViewValue = function() {
	    forEach(controls, function(control) {
	      control.$commitViewValue();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsiblity to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  form.$addControl = function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    controls.push(control);

	    if (control.$name) {
	      form[control.$name] = control;
	    }

	    control.$$parentForm = form;
	  };

	  // Private API: rename a form control
	  form.$$renameControl = function(control, newName) {
	    var oldName = control.$name;

	    if (form[oldName] === control) {
	      delete form[oldName];
	    }
	    form[newName] = control;
	    control.$name = newName;
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  form.$removeControl = function(control) {
	    if (control.$name && form[control.$name] === control) {
	      delete form[control.$name];
	    }
	    forEach(form.$pending, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$error, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$$success, function(value, name) {
	      form.$setValidity(name, null, control);
	    });

	    arrayRemove(controls, control);
	    control.$$parentForm = nullFormCtrl;
	  };


	  /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: element,
	    set: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        object[property] = [controller];
	      } else {
	        var index = list.indexOf(controller);
	        if (index === -1) {
	          list.push(controller);
	        }
	      }
	    },
	    unset: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        return;
	      }
	      arrayRemove(list, controller);
	      if (list.length === 0) {
	        delete object[property];
	      }
	    },
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  form.$setDirty = function() {
	    $animate.removeClass(element, PRISTINE_CLASS);
	    $animate.addClass(element, DIRTY_CLASS);
	    form.$dirty = true;
	    form.$pristine = false;
	    form.$$parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  form.$setPristine = function() {
	    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    form.$dirty = false;
	    form.$pristine = true;
	    form.$submitted = false;
	    forEach(controls, function(control) {
	      control.$setPristine();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  form.$setUntouched = function() {
	    forEach(controls, function(control) {
	      control.$setUntouched();
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  form.$setSubmitted = function() {
	    $animate.addClass(element, SUBMITTED_CLASS);
	    form.$submitted = true;
	    form.$$parentForm.$setSubmitted();
	  };
	}

	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */

	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
	 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
	 * using Angular validation directives in forms that are dynamically generated using the
	 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
	 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
	 * `ngForm` directive and nest these in an outer `form` element.
	 *
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));

	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });

	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));

	          userInput.clear();
	          userInput.sendKeys('');

	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];

	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });

	                event.preventDefault();
	              };

	              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }

	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);

	            var setter = nameAttr ? getSetter(controller.$name) : noop;

	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };

	    return formDirective;

	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};

	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);

	/* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  ngModelMinErr: false,
	*/

	// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
	var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
	var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
	var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

	var inputType = {

	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <tt>text = {{example.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,

	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));

	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }

	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });

	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });

	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),

	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),

	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),

	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));

	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }

	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });

	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });

	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),

	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));

	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,


	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');

	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,


	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	   *    a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));

	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });

	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });

	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');

	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,


	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));

	            expect(color.getText()).toContain('blue');

	            element.all(by.model('color.name')).get(0).click();

	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,


	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));

	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');

	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();

	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,

	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};

	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}

	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}

	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);

	  // In composition mode, users are still inputing intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;

	    element.on('compositionstart', function(data) {
	      composing = true;
	    });

	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }

	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;

	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }

	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };

	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var timeout;

	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };

	    element.on('keydown', function(event) {
	      var key = event.keyCode;

	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

	      deferListener(event, this, this.value);
	    });

	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }

	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);

	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}

	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }

	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;

	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }

	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }

	  return NaN;
	}

	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;

	    if (isDate(iso)) {
	      return iso;
	    }

	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);

	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }

	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }

	    return NaN;
	  };
	}

	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
	    var previousDate;

	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });

	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });

	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }

	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }

	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}

	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
	      // - also sets validity.badInput (should only be validity.typeMismatch).
	      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
	      // - can ignore this case as we can still read out the erroneous email...
	      return validity.badInput && !validity.typeMismatch ? undefined : value;
	    });
	  }
	}

	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });

	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });

	  if (isDefined(attr.min) || attr.ngMin) {
	    var minVal;
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };

	    attr.$observe('min', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }

	  if (isDefined(attr.max) || attr.ngMax) {
	    var maxVal;
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };

	    attr.$observe('max', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}

	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}

	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);

	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}

	function radioInputType(scope, element, attr, ctrl) {
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }

	  var listener = function(ev) {
	    if (element[0].checked) {
	      ctrl.$setViewValue(attr.value, ev && ev.type);
	    }
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    var value = attr.value;
	    element[0].checked = (value == ctrl.$viewValue);
	  };

	  attr.$observe('value', ctrl.$render);
	}

	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}

	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };

	  element.on('click', listener);

	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };

	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };

	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });

	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}


	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	 *    a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */


	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
	 *    a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));

	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');

	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');

	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });

	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });

	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');

	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];



	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));

	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          attr.$set('value', scope.$eval(attr.ngValue));
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            attr.$set('value', value);
	          });
	        };
	      }
	    }
	  };
	};

	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));

	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));

	         expect(salutationElem.getText()).toBe('Hello World!');

	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');

	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example

	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>

	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>

	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
	        return (value || '').toString();
	      });
	      $compile.$$addBindingClass(tElement);

	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);

	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // we re-evaluate the expr because we want a TrustedValueHolderType
	          // for $sce, not a string
	          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
	        });
	      };
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();

	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});

	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;

	        scope.$watch(attr[name], ngClassWatchAction, true);

	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });


	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            // jshint bitwise: false
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              mod === selector ?
	                addClasses(classes) :
	                removeClasses(classes);
	            }
	          });
	        }

	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }

	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }

	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }

	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }

	        function ngClassWatchAction(newVal) {
	          if (selector === true || scope.$index % 2 === selector) {
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          oldVal = shallowCopy(newVal);
	        }
	      }
	    };

	    function arrayDifference(tokens1, tokens2) {
	      var values = [];

	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token == tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }

	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}

	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @animations
	 * **add** - happens just before the class is applied to the elements
	 *
	 * **remove** - happens just before the class is removed from the element
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));

	       it('should let you toggle the class', function() {

	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);

	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });

	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });

	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });

	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>

	   ## Animations

	   The example below demonstrates how to perform animations using ngClass.

	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }

	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);

	         element(by.id('setbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);

	         element(by.id('clearbtn')).click();

	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>


	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);

	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);

	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);

	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>

	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 *
	 * Angular has some features that can break certain
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement these rules then you must tell Angular not to use these features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following rules affect Angular:
	 *
	 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
	 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
	 * increase in the speed of evaluating Angular expressions.
	 *
	 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
	 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
	 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
	 * `angular-csp.css` in your HTML manually.
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
	 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
	 * however, triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
	 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>

	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;

	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));

	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }

	          function clearErrors() {
	            getAndClearSevereErrors();
	          }

	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }

	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }

	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });

	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }

	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });

	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });

	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */

	// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
	// bootstrap the system (before $parse is instantiated), for this reason we just have
	// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc

	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};

	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);

	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */


	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */

	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */

	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
	 * leave - happens just before the `ngIf` contents are removed from the DOM
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }

	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }

	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }

	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', function($animate) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).then(function() {
	                previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * enter - animation is used to bring new content into the browser.
	 * leave - animation is used to animate existing content away.
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .slide-animate {
	        padding:10px;
	      }

	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }

	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }

	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));

	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });

	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });

	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */


	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;

	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;

	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).then(function() {
	              previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };

	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function() {
	            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	              $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;

	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;

	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).then(afterAnimation);
	              });

	              currentScope = newScope;
	              currentElement = clone;

	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];

	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (/SVG/.test($element[0].toString())) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }

	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];

	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});

	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      // We want to control whitespace trimming so we use this convoluted approach
	      // to access the ngList attribute, which doesn't pre-trim the attribute
	      var ngList = element.attr(attr.$attr.ngList) || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;

	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;

	        var list = [];

	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }

	        return list;
	      };

	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }

	        return undefined;
	      });

	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};

	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/

	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    PENDING_CLASS = 'ng-pending';

	var ngModelMinErr = minErr('ngModel');

	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.

	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.

	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.

	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }

	      .ng-invalid {
	        border: 1px solid red;
	      }

	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model

	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };

	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize

	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';

	      expect(contentEditable.getText()).toEqual(content);

	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
	    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;

	  var parsedNgModel = $parse($attr.ngModel),
	      parsedNgModelAssign = parsedNgModel.assign,
	      ngModelGet = parsedNgModel,
	      ngModelSet = parsedNgModelAssign,
	      pendingDebounce = null,
	      parserValid,
	      ctrl = this;

	  this.$$setOptions = function(options) {
	    ctrl.$options = options;
	    if (options && options.getterSetter) {
	      var invokeModelGetter = $parse($attr.ngModel + '()'),
	          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

	      ngModelGet = function($scope) {
	        var modelValue = parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      ngModelSet = function($scope, newValue) {
	        if (isFunction(parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
	        } else {
	          parsedNgModelAssign($scope, ctrl.$modelValue);
	        }
	      };
	    } else if (!parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
	          $attr.ngModel, startingTag($element));
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  this.$render = noop;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  this.$isEmpty = function(value) {
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  };

	  var currentValidationRunId = 0;

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: $element,
	    set: function(object, property) {
	      object[property] = true;
	    },
	    unset: function(object, property) {
	      delete object[property];
	    },
	    $animate: $animate
	  });

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  this.$setPristine = function() {
	    ctrl.$dirty = false;
	    ctrl.$pristine = true;
	    $animate.removeClass($element, DIRTY_CLASS);
	    $animate.addClass($element, PRISTINE_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  this.$setDirty = function() {
	    ctrl.$dirty = true;
	    ctrl.$pristine = false;
	    $animate.removeClass($element, PRISTINE_CLASS);
	    $animate.addClass($element, DIRTY_CLASS);
	    ctrl.$$parentForm.$setDirty();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  this.$setUntouched = function() {
	    ctrl.$touched = false;
	    ctrl.$untouched = true;
	    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  this.$setTouched = function() {
	    ctrl.$touched = true;
	    ctrl.$untouched = false;
	    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced events or events such
	   * as blur you can have a situation where there is a period when the `$viewValue`
	   * is out of synch with the ngModel's `$modelValue`.
	   *
	   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.resetWithCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myForm.myInput1.$rollbackViewValue();
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *       $scope.resetWithoutCancel = function(e) {
	   *         if (e.keyCode == 27) {
	   *           $scope.myValue = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Try typing something in each input.  See that the model only updates when you
	   *          blur off the input.
	   *        </p>
	   *        <p>Now see what happens if you start typing then press the Escape key</p>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <p id="inputDescription1">With $rollbackViewValue()</p>
	   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"
	   *                ng-keydown="resetWithCancel($event)"><br/>
	   *         myValue: "{{ myValue }}"
	   *
	   *         <p id="inputDescription2">Without $rollbackViewValue()</p>
	   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"
	   *                ng-keydown="resetWithoutCancel($event)"><br/>
	   *         myValue: "{{ myValue }}"
	   *       </form>
	   *     </div>
	   *   </file>
	   * </example>
	   */
	  this.$rollbackViewValue = function() {
	    $timeout.cancel(pendingDebounce);
	    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
	    ctrl.$render();
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  this.$validate = function() {
	    // ignore $validate before model is initialized
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      return;
	    }

	    var viewValue = ctrl.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = ctrl.$$rawModelValue;

	    var prevValid = ctrl.$valid;
	    var prevModelValue = ctrl.$modelValue;

	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

	    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;

	        if (ctrl.$modelValue !== prevModelValue) {
	          ctrl.$$writeModelToScope();
	        }
	      }
	    });

	  };

	  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
	    currentValidationRunId++;
	    var localValidationRunId = currentValidationRunId;

	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();

	    function processParseErrors() {
	      var errorKey = ctrl.$$parserName || 'parse';
	      if (isUndefined(parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!parserValid) {
	          forEach(ctrl.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(ctrl.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, parserValid);
	        return parserValid;
	      }
	      return true;
	    }

	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(ctrl.$validators, function(validator, name) {
	        var result = validator(modelValue, viewValue);
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(ctrl.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }

	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(ctrl.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr("$asyncValidators",
	            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function(error) {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        $q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }

	    function setValidity(name, isValid) {
	      if (localValidationRunId === currentValidationRunId) {
	        ctrl.$setValidity(name, isValid);
	      }
	    }

	    function validationDone(allValid) {
	      if (localValidationRunId === currentValidationRunId) {

	        doneCallback(allValid);
	      }
	    }
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  this.$commitViewValue = function() {
	    var viewValue = ctrl.$viewValue;

	    $timeout.cancel(pendingDebounce);

	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
	      return;
	    }
	    ctrl.$$lastCommittedViewValue = viewValue;

	    // change to dirty
	    if (ctrl.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  };

	  this.$$parseAndValidate = function() {
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    parserValid = isUndefined(modelValue) ? undefined : true;

	    if (parserValid) {
	      for (var i = 0; i < ctrl.$parsers.length; i++) {
	        modelValue = ctrl.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      // ctrl.$modelValue has not been touched yet...
	      ctrl.$modelValue = ngModelGet($scope);
	    }
	    var prevModelValue = ctrl.$modelValue;
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	    ctrl.$$rawModelValue = modelValue;

	    if (allowInvalid) {
	      ctrl.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }

	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });

	    function writeToModelIfNeeded() {
	      if (ctrl.$modelValue !== prevModelValue) {
	        ctrl.$$writeModelToScope();
	      }
	    }
	  };

	  this.$$writeModelToScope = function() {
	    ngModelSet($scope, ctrl.$modelValue);
	    forEach(ctrl.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        $exceptionHandler(e);
	      }
	    });
	  };

	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realise that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  this.$setViewValue = function(value, trigger) {
	    ctrl.$viewValue = value;
	    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
	      ctrl.$$debounceViewValueCommit(trigger);
	    }
	  };

	  this.$$debounceViewValueCommit = function(trigger) {
	    var debounceDelay = 0,
	        options = ctrl.$options,
	        debounce;

	    if (options && isDefined(options.debounce)) {
	      debounce = options.debounce;
	      if (isNumber(debounce)) {
	        debounceDelay = debounce;
	      } else if (isNumber(debounce[trigger])) {
	        debounceDelay = debounce[trigger];
	      } else if (isNumber(debounce['default'])) {
	        debounceDelay = debounce['default'];
	      }
	    }

	    $timeout.cancel(pendingDebounce);
	    if (debounceDelay) {
	      pendingDebounce = $timeout(function() {
	        ctrl.$commitViewValue();
	      }, debounceDelay);
	    } else if ($rootScope.$$phase) {
	      ctrl.$commitViewValue();
	    } else {
	      $scope.$apply(function() {
	        ctrl.$commitViewValue();
	      });
	    }
	  };

	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  $scope.$watch(function ngModelWatch() {
	    var modelValue = ngModelGet($scope);

	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      parserValid = undefined;

	      var formatters = ctrl.$formatters,
	          idx = formatters.length;

	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();

	        ctrl.$$runValidators(modelValue, viewValue, noop);
	      }
	    }

	    return modelValue;
	  });
	}];


	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm;

	          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);

	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });

	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
	            element.on(modelCtrl.$options.updateOn, function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }

	          element.on('blur', function(ev) {
	            if (modelCtrl.$touched) return;

	            if ($rootScope.$$phase) {
	              scope.$evalAsync(modelCtrl.$setTouched);
	            } else {
	              scope.$apply(modelCtrl.$setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];

	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example

	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.

	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say', data: '' };

	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));

	      it('should allow custom events', function() {
	        input.sendKeys(' hello');
	        input.click();
	        expect(model.getText()).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say hello');
	      });

	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' hello');
	        expect(input.getAttribute('value')).toEqual('say hello');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('say');
	        other.click();
	        expect(model.getText()).toEqual('say');
	      });
	    </file>
	  </example>

	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'say' };
	        }]);
	    </file>
	  </example>

	  This one shows how to bind to getter/setters:

	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    controller: ['$scope', '$attrs', function($scope, $attrs) {
	      var that = this;
	      this.$options = copy($scope.$eval($attrs.ngModelOptions));
	      // Allow adding/overriding bound events
	      if (isDefined(this.$options.updateOn)) {
	        this.$options.updateOnDefault = false;
	        // extract "default" pseudo-event from list of events that can trigger a model update
	        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
	          that.$options.updateOnDefault = true;
	          return ' ';
	        }));
	      } else {
	        this.$options.updateOnDefault = true;
	      }
	    }]
	  };
	};



	// helper methods
	function addSetValidityMethod(context) {
	  var ctrl = context.ctrl,
	      $element = context.$element,
	      classCache = {},
	      set = context.set,
	      unset = context.unset,
	      $animate = context.$animate;

	  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

	  ctrl.$setValidity = setValidity;

	  function setValidity(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet('$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup('$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(ctrl.$error, validationErrorKey, controller);
	      unset(ctrl.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(ctrl.$error, validationErrorKey, controller);
	        set(ctrl.$$success, validationErrorKey, controller);
	      } else {
	        set(ctrl.$error, validationErrorKey, controller);
	        unset(ctrl.$$success, validationErrorKey, controller);
	      }
	    }
	    if (ctrl.$pending) {
	      cachedToggleClass(PENDING_CLASS, true);
	      ctrl.$valid = ctrl.$invalid = undefined;
	      toggleValidationCss('', null);
	    } else {
	      cachedToggleClass(PENDING_CLASS, false);
	      ctrl.$valid = isObjectEmpty(ctrl.$error);
	      ctrl.$invalid = !ctrl.$valid;
	      toggleValidationCss('', ctrl.$valid);
	    }

	    // re-read the state as the set/unset methods could have
	    // combined state in ctrl.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (ctrl.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (ctrl.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }

	    toggleValidationCss(validationErrorKey, combinedState);
	    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
	  }

	  function createAndSet(name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }

	  function unsetAndCleanup(name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }

	  function cachedToggleClass(className, switchValue) {
	    if (switchValue && !classCache[className]) {
	      $animate.addClass($element, className);
	      classCache[className] = true;
	    } else if (!switchValue && classCache[className]) {
	      $animate.removeClass($element, className);
	      classCache[className] = false;
	    }
	  }

	  function toggleValidationCss(validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

	    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}

	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

	/* global jqLiteRemove */

	var ngOptionsMinErr = minErr('ngOptions');

	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when
	 * binding any input directive to a model that is an object or a collection.
	 *
	 * Since this is a common situation for `ngOptions` the directive additionally watches the model using
	 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in
	 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual
	 * object/collection has not changed identity but only a property on the object or an item in the collection
	 * changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper inside the object/collection that the
	 * first level will not trigger a re-rendering.
	 *
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
	 * </div>
	 *
	 * Consider the following example:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"></select>
	 * ```
	 *
	 * ```js
	 * $scope.values = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 *
	 * $scope.selected = { name: 'aSubItem' };
	 * ```
	 *
	 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
	 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
	 * following:
	 *
	 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
	 * 2. Apply **`track by`** to the already selected value in `ngModel`.
	 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
	 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
	 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
	 *    selected" option.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>

	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>

	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>



	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */

	// jshint maxlen: false
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	// jshint maxlen: 100


	var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {

	  function parseOptionsExpression(optionsExp, selectElement, scope) {

	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        "Expected expression in form of " +
	        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
	        " but got '{0}'. Element: {1}",
	        optionsExp, startingTag(selectElement));
	    }

	    // Extract the parts from the ngOptions expression

	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];

	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);

	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };

	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);

	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };


	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }

	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;

	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }

	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];

	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];

	          var locals = getLocals(optionValues[key], key);
	          var selectValue = getTrackByValueFn(optionValues[key], locals);
	          watchedArray.push(selectValue);

	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }

	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),

	      getOptions: function() {

	        var optionItems = [];
	        var selectValueMap = {};

	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;

	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }

	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }


	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = document.createElement('option'),
	      optGroupTemplate = document.createElement('optgroup');

	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', '?ngModel'],
	    link: function(scope, selectElement, attr, ctrls) {

	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];
	      var multiple = attr.multiple;

	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      var emptyOption;
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          emptyOption = children.eq(i);
	          break;
	        }
	      }

	      var providedEmptyOption = !!emptyOption;

	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');

	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);


	      var renderEmptyOption = function() {
	        if (!providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	        selectElement.val('');
	        emptyOption.prop('selected', true); // needed for IE
	        emptyOption.attr('selected', true);
	      };

	      var removeEmptyOption = function() {
	        if (!providedEmptyOption) {
	          emptyOption.remove();
	        }
	      };


	      var renderUnknownOption = function() {
	        selectElement.prepend(unknownOption);
	        selectElement.val('?');
	        unknownOption.prop('selected', true); // needed for IE
	        unknownOption.attr('selected', true);
	      };

	      var removeUnknownOption = function() {
	        unknownOption.remove();
	      };


	      // Update the controller methods for multiple selectable options
	      if (!multiple) {

	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var option = options.getOptionFromViewValue(value);

	          if (option && !option.disabled) {
	            if (selectElement[0].value !== option.selectValue) {
	              removeUnknownOption();
	              removeEmptyOption();

	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	              option.element.setAttribute('selected', 'selected');
	            }
	          } else {
	            if (value === null || providedEmptyOption) {
	              removeUnknownOption();
	              renderEmptyOption();
	            } else {
	              removeEmptyOption();
	              renderUnknownOption();
	            }
	          }
	        };

	        selectCtrl.readValue = function readNgOptionsValue() {

	          var selectedOption = options.selectValueMap[selectElement.val()];

	          if (selectedOption && !selectedOption.disabled) {
	            removeEmptyOption();
	            removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };

	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }

	      } else {

	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };


	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });

	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option && !option.disabled) option.element.selected = true;
	            });
	          }
	        };


	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];

	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });

	          return selections;
	        };

	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {

	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });

	        }
	      }


	      if (providedEmptyOption) {

	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        emptyOption.remove();

	        // compile the element since there might be bindings in it
	        $compile(emptyOption)(scope);

	        // remove the class, which is added automatically because we recompile the element and it
	        // becomes the compilation root
	        emptyOption.removeClass('ng-scope');
	      } else {
	        emptyOption = jqLite(optionTemplate.cloneNode(false));
	      }

	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();

	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

	      // ------------------------------------------------------------------ //


	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        if (option.value !== element.value) element.value = option.selectValue;
	      }

	      function addOrReuseElement(parent, current, type, templateElement) {
	        var element;
	        // Check whether we can reuse the next element
	        if (current && lowercase(current.nodeName) === type) {
	          // The next element is the right type so reuse it
	          element = current;
	        } else {
	          // The next element is not the right type so create a new one
	          element = templateElement.cloneNode(false);
	          if (!current) {
	            // There are no more elements so just append it to the select
	            parent.appendChild(element);
	          } else {
	            // The next element is not a group so insert the new one
	            parent.insertBefore(element, current);
	          }
	        }
	        return element;
	      }


	      function removeExcessElements(current) {
	        var next;
	        while (current) {
	          next = current.nextSibling;
	          jqLiteRemove(current);
	          current = next;
	        }
	      }


	      function skipEmptyAndUnknownOptions(current) {
	        var emptyOption_ = emptyOption && emptyOption[0];
	        var unknownOption_ = unknownOption && unknownOption[0];

	        if (emptyOption_ || unknownOption_) {
	          while (current &&
	                (current === emptyOption_ ||
	                current === unknownOption_ ||
	                emptyOption_ && emptyOption_.nodeType === NODE_TYPE_COMMENT)) {
	            // Empty options might have directives that transclude
	            // and insert comments (e.g. ngIf)
	            current = current.nextSibling;
	          }
	        }
	        return current;
	      }


	      function updateOptions() {

	        var previousValue = options && selectCtrl.readValue();

	        options = ngOptions.getOptions();

	        var groupMap = {};
	        var currentElement = selectElement[0].firstChild;

	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }

	        currentElement = skipEmptyAndUnknownOptions(currentElement);

	        options.items.forEach(function updateOption(option) {
	          var group;
	          var groupElement;
	          var optionElement;

	          if (option.group) {

	            // This option is to live in a group
	            // See if we have already created this group
	            group = groupMap[option.group];

	            if (!group) {

	              // We have not already created this group
	              groupElement = addOrReuseElement(selectElement[0],
	                                               currentElement,
	                                               'optgroup',
	                                               optGroupTemplate);
	              // Move to the next element
	              currentElement = groupElement.nextSibling;

	              // Update the label on the group element
	              groupElement.label = option.group;

	              // Store it for use later
	              group = groupMap[option.group] = {
	                groupElement: groupElement,
	                currentOptionElement: groupElement.firstChild
	              };

	            }

	            // So now we have a group for this option we add the option to the group
	            optionElement = addOrReuseElement(group.groupElement,
	                                              group.currentOptionElement,
	                                              'option',
	                                              optionTemplate);
	            updateOptionElement(option, optionElement);
	            // Move to the next element
	            group.currentOptionElement = optionElement.nextSibling;

	          } else {

	            // This option is not in a group
	            optionElement = addOrReuseElement(selectElement[0],
	                                              currentElement,
	                                              'option',
	                                              optionTemplate);
	            updateOptionElement(option, optionElement);
	            // Move to the next element
	            currentElement = optionElement.nextSibling;
	          }
	        });


	        // Now remove all excess options and group
	        Object.keys(groupMap).forEach(function(key) {
	          removeExcessElements(groupMap[key].currentOptionElement);
	        });
	        removeExcessElements(currentElement);

	        ngModelCtrl.$render();

	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }

	      }

	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>

	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));

	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');

	          countInput.clear();
	          countInput.sendKeys('0');

	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');

	          countInput.clear();
	          countInput.sendKeys('2');

	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

	          countInput.clear();
	          countInput.sendKeys('3');

	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

	          countInput.clear();
	          countInput.sendKeys('4');

	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;

	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;

	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

	      });

	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNaN(count);

	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }

	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to exlicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });

	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * You need to be aware that the JavaScript specification does not define the order of keys
	 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
	 * used to sort the keys alphabetically.)
	 *
	 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
	 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
	 * keys in the order in which they were defined, although there are exceptions when keys are deleted
	 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
	 *
	 * If this is not desired, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
	 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
	 * items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * If you are working with objects that have an identifier property, you can track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones:
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *     {{model.name}}
	 * </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
	 *
	 * **.leave** - when an item is removed from the list or when an item is filtered out
	 *
	 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example initializes the scope to a list of names and
	 * then uses `ngRepeat` to display every person:
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-init="friends = [
	        {name:'John', age:25, gender:'boy'},
	        {name:'Jessie', age:30, gender:'girl'},
	        {name:'Johanna', age:28, gender:'girl'},
	        {name:'Joy', age:15, gender:'girl'},
	        {name:'Mary', age:28, gender:'girl'},
	        {name:'Peter', age:95, gender:'boy'},
	        {name:'Sebastian', age:50, gender:'boy'},
	        {name:'Erika', age:27, gender:'girl'},
	        {name:'Patrick', age:40, gender:'boy'},
	        {name:'Samantha', age:60, gender:'girl'}
	      ]">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }

	      .animate-repeat {
	        line-height:40px;
	        list-style:none;
	        box-sizing:border-box;
	      }

	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }

	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }

	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:40px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));

	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });

	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);

	         element(by.model('q')).sendKeys('ma');

	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');

	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // jshint bitwise: false
	    scope.$odd = !(scope.$even = (index&1) === 0);
	    // jshint bitwise: true
	  };

	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };

	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };


	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

	      if (!match) {
	        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	            expression);
	      }

	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];

	      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

	      if (!match) {
	        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];

	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
	          aliasAs);
	      }

	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};

	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }

	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }

	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();

	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;

	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }

	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }

	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);

	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }

	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }

	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];

	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element

	              nextNode = previousNode;

	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);

	              if (getBlockStart(block) != nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;

	                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
	                $animate.enter(clone, null, jqLite(previousNode));
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];

	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
	 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }

	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];


	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
	 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }

	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }

	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();

	        element(by.model('checked')).click();

	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));

	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});

	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>

	 * @animations
	 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
	 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }

	      .animate-switch {
	        padding:10px;
	      }

	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }

	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));

	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', function($animate) {
	  return {
	    require: 'ngSwitch',

	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function ngSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];

	      var spliceFactory = function(array, index) {
	          return function() { array.splice(index, 1); };
	      };

	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
	          $animate.cancel(previousLeaveAnimations[i]);
	        }
	        previousLeaveAnimations.length = 0;

	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
	          promise.then(spliceFactory(previousLeaveAnimations, i));
	        }

	        selectedElements.length = 0;
	        selectedScopes.length = 0;

	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
	              var block = { clone: caseElement };

	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];

	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
	    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
	  }
	});

	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});

	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
	 *
	 * @element ANY
	 *
	 * @example
	   <example module="transcludeExample">
	     <file name="index.html">
	       <script>
	         angular.module('transcludeExample', [])
	          .directive('pane', function(){
	             return {
	               restrict: 'E',
	               transclude: true,
	               scope: { title:'@' },
	               template: '<div style="border: 1px solid black;">' +
	                           '<div style="background-color: gray">{{title}}</div>' +
	                           '<ng-transclude></ng-transclude>' +
	                         '</div>'
	             };
	         })
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.title = 'Lorem Ipsum';
	           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	         }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input ng-model="title" aria-label="title"> <br/>
	         <textarea ng-model="text" aria-label="text"></textarea> <br/>
	         <pane title="{{title}}">{{text}}</pane>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	        it('should have transcluded', function() {
	          var titleElement = element(by.model('title'));
	          titleElement.clear();
	          titleElement.sendKeys('TITLE');
	          var textElement = element(by.model('text'));
	          textElement.clear();
	          textElement.sendKeys('TEXT');
	          expect(element(by.binding('title')).getText()).toEqual('TITLE');
	          expect(element(by.binding('text')).getText()).toEqual('TEXT');
	        });
	     </file>
	   </example>
	 *
	 */
	var ngTranscludeDirective = ngDirective({
	  restrict: 'EAC',
	  link: function($scope, $element, $attrs, controller, $transclude) {
	    if (!$transclude) {
	      throw minErr('ngTransclude')('orphan',
	       'Illegal use of ngTransclude directive in the template! ' +
	       'No parent directive that requires a transclusion found. ' +
	       'Element: {0}',
	       startingTag($element));
	    }

	    $transclude(function(clone) {
	      $element.empty();
	      $element.append(clone);
	    });
	  }
	});

	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>

	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type == 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;

	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];

	var noopNgModelController = { $setViewValue: noop, $render: noop };

	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {

	  var self = this,
	      optionsMap = new HashMap();

	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;

	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(document.createElement('option'));
	  self.renderUnknownOption = function(val) {
	    var unknownVal = '? ' + hashKey(val) + ' ?';
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    $element.val(unknownVal);
	  };

	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });

	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };


	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    self.removeUnknownOption();
	    return $element.val();
	  };


	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	      $element.val(value);
	      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        $element.val('');
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };


	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	  };

	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };

	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };
	}];

	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
	 *
	 * <div class="alert alert-warning">
	 * Note that the value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explictly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
	 * a new scope for each repeated instance.
	 * </div>
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1',
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="ngrepeat-select" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       repeatSelect: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {

	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    link: function(scope, element, attr, ctrls) {

	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;

	      var selectCtrl = ctrls[0];

	      selectCtrl.ngModelCtrl = ngModelCtrl;

	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };

	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });

	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {

	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected) {
	              array.push(option.value);
	            }
	          });
	          return array;
	        };

	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value));
	          });
	        };

	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });

	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };

	      }
	    }
	  };
	};


	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {

	  function chromeHack(optionElement) {
	    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
	    // Adding an <option selected="selected"> element to a <select required="required"> should
	    // automatically select the new element
	    if (optionElement[0].hasAttribute('selected')) {
	      optionElement[0].selected = true;
	    }
	  }

	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {

	      if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        var valueInterpolated = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        var interpolateFn = $interpolate(element.text(), true);
	        if (!interpolateFn) {
	          attr.$set('value', element.text());
	        }
	      }

	      return function(scope, element, attr) {

	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup

	        function addOption(optionValue) {
	          selectCtrl.addOption(optionValue, element);
	          selectCtrl.ngModelCtrl.$render();
	          chromeHack(element);
	        }

	        // Only update trigger option updates if this is an option within a `select`
	        // that also has `ngModel` attached
	        if (selectCtrl && selectCtrl.ngModelCtrl) {

	          if (valueInterpolated) {
	            // The value attribute is interpolated
	            var oldVal;
	            attr.$observe('value', function valueAttributeObserveAction(newVal) {
	              if (isDefined(oldVal)) {
	                selectCtrl.removeOption(oldVal);
	              }
	              oldVal = newVal;
	              addOption(newVal);
	            });
	          } else if (interpolateFn) {
	            // The text content is interpolated
	            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
	              attr.$set('value', newVal);
	              if (oldVal !== newVal) {
	                selectCtrl.removeOption(oldVal);
	              }
	              addOption(newVal);
	            });
	          } else {
	            // The value attribute is static
	            addOption(attr.value);
	          }

	          element.on('$destroy', function() {
	            selectCtrl.removeOption(attr.value);
	            selectCtrl.ngModelCtrl.$render();
	          });
	        }
	      };
	    }
	  };
	}];

	var styleDirective = valueFn({
	  restrict: 'E',
	  terminal: false
	});

	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element

	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };

	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};


	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }

	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }

	        regexp = regex || undefined;
	        ctrl.$validate();
	      });

	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};


	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};

	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;

	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};

	if (window.angular.bootstrap) {
	  //AngularJS is already loaded, so we can return here...
	  console.log('WARNING: Tried to load angular more than once.');
	  return;
	}

	//try to bind to jquery now so that one can write jqLite(document).ready()
	//but we will rebind on bootstrap again.
	bindJQuery();

	publishExternalAPI(angular);

	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}

	function getVF(n, opt_precision) {
	  var v = opt_precision;

	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }

	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}

	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);

	  jqLite(document).ready(function() {
	    angularInit(document, bootstrap);
	  });

	})(window, document);

	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	
	//base css for hypertag apps - optional
	__webpack_require__(6);
	//jquery required for hypertag apps
	__webpack_require__(10);
	//jshint is only used during development
	__webpack_require__(14);
	//stacktrace is only used during developement
	__webpack_require__(15);
	//this version of jquery templates fixes a memory leak
	__webpack_require__(16);
	//the main hypertag codebase, all in one file.
	__webpack_require__(17);

	//draw a set of useful default hypertags into the page
	document.write(__webpack_require__(18));

	//set up hypertag's focus mechanism to defaults.
	Hypertag.GUI.focus.setLayer(window).setWindow(window);

	//provide reference to the Hypertag namespace. While we are 
	//using global references today, this will change soon.
	module.exports = Hypertag;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(7);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(9)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./verbs.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./verbs.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(8)();
	// imports


	// module
	exports.push([module.id, "\n/* \n    css for hypertag runtime offering standard verbs to cut down on prototyping effort, \n    c. 2012-2014 JAMES ROBEY, jrobey.services@gmail.com. Its free for any use. \n    Look for the package runtime release to distribute your own open-source appications.\n*/\n\n\n/** thing that shows network status in the upper right hand corer */\n    .defaultbg{\n        /* background: #f9fdff; */\n        background: #F0F1F6;\n    }\n    \n    .lightdefaultbg{\n        /* background: #f9fdff; */\n        background: #FCFCFA;\n    }\n\n    .smoothsteel{\n        background-image:url('/common/Images/smoothsteel.jpg');\n        /* background-color:#eee; */\n    }\n\n    .html{\n        background-color:black;\n        cursor:default;\n        overflow:hidden;\n    }\n    \n    div, span, i, b{\n        cursor:default;\n    }\n    \n    .none{\n        \n    }\n    \n    pre {\n       white-space: pre-wrap;       /* css-3 */\n       white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */\n       white-space: -pre-wrap;      /* Opera 4-6 */\n       white-space: -o-pre-wrap;    /* Opera 7 */\n       word-wrap: break-word;       /* Internet Explorer 5.5+ */\n       \n       width: 99%;\n       overflow: hidden;\n       padding: 0;\n       margin: 0;\n    }\n\n/* rows and columns!! */\n\n    .block{display: block !important}\n    .cell{display: inline-block;}\n    .cell2{display: inline-block;width:48%;}\n    .cell3{display: inline-block;width:32%;}\n    .cell4{display: inline-block;width:24%;}\n    .cell5{display: inline-block;width:24%;}\n    \n    .table{display: table-cell;}\n    .tableblock{display: table;}\n    \n    .monaco{font-family: monaco;}\n    .courier{font-family: courier;}\n    .arial{font-family: arial;}\n    .eurostyle{font-family: eurostyle;}\n    .times{font-family: times;}\n    .verdana{font-family: verdana;}\n    \n    .opacity01{opacity:0.1 !important;}\n    .opacity02{opacity:0.2 !important;}\n    .opacity03{opacity:0.3 !important;}\n    .opacity04{opacity:0.4 !important;}\n    .opacity05{opacity:0.5 !important;}\n    .opacity06{opacity:0.6 !important;}\n    .opacity07{opacity:0.7 !important;}\n    .opacity08{opacity:0.8 !important;}\n    .opacity09{opacity:0.9 !important;}\n    .opacity1{opacity:1 !important;}\n    \n    .scale01{scale:0.1 !important;}\n    .scale02{scale:0.2 !important;}\n    .scale03{scale:0.3 !important;}\n    .scale04{scale:0.4 !important;}\n    .scale05{scale:0.5 !important;}\n    .scale06{scale:0.6 !important;}\n    .scale07{scale:0.7 !important;}\n    .scale08{scale:0.8 !important;}\n    .scale09{scale:0.9 !important;}\n    .scale1{scale:1 !important;}  \n    .scale11{scale:1.1 !important;}\n    .scale12{scale:1.2 !important;}\n    .scale13{scale:1.3 !important;}\n    .scale14{scale:1.4 !important;}\n    .scale15{scale:1.5 !important;}\n    .scale16{scale:1.6 !important;}\n    .scale17{scale:1.7 !important;}\n    .scale18{scale:1.8 !important;}\n    .scale19{scale:1.9 !important;}\n    .scale20{scale:2.0 !important;}\n    \n    .ztop{z-index:9999;}\n    .zbottom{z-index:-9999;}\n    \n    .width200{width:200%}\n    .width120{width:120%}\n    .width100{width:100%;}\n    .width97{width:97%}\n    .width99{width:99%}\n    .width90{width:89%}\n    .width80{width:79%}\n    .width75{width:74%}\n    .width70{width:69%}\n    .width65{width:65%}\n    .width60{width:60%}\n    .width50{width:49%}\n    .width49{width:45%}\n    .width40{width:39%}\n    .width33{width:32%}\n    .width30{width:29%}\n    .width25{width:24%}\n    .width20{width:19%}\n    .width16{width:16%}\n    .width1{width:1%}\n    \n    .height120{height:120%}\n    .height110{height:110%}\n    .height100{height:100%;}\n    .height97{height:97%}\n    .height99{height:99%}\n    .height90{height:90%}\n    .height80{height:80%}\n    .height75{height:74%}\n    .height70{height:70%}\n    .height60{height:60%}\n    .height50{height:49%}\n    .height49{height:45%}\n    .height33{height:32%}\n    .height25{height:24%}\n    .height19{height:19%}\n    .height10{height:10%}\n    .height1{height:1%}\n    \n    /* percentage positioning from top */\n    .top0{top:0px;}\n    .top5{top:4%;}\n    .top10{top:9%;}\n    .top15{top:14%;}\n    .top20{top:19%;}\n    .top25{top:24%;}\n    .top30{top:29%;}\n    .top35{top:34%;}\n    .top40{top:39%;}\n    .top45{top:44%;}\n    .top50{top:49%;}\n    .top55{top:54%;}\n    .top60{top:59%;}\n    .top65{top:64%;}\n    .top70{top:69%;}\n    .top75{top:74%;}\n    .top80{top:79%;}\n    .top85{top:84%;}\n    .top90{top:89%;}\n    .top95{top:94%;}\n    .top100{top:99%;}\n    /* divsion by thirds */\n    .top33{top:32%;}\n    /* division by eigths */\n    .top12{top:11%;}\n\n    /* percentage positioning from left */\n    .left0{left:0px;}\n    .left5{left:4%;}\n    .left10{left:9%;}\n    .left15{left:14%;}\n    .left20{left:19%;}\n    .left25{left:24%;}\n    .left30{left:29%;}\n    .left35{left:34%;}\n    .left40{left:39%;}\n    .left45{left:44%;}\n    .left50{left:49%;}\n    .left55{left:54%;}\n    .left60{left:59%;}\n    .left65{left:64%;}\n    .left70{left:69%;}\n    .left75{left:74%;}\n    .left80{left:79%;}\n    .left85{left:84%;}\n    .left90{left:89%;}\n    .left95{left:94%;}\n    .left100{left:99%;}\n    /* divsion by thirds */\n    .left33{left:32%;}\n    /* division by eights */\n    .left12{left:11%;}\n\n    /* percentage positioning from right */\n    .right0{right:0px;}\n    .right5{right:4%;}\n    .right10{right:9%;}\n    .right15{right:14%;}\n    .right20{right:19%;}\n    .right25{right:24%;}\n    .right30{right:29%;}\n    .right35{right:34%;}\n    .right40{right:39%;}\n    .right45{right:44%;}\n    .right50{right:49%;}\n    .right55{right:54%;}\n    .right60{right:59%;}\n    .right65{right:64%;}\n    .right70{right:69%;}\n    .right75{right:74%;}\n    .right80{right:79%;}\n    .right85{right:84%;}\n    .right90{right:89%;}\n    .right95{right:94%;}\n    .right100{right:99%;}\n    /* divsion by thirds */\n    .right33{right:32%;}\n    /* division by eights */\n    .right12{right:11%;}\n    \n    .spacer{margin:10px;padding:10px;}\n    \n    .middlecontent{\n        display: table-cell;\n        vertical-align: middle;\n    }\n    \n    .verticalpadded{\n        padding-top:5px;\n        padding-bottom:5px;\n    }\n    \n    .horizontalpadded{\n        padding-left:5px;\n        padding-right:5px;\n    }\n    \n    .floatright{float:right;}\n    .floatleft{float:left;}\n    \n    .hover_bw_invert:hover{\n        background-color:black;\n        color:white;\n    }\n    \n    .inset{border-style:inset !important;}\n    .outset{border-style:outset !important;}\n    .groove{border-style:groove !important;}\n    .border1px{border-width:1px !important;}\n    .border2px{border-width:2px !important;}\n    .border3px{border-width:3px !important;}\n    .border4px{border-width:4px !important;}\n    \n    .outline1px{outline-width:1px !important;}\n    .outline2px{outline-width:2px !important;}\n    .outline3px{outline-width:3px !important;}\n    .outline4px{outline-width:4px !important;}\n    \n    .faded{opacity: 0.2;}\n    .transparent{opacity:0.0;}\n    \n    .scrollable{\n        overflow:auto;\n    }\n    \n    .scrollabley{overflow-y:auto !important; overflow-x:hidden !important;}\n    .scrollablex{overflow-x:auto !important; overflow-y:hidden !important;}\n    \n    .notrounded{border-radius: 0px;}\n    .rounded{border-radius: 7px;}\n    .bigrounded{border-radius: 15px;}\n    .biggerrounded{border-radius: 35px;}\n    .sharprounded{border-radius: 4px;}\n    .toprounded{border-radius: 5px 5px 0px 0px;}\n    .bigbottomrounded{border-radius: 0px 0px 20px 20px;}\n    .bottomrounded{border-radius: 0px 0px 5px 5px;}\n    .bigtoprounded{border-radius: 15px 15px 0px 0px;}\n    .bigleftrounded{border-radius: 15px 0px 0px 20px;}\n    .leftrounded{border-radius: 7px 0px 0px 7px;}\n    .bigrightrounded{border-radius: 0px 15px 15px 0px;}\n    .rightrounded{border-radius: 0px 7px 7px 0px;}\n    .swishrounded{border-radius: 0px 7px 0px 7px;}\n    \n    .brrounded{border-radius: 0px 0px 7px 0px;}\n    .trrounded{border-radius: 0px 7px 0px 0px;}\n    .tlrounded{border-radius: 7px 0px 0px 0px;}\n    .blrounded{border-radius: 0px 0px 0px 7px;}\n    \n    .smallbrrounded{border-radius: 0px 0px 4px 0px;}\n    .smalltrrounded{border-radius: 0px 4px 0px 0px;}\n    .smalltlrounded{border-radius: 4px 0px 0px 0px;}\n    .smallblrounded{border-radius: 0px 0px 0px 4px;}\n    \n    .bigbrrounded{border-radius: 0px 0px 20px 0px;}\n    .bigtrrounded{border-radius: 0px 20px 0px 0px;}\n    .bigtlrounded{border-radius: 20px 0px 0px 0px;}\n    .bigblrounded{border-radius: 0px 0px 0px 20px;}\n    \n    .margins{margin:auto;}\n    .vertmargin{margin:auto 0px auto 0px;}\n    .horizmargin{margin: 0px auto 0px auto;}\n    \n    .center{text-align: center;}\n    .centered{text-align: center;width:99%;}\n    \n    .left{text-align: left;}\n    .right{text-align: right;}\n    \n    .justify{text-align:justify;}\n    \n    .middle{vertical-align: middle;}\n    .top{vertical-align: top;}\n    .bottom{vertical-align: bottom;}\n    \n    .smaller{font-size:0.9em;}\n    .evensmaller{font-size:0.8em;}\n    .bigger{font-size:1.2em;}\n    .evenbigger{font-size:1.4em;}\n    \n    .bold{font-weight:bold;}\n    .unbold{font-weight:normal;}\n    .italic{font-style:italic;}\n    \n    .padded{padding: 10px;}\n    \n    .invisible{visibility: hidden;}\n    .visible{visibility:visible;}\n    .hidden{display: none;}\n    \n    .align_bottom{vertical-align: bottom;}\n    .relative{position:relative;}\n    .rel{position:relative;}\n    .absolute{position:absolute;top:0px;}\n    .abs{position:absolute;top:0px;}\n    .fixed{position:fixed;}\n    .inherit{position:inherit;}\n    \n    .fullsized{width:100%;height:100%;}\n    \n    .white{background-color:white;}\n    .importantblack{background-color:black !important;}\n    .black{background-color:black;}\n    .grey{background-color:#aaaaaa;}\n    .ltgrey{background-color:#f3f3f3;}\n    .red{background-color:red;}\n    .green{background-color:green;}\n    .blue{background-color:blue;}\n    .yellow{background-color:yellow;}\n    .orange{background-color:orange;}\n    .purple{background-color:purple;}\n    \n    .fgwhite {color:white;}\n    .fgblack {color:black;}\n    .fggrey  {color:#aaaaaa;}\n    .fgred   {color:red;}\n    .fggreen {color:green;}\n    .fgblue  {color:blue;}\n    .fgltblue{color:#ddddee;}\n    .fgyellow{color:yellow;}\n    .fgorange{color:orange;}\n    .fgpurple{color:purple;}\n    \n    .borderwhite  {border-color:white !important;}\n    .borderblack  {border-color:black !important;}\n    .bordergrey   {border-color:#dddddd !important;}\n    .borderred    {border-color:red !important;}\n    .bordergreen  {border-color:green !important;}\n    .borderblue   {border-color:blue !important;}\n    .borderyellow {border-color:yellow !important;}\n    .borderorange {border-color:orange !important;}\n    .borderpurple {border-color:purple !important;}\n    .borderdarkgrey {border-color:darkgrey !important;}\n    .bordersilver {border-color:silver !important;}\n    .borderdarkorange {border-color:darkorange !important;}\n    \n    .outlinewhite  {outline-color:white !important;}\n    .outlineblack  {outline-color:black !important;}\n    .outlinegrey   {outline-color:#dddddd !important;}\n    .outlinered    {outline-color:red !important;}\n    .outlinegreen  {outline-color:green !important;}\n    .outlineblue   {outline-color:blue !important;}\n    .outlineyellow {outline-color:yellow !important;}\n    .outlineorange {outline-color:orange !important;}\n    .outlinepurple {outline-color:purple !important;}\n    .outlinedarkgrey {outline-color:darkgrey !important;}\n    .outlinesilver {outline-color:silver !important;}\n    .outlinedarkorange {outline-color:darkorange !important;}\n    \n    .outlinetop     {outline-left:0px !important; outline-right:0px !important; outline-top:1px !important; outline-bottom:0px !important;}\n    .outlinebottom  {outline-left:0px !important; outline-right:0px !important; outline-top:0px !important; outline-bottom:1px !important;}\n    .outlineleft    {outline-left:1px !important; outline-right:0px !important; outline-left:1px !important; outline-bottom:0px !important;}\n    .outlineright   {outline-left:0px !important; outline-right:1px !important; outline-top:0px !important; outline-bottom:0px !important;}\n    \n    .leftfloat{float:left;}\n    \n    .topbottombordered{\n        border-top:1px;\n        border-bottom:1px;\n        border-left:0px;\n        border-right:0px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .sidebordered{\n        border-top:0px;\n        border-bottom:0px;\n        border-left:1px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .bottomleftbordered{\n        border-top:0px;\n        border-bottom:1px;\n        border-left:1px;\n        border-right:0px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .bottomrightbordered{\n        border-top:0px;\n        border-bottom:1px;\n        border-left:0px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .toprightbordered{\n        border-top:1px;\n        border-bottom:0px;\n        border-left:0px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .notbottombordered{\n        border-top:1px;\n        border-bottom:0px;\n        border-left:1px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .nottopbordered{\n        border-top:0px;\n        border-bottom:1px;\n        border-left:1px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .notleftbordered{\n        border-top:1px;\n        border-bottom:1px;\n        border-left:0px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .notrightbordered{\n        border-top:1px;\n        border-bottom:1px;\n        border-left:1px;\n        border-right:0px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    \n    .topbordered{\n        border-top:1px;\n        border-bottom:0px;\n        border-left:0px;\n        border-right:0px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .leftbordered{\n        border-top:0px;\n        border-bottom:0px;\n        border-left:1px;\n        border-right:0px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .rightbordered{\n        border-top:0px;\n        border-bottom:0px;\n        border-left:0px;\n        border-right:1px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .bottombordered{\n        border-top:0px;\n        border-bottom:1px;\n        border-left:0px;\n        border-right:0px;\n        border-style: solid;\n        border-color:#dddddd;\n    }\n    \n    .bordered{\n        border-width:1px;\n        border-color:#dddddd;\n        border-style: solid;\n    }\n    \n    .outlined{\n        outline-width:2px;\n        outline-style:dashed;\n        outline-color:white;\n    }\n    \n    .notbordered{\n        border-width:0px;\n    }\n\n    .padded{padding:10px;}\n    .bigpadded{padding:30px;}\n    .smallpadded{padding:5px;}\n    .verybigpadded{padding:50px;}\n    .verysmallpadded{padding:3px;}\n\n    .leftpadded{padding-left:10px;}\n    .rightpadded{padding-right:10px;}\n    .bottompadded{padding-bottom:10px;}\n    .toppadded{padding-top:10px;}\n\n    .bigleftpadded{padding-left:30px;}\n    .bigrightpadded{padding-right:30px;}\n    .bigbottompadded{padding-bottom:30px;}\n    .bigtoppadded{padding-top:30px;}\n    \n    .smallleftpadded{padding-left:5px;}\n    .smallrightpadded{padding-right:5px;}\n    .smallbottompadded{padding-bottom:5px;}\n    .smalltoppadded{padding-top:5px;}\n\n    .verybigleftpadded{padding-left:50px;}\n    .verybigrightpadded{padding-right:50px;}\n    .verybigbottompadded{padding-bottom:50px;}\n    .verybigtoppadded{padding-top:50px;}\n\n    .verysmallleftpadded{padding-left:3px;}\n    .verysmallrightpadded{padding-right:3px;}\n    .verysmallbottompadded{padding-bottom:3px;}\n    .verysmalltoppadded{padding-top:3px;}\n\n    .spacer{margin:10px;}\n    .bigspacer{margin:30px;}\n    .smallspacer{margin:5px;}\n    .verybigspacer{margin:50px;}\n    .verysmallspacer{margin:3px;}\n\n    .topspacer{margin-top:10px;}\n    .bottomspacer{margin-bottom:10px;}\n    .rightspacer{margin-right:10px;}\n    .leftspacer{margin-left:10px;}\n\n    .bigtopspacer{margin-top:30px;}\n    .bigbottomspacer{margin-bottom:30px;}\n    .bigrightspacer{margin-right:30px;}\n    .bigleftspacer{margin-left:30px;}\n    \n    .smallrightspacer{margin-right:5px;}\n    .smallleftspacer{margin-left:5px;}\n    .smalltopspacer{margin-top:5px;}\n    .smallbottomspacer{margin-bottom:5px;}\n\n    .verybigrightspacer{margin-right:50px;}\n    .verybigleftspacer{margin-left:50px;}\n    .verybigtopspacer{margin-top:50px;}\n    .verybigbottomspacer{margin-bottom:50px;}\n\n    .verysmallrightspacer{margin-right:3px;}\n    .verysmallleftspacer{margin-left:3px;}\n    .verysmalltopspacer{margin-top:3px;}\n    .verysmallbottomspacer{margin-bottom:3px;}\n\n    .textselectable{\n        -webkit-touch-callout: text !important;\n        -webkit-user-select: text !important;\n        -khtml-user-select: text !important;\n        -moz-user-select: text !important;\n        -ms-user-select: text !important;\n        user-select: text !important;\n        -o-user-select: text !important;\n    }\n\n    .notselectable{\n        -webkit-touch-callout: none !important;\n        -webkit-user-select: none !important;\n        -khtml-user-select: none !important;\n        -moz-user-select: none !important;\n        -ms-user-select: none !important;\n        user-select: none !important;\n        -o-user-select: none !important;\n    }\n\n    .isselectable{\n        -webkit-touch-callout: text !important;\n        -webkit-user-select: text !important;\n        -khtml-user-select: text !important;\n        -moz-user-select: text !important;\n        -ms-user-select: text !important;\n        user-select: text !important;\n        -o-user-select: text !important;\n    }\n    \n    .clickable{\n        -webkit-touch-callout: none  !important;\n        -webkit-user-select: none !important;\n        -khtml-user-select: none !important;\n        -moz-user-select: none !important;\n        -ms-user-select: none !important;\n        user-select: none !important;\n        -o-user-select: none !important;\n    }\n\n    .aboveall{\n        z-index:99999;\n    }\n\n    .nooverflow{\n       overflow:hidden;\n    }\n    \n    .ellipsis{\n        text-overflow:ellipsis;\n    }\n\n    .underline{\n        text-decoration:underline;\n    }\n\n    .lightshadowed{\n        -moz-box-shadow:    0px 1px 10px #ccc;\n        -webkit-box-shadow: 0px 1px 10px #ccc;\n        box-shadow:         0px 1px 10px #ccc; \n    }\n    \n    .lightershadowed{\n        -moz-box-shadow:    0px 1px 16px #ccc;\n        -webkit-box-shadow: 0px 1px 16px #ccc;\n        box-shadow:         0px 1px 16px #ccc; \n    }\n\n    /* this make the \"focusring\" around GUI focused elements */\n    .focused{\n        outline-color:green;\n        outline-style:dotted;\n        outline-width:1px;\n    }\n\n    .overlay{\n        position: fixed;\n        top:0px;\n        left:0px;\n        width:100%;\n        height:100%;\n    }\n\n    .offscreen{left:-20000px;}\n\n    .fadeout{\n        background: -moz-linear-gradient(top, rgba(255,255,255,1), rgba(255,255,255,0.2), rgba(0,0,0,0));\n        background: -webkit-linear-gradient(top, rgba(255,255,255,1), rgba(255,255,255,0.2), rgba(0,0,0, 0));\n    }\n\n    .whitetextshadow{\n        text-shadow: 1px 1px #FFF;\n    }\n\n    .greytextshadow{\n        text-shadow: 1px 1px #bbb;\n    }\n    \n    .lightgreytextshadow{\n        text-shadow: 1px 1px #ddd;\n    }\n\n    .textshadow{\n        text-shadow: 1px 1px #000;\n    }\n\n    .notextshadow{\n        text-shadow: 0px 0px #000;\n    }\n\n    .bottomrightshadowed{\n        box-shadow: 2px 2px 7px #aaa;\n    }\n\n    .smallshadowed{\n        box-shadow: 0 0 3px #222;\n        -webkit-box-shadow: 0 0 3px #222;\n        -moz-box-shadow: 0 0 3px #222;\n    }\n\n    .rightshadowed{\n        box-shadow:         2px 2px 4px #ccc;\n        -webkit-box-shadow: 2px 2px 4px #ccc;\n        -moz-box-shadow:    2px 2px 4px #ccc;\n    }\n\n    .lightrightshadowed{\n        box-shadow:         2px 2px 4px #ccc;\n        -webkit-box-shadow: 2px 2px 4px #ccc;\n        -moz-box-shadow:    2px 2px 4px #ccc;\n    }\n    \n\n    .shadowed{\n        -moz-box-shadow:    2px 2px 6px #ddd;\n        -webkit-box-shadow: 2px 2px 6px #ddd;\n        box-shadow:         2px 2px 6px #ddd;\n    }\n\n    .downshadowed{\n        box-shadow:         0px 3px 6px #ccc;\n        -webkit-box-shadow: 0px 3px 6px #ccc;\n        -moz-box-shadow:    0px 3px 6px #ccc;\n    }\n    \n    .topshadowed{\n        box-shadow:         -1px -1px 2px #aaa;\n        -webkit-box-shadow: -1px -1px 2px #aaa;\n        -moz-box-shadow:    -1px -1px 2px #aaa;\n    }\n    \n    .bigdownshadowed{\n        box-shadow:         0px 5px 6px #ccc;\n        -webkit-box-shadow: 0px 5px 6px #ccc;\n        -moz-box-shadow:    0px 5px 6px #ccc;\n    }\n\n    .embossed {\n        -moz-box-shadow:    inset -3px -3px 3px #888;\n        -webkit-box-shadow: inset -3px -3px 3px #888;\n        box-shadow:         inset -3px -3px 3px #888;\n    }\n\n    .bigshadowed{\n        box-shadow:         0 0 20px #ccc;\n        -webkit-box-shadow: 0 0 20px #ccc;\n        -moz-box-shadow:    0 0 20px #ccc;\n    }\n\n    .blur0px{-webkit-filter: blur(0px);}\n    .blur05px{-webkit-filter: blur(0.5px);}\n    .blur1px{-webkit-filter: blur(1px);}\n    .blur2px{-webkit-filter: blur(2px);}\n    .blur3px{-webkit-filter: blur(3px);}\n    .blur4px{-webkit-filter: blur(4px);}\n    .blur5px{-webkit-filter: blur(5px);}\n    .blur6px{-webkit-filter: blur(6px);}\n    .blur7px{-webkit-filter: blur(7px);}\n    .blur10px{-webkit-filter: blur(10px);}\n    .blur13px{-webkit-filter: blur(13px);}\n    .blur15px{-webkit-filter: blur(15px);}\n    \n/* a really cool css'd button - class \"fancy\" */\n    input.fancy {\n    \t-moz-box-shadow:inset 0px 1px 0px 0px #ffffff;\n    \t-webkit-box-shadow:inset 0px 1px 0px 0px #ffffff;\n    \tbox-shadow:inset 0px 1px 0px 0px #ffffff;\n    \tbackground:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ededed), color-stop(1, #dfdfdf) );\n    \tbackground:-moz-linear-gradient( center top, #ededed 5%, #dfdfdf 100% );\n    \tfilter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ededed', endColorstr='#dfdfdf');\n    \tbackground-color:#ededed;\n    \t-moz-border-radius:6px;\n    \t-webkit-border-radius:6px;\n    \tborder-radius:6px;\n    \tborder:1px solid #dcdcdc;\n    \tdisplay:inline-block;\n    \tcolor:#777777;\n    \tfont-family:arial;\n    \tfont-size:15px;\n    \tfont-weight:bold;\n    \tpadding:1px 24px;\n    \ttext-decoration:none;\n    \ttext-shadow:1px 1px 0px #ffffff;\n    }input.fancy:hover {\n    \tbackground:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #dfdfdf), color-stop(1, #ededed) );\n    \tbackground:-moz-linear-gradient( center top, #dfdfdf 5%, #ededed 100% );\n    \tfilter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#dfdfdf', endColorstr='#ededed');\n    \tbackground-color:#dfdfdf;\n    }input.fancy:active {\n    \tposition:relative;\n    \ttop:1px;\n    }\n    \n/* two */\n\n    .input.fancy2 {\n    \t-moz-box-shadow:inset 0px 1px 0px 0px #ffffff;\n    \t-webkit-box-shadow:inset 0px 1px 0px 0px #ffffff;\n    \tbox-shadow:inset 0px 1px 0px 0px #ffffff;\n    \tbackground:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ededed), color-stop(1, #dfdfdf) );\n    \tbackground:-moz-linear-gradient( center top, #ededed 5%, #dfdfdf 100% );\n    \tfilter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ededed', endColorstr='#dfdfdf');\n    \tbackground-color:#ededed;\n    \t-moz-border-radius:6px;\n    \t-webkit-border-radius:6px;\n    \tborder-radius:6px;\n    \tborder:1px solid #dcdcdc;\n    \tdisplay:inline-block;\n    \tcolor:#777777;\n    \tfont-family:arial;\n    \tfont-size:15px;\n    \tfont-weight:bold;\n    \tpadding:6px 24px;\n    \ttext-decoration:none;\n    \ttext-shadow:1px 1px 0px #ffffff;\n    }.input.fancy2:hover {\n    \tbackground:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #dfdfdf), color-stop(1, #ededed) );\n    \tbackground:-moz-linear-gradient( center top, #dfdfdf 5%, #ededed 100% );\n    \tfilter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#dfdfdf', endColorstr='#ededed');\n    \tbackground-color:#dfdfdf;\n    }.input.fancy2:active {\n    \tposition:relative;\n    \ttop:1px;\n    }\n    \n    .rotate90{\n        -webkit-transform: rotate(-90deg); \n        -moz-transform: rotate(-90deg);\n    }\n    \n    .rotate270{\n        -webkit-transform: rotate(-270deg); \n        -moz-transform: rotate(-270deg);\n    }\n    \n\n/* bullet styles for lists */\n.listplain .plainlist{list-style-type:none;}                    /* no stying on list */\n.listcircle .circlelist{list-style-type:circle;}                /* hollow circle */\n.listdisc .disclist{list-style-type:disc;}                      /* filled circle */\n.listsquare .squarelist {list-style-type:square;}               /* filled square */\n.listdecimal .decimalist {list-style-type:decimal;}             /* decimal numbers */\n.listlowerroman .loweromanlist{list-style-type:lower-roman;}    /* lowercase roman numerals*/\n.listroman .romanlist {list-style-type:upper-roman;}\t\t\t/* uppercase roman numerals*/\n.listalpha .alphalist {list-style-type:lower-alpha;}            /* lowercase ASCII letters */\n.listlatin .latinlist {list-style-type:lower-latin;}            /* lowercase ASCII letters unsupported by ie7 */\n.listalpha .alphalist {list-style-type:upper-alpha;}            /* uppercase ASCII letters */\n.listlatin .latinlist {list-style-type:upper-latin;}            /* uppercase ASCII letters unsupported by ie7*/\n.listgreek .greeklist {list-style-type:lower-greek;}            /* classical greek*/\n.listarmenian .armenianlist {list-style-type:armenian;}\t\t\t/* traditional armenian */\n.listgeorgian .georgianlist {list-style-type:georgian;}\t\t\t/* traditional georgian */\n\n/* css position */\n.static     {position:static;}\n.realative  {position:relative;}\n.absolute   {position:absolute;}\n.fixed      {position:fixed;}                     \n.inherit    {position:inherit;}                                 \n                                                                                                                                                                                                                                   \n/* % width  */\n.width120   {width:120%;}                             \n.width105   {width:105%;}\n.width102   {width:102%;}                                    \n.width100   {width:100%;}                                    \n.width97    {width:97%;}\n.width99    {width:99%;}\n.width95    {width:95%;}\n.width90    {width:89%;}\n.width85    {width:85%;}\n.width80    {width:79%;}\n.width75    {width:74%;}\n.width70    {width:69%;}\n.width65    {width:65%;}\n.width60    {width:59%;}\n.width55    {width:55%;}\n.width50    {width:49%;}\n.width49    {width:49%;}\n.width45    {width:45%;}\n.width40    {width:39%;}\n.width35    {width:35%;}\n.width33    {width:32%;}\n.width30    {width:29%;}\n.width25    {width:24%;}\n.width20    {width:19%;}\n.width15    {width:15%;}\n.width16    {width:16%;}\n.width10    {width:10%;}\n.width5     {width:5%;}\n.width1     {width:1%;} \n                        \n/* % height  */                   \n.height120  {height:120%;}                                   \n.height100  {height:100%;}                                   \n.height97   {height:97%;}                                    \n.height99   {height:99%;}                                    \n.height90   {height:90%;}                                    \n.height80   {height:80%;}                                    \n.height75   {height:74%;}                                    \n.height70   {height:70%;}                                    \n.height60   {height:60%;} \n.height55   {height:55%;}                                    \n.height50   {height:49%;}                                    \n.height49   {height:49%;}                                    \n.height45   {height:45%;} \n.height35   {height:35%;} \n.height33   {height:32%;}                                    \n.height25   {height:24%;}\n.height19   {height:19%;}   \n.height20    {height:20%;}\n.height15    {height:15%;}\n.height16    {height:16%;}\n.height10    {height:10%;}\n.height5     {height:5%;}\n.height1     {height:1%;}                                                                  \n                                                                                                                                                                                                                                                                                                                            \n/* % positioning from top */\n.top0    {top:0%;}                                               \n.top5    {top:4%;}                                               \n.top10   {top:9%;}                                               \n.top15   {top:14%;}                                              \n.top20   {top:19%;}                                              \n.top25   {top:24%;}                                              \n.top30   {top:29%;}                                              \n.top35   {top:34%;}                                              \n.top40   {top:39%;}                                              \n.top45   {top:44%;}                                              \n.top50   {top:49%;}                                              \n.top55   {top:54%;}                                              \n.top60   {top:59%;}                                              \n.top65   {top:64%;}                                              \n.top70   {top:69%;}                                              \n.top75   {top:74%;}                                              \n.top80   {top:79%;}                                              \n.top85   {top:84%;}                                              \n.top90   {top:89%;}                                              \n.top95   {top:94%;}                                              \n.top100  {top:99%;}                                              \n/* divsion by thirds          \n.top33%   {top:32%;}                                              \n/* division by eigths         \n.top12%   {top:11%;}                                              \n                                                                  \n/* % positioning from left */\n.left0    {left:0%;}                                             \n.left5    {left:4%;}                                             \n.left10   {left:9%;}                                             \n.left15   {left:14%;}                                            \n.left20   {left:19%;}                                            \n.left25   {left:24%;}                                            \n.left30   {left:29%;}                                            \n.left35   {left:34%;}                                            \n.left40   {left:39%;}                                            \n.left45   {left:44%;}                                            \n.left50   {left:49%;}                                            \n.left55   {left:54%;}                                            \n.left60   {left:59%;}                                            \n.left65   {left:64%;}                                            \n.left70   {left:69%;}                                            \n.left75   {left:74%;}                                            \n.left80   {left:79%;}                                            \n.left85   {left:84%;}                                            \n.left90   {left:89%;}                                            \n.left95   {left:94%;}                                            \n.left100  {left:99%;}                                            \n/* divsion by thirds */          \n.left33   {left:32%;}                                            \n/* division by eights  */       \n.left12   {left:11%;}                                            \n                                                                  \n/* % positioning from right   */\n.right0     {right:4%;}                                          \n.right10    {right:9%;}                                          \n.right15    {right:14%;}                                         \n.right20    {right:19%;}                                         \n.right25    {right:24%;}                                         \n.right30    {right:29%;}                                         \n.right35    {right:34%;}                                         \n.right40    {right:39%;}                                         \n.right45    {right:44%;}                                         \n.right50    {right:49%;}                                         \n.right55    {right:54%;}                                         \n.right60    {right:59%;}                                         \n.right65    {right:64%;}                                         \n.right70    {right:69%;}                                         \n.right75    {right:74%;}                                         \n.right80    {right:79%;}                                         \n.right85    {right:84%;}                                         \n.right90    {right:89%;}                                         \n.right95    {right:94%;}                                         \n.right100   {right:99%;}                                         \n/* divsion by thirds       */   \n.right33    {right:32%;}                                         \n/* division by eights        */ \n.right12    {right:11%;}     \n\n/* background colors                                  foreground colors                 */\n/* pink colors                                        pink foreground colors            */\n.indianred            {background-color:#cd5c5c;}    .fgindianred          {color:#cd5c5c;}   \n.lightcoral           {background-color:#f08080;}    .fglightcoral         {color:#f08080;}   \n.salmon               {background-color:#fa8072;}    .fgsalmon             {color:#fa8072;}   \n.darksalmon           {background-color:#e9967a;}    .fgdarksalmon         {color:#e9967a;}   \n.lightsalmon          {background-color:#ffa07a;}    .fglightsalmon        {color:#ffa07a;}   \n.red                  {background-color:#ff0000;}    .fgred                {color:#ff0000;}   \n.crimson              {background-color:#dc143c;}    .fgcrimson            {color:#dc143c;}   \n.firebrick            {background-color:#b22222;}    .fgfirebrick          {color:#b22222;}   \n.darkred              {background-color:#8b0000;}    .fgdarkred            {color:#8b0000;}   \n/* orange colors                                     orange foreground colors            */\n.pink                 {background-color:#ffc0cb;}    .fgpink               {color:#ffc0cb;}   \n.lightpink            {background-color:#ffb6c1;}    .fglightpink          {color:#ffb6c1;}   \n.hotpink              {background-color:#ff69b4;}    .fghotpink            {color:#ff69b4;}   \n.deeppink             {background-color:#ff1493;}    .fgdeeppink           {color:#ff1493;}   \n.mediumvioletred      {background-color:#c71585;}    .fgmediumvioletred    {color:#c71585;}   \n.paleyellow           {background-color:#fff1dd;}    .fgpaleyellow         {color:#fff1dd;}   \n.palevioletred        {background-color:#db7093;}    .fgpalevioletred      {color:#db7093;}   \n/* orangecolors                                      fgorangecolors                      */\n.lightsalmon          {background-color:#ffa07a;}    .fglightsalmon        {color:#ffa07a;}   \n.coral                {background-color:#ff7f50;}    .fgcoral              {color:#ff7f50;}   \n.tomato               {background-color:#ff6347;}    .fgtomato             {color:#ff6347;}   \n.orangered            {background-color:#ff4500;}    .fgorangered          {color:#ff4500;}   \n.darkorange           {background-color:#ff8c00;}    .fgdarkorange         {color:#ff8c00;}   \n.orange               {background-color:#ffa500;}    .fgorange             {color:#ffa500;}   \n/* yellow colors                                      yellow foreground colors           */\n.gold                 {background-color:#ffd700;}    .fggold               {color:#ffd700;}\n.yellow               {background-color:#ffff00;}    .fgyellow             {color:#ffff00;}\n.lightyellow          {background-color:#ffffe0;}    .fglightyellow        {color:#ffffe0;}\n.lemonchiffon         {background-color:#fffacd;}    .fglemonchiffon       {color:#fffacd;}\n.lightgoldenrodyellow {background-color:#fafad2;}    .fglightgoldenrodyello{color:#fafad2;}\n.papayawhip           {background-color:#ffefd5;}    .fgpapayawhip         {color:#ffefd5;}\n.moccasin             {background-color:#ffe4b5;}    .fgmoccasin           {color:#ffe4b5;}\n.peachpuff            {background-color:#ffdab9;}    .fgpeachpuff          {color:#ffdab9;}\n.palegoldenrod        {background-color:#eee8aa;}    .fgpalegoldenrod      {color:#eee8aa;}\n.khaki                {background-color:#f0e68c;}    .fgkhaki              {color:#f0e68c;}\n.darkkhaki            {background-color:#bdb76b;}    .fgdarkkhaki          {color:#bdb76b;}\n/* purplecolors                                      fgpurplecolors                      */                      \n.lavender             {background-color:#e6e6fa;}    .fglavender           {color:#e6e6fa;}\n.thistle              {background-color:#d8bfd8;}    .fgthistle            {color:#d8bfd8;}\n.plum                 {background-color:#dda0dd;}    .fgplum               {color:#dda0dd;}\n.violet               {background-color:#ee82ee;}    .fgviolet             {color:#ee82ee;}\n.orchid               {background-color:#da70d6;}    .fgorchid             {color:#da70d6;}\n.fuchsia              {background-color:#ff00ff;}    .fgfuchsia            {color:#ff00ff;}\n.magenta              {background-color:#ff00ff;}    .fgmagenta            {color:#ff00ff;}\n.mediumorchid         {background-color:#ba55d3;}    .fgmediumorchid       {color:#ba55d3;}\n.mediumpurple         {background-color:#9370db;}    .fgmediumpurple       {color:#9370db;}\n.blueviolet           {background-color:#8a2be2;}    .fgblueviolet         {color:#8a2be2;}\n.darkviolet           {background-color:#9400d3;}    .fgdarkviolet         {color:#9400d3;}\n.darkorchid           {background-color:#9932cc;}    .fgdarkorchid         {color:#9932cc;}\n.darkmagenta          {background-color:#8b008b;}    .fgdarkmagenta        {color:#8b008b;}\n.purple               {background-color:#800080;}    .fgpurple             {color:#800080;}\n.indigo               {background-color:#4b0082;}    .fgindigo             {color:#4b0082;}\n.darkslateblue        {background-color:#483d8b;}    .fgdarkslateblue      {color:#483d8b;}\n.slateblue            {background-color:#6a5acd;}    .fgslateblue          {color:#6a5acd;}\n.mediumslateblue      {background-color:#7b68ee;}    .fgmediumslateblue    {color:#7b68ee;}\n/* green colors                                       green foreground colors            */\n.greenyellow          {background-color:#adff2f;}    .fggreenyellow        {color:#adff2f;}\n.chartreuse           {background-color:#7fff00;}    .fgchartreuse         {color:#7fff00;}\n.lawngreen            {background-color:#7cfc00;}    .fglawngreen          {color:#7cfc00;}\n.lime                 {background-color:#00ff00;}    .fglime               {color:#00ff00;}\n.limegreen            {background-color:#32cd32;}    .fglimegreen          {color:#32cd32;}\n.palegreen            {background-color:#98fb98;}    .fgpalegreen          {color:#98fb98;}\n.lightgreen           {background-color:#90ee90;}    .fglightgreen         {color:#90ee90;}\n.mediumspringgreen    {background-color:#00fa9a;}    .fgmediumspringgreen  {color:#00fa9a;}\n.springgreen          {background-color:#00ff7f;}    .fgspringgreen        {color:#00ff7f;}\n.mediumseagreen       {background-color:#3cb371;}    .fgmediumseagreen     {color:#3cb371;}\n.seagreen             {background-color:#2e8b57;}    .fgseagreen           {color:#2e8b57;}\n.forestgreen          {background-color:#228b22;}    .fgforestgreen        {color:#228b22;}\n.green                {background-color:#008000;}    .fggreen              {color:#008000;}\n.darkgreen            {background-color:#006400;}    .fgdarkgreen          {color:#006400;}\n.yellowgreen          {background-color:#9acd32;}    .fgyellowgreen        {color:#9acd32;}\n.olivedrab            {background-color:#6b8e23;}    .fgolivedrab          {color:#6b8e23;}\n.olive                {background-color:#808000;}    .fgolive              {color:#808000;}\n.darkolivegreen       {background-color:#556b2f;}    .fgdarkolivegreen     {color:#556b2f;}\n.mediumaquamarine     {background-color:#66cdaa;}    .fgmediumaquamarine   {color:#66cdaa;}\n.darkseagreen         {background-color:#8fbc8f;}    .fgdarkseagreen       {color:#8fbc8f;}\n.lightseagreen        {background-color:#20b2aa;}    .fglightseagreen      {color:#20b2aa;}\n.darkcyan             {background-color:#008b8b;}    .fgdarkcyan           {color:#008b8b;}\n.teal                 {background-color:#008080;}    .fgteal               {color:#008080;}\n/* blue/cyan colors                                   blue/cyan foreground colors        */\n.aqua                 {background-color:#00ffff;}    .fgaqua               {color:#00ffff;}\n.cyan                 {background-color:#00ffff;}    .fgcyan               {color:#00ffff;}\n.lightcyan            {background-color:#e0ffff;}    .fglightcyan          {color:#e0ffff;}\n.paleturquoise        {background-color:#afeeee;}    .fgpaleturquoise      {color:#afeeee;}\n.aquamarine           {background-color:#7fffd4;}    .fgaquamarine         {color:#7fffd4;}\n.turquoise            {background-color:#40e0d0;}    .fgturquoise          {color:#40e0d0;}\n.mediumturquoise      {background-color:#48d1cc;}    .fgmediumturquoise    {color:#48d1cc;}\n.darkturquoise        {background-color:#00ced1;}    .fgdarkturquoise      {color:#00ced1;}\n.cadetblue            {background-color:#5f9ea0;}    .fgcadetblue          {color:#5f9ea0;}\n.steelblue            {background-color:#4682b4;}    .fgsteelblue          {color:#4682b4;}\n.lightsteelblue       {background-color:#b0c4de;}    .fglightsteelblue     {color:#b0c4de;}\n.powderblue           {background-color:#b0e0e6;}    .fgpowderblue         {color:#b0e0e6;}\n.lightblue            {background-color:#add8e6;}    .fglightblue          {color:#add8e6;}\n.skyblue              {background-color:#87ceeb;}    .fgskyblue            {color:#87ceeb;}\n.lightskyblue         {background-color:#87cefa;}    .fglightskyblue       {color:#87cefa;}\n.deepskyblue          {background-color:#00bfff;}    .fgdeepskyblue        {color:#00bfff;}\n.dodgerblue           {background-color:#1e90ff;}    .fgdodgerblue         {color:#1e90ff;}\n.cornflowerblue       {background-color:#6495ed;}    .fgcornflowerblue     {color:#6495ed;}\n.royalblue            {background-color:#4169e1;}    .fgroyalblue          {color:#4169e1;}\n.blue                 {background-color:#0000ff;}    .fgblue               {color:#0000ff;}\n.mediumblue           {background-color:#0000cd;}    .fgmediumblue         {color:#0000cd;}\n.darkblue             {background-color:#00008b;}    .fgdarkblue           {color:#00008b;}\n.navy                 {background-color:#000080;}    .fgnavy               {color:#000080;}\n.midnightblue         {background-color:#191970;}    .fgmidnightblue       {color:#191970;}\n                                                     \n/* white colors                                      white foreground colors            */ \n.white                {background-color:#ffffff;}   .fgwhite              {color:#ffffff;}    \n.snow                 {background-color:#fffafa;}   .fgsnow               {color:#fffafa;}    \n.honeydew             {background-color:#f0fff0;}   .fghoneydew           {color:#f0fff0;}    \n.mintcream            {background-color:#f5fffa;}   .fgmintcream          {color:#f5fffa;}    \n.azure                {background-color:#f0ffff;}   .fgazure              {color:#f0ffff;}    \n.aliceblue            {background-color:#f0f8ff;}   .fgaliceblue          {color:#f0f8ff;}    \n.ghostwhite           {background-color:#f8f8ff;}   .fgghostwhite         {color:#f8f8ff;}    \n.whitesmoke           {background-color:#f5f5f5;}   .fgwhitesmoke         {color:#f5f5f5;}    \n.seashell             {background-color:#fff5ee;}   .fgseashell           {color:#fff5ee;}    \n.beige                {background-color:#f5f5dc;}   .fgbeige              {color:#f5f5dc;}    \n.oldlace              {background-color:#fdf5e6;}   .fgoldlace            {color:#fdf5e6;}\n.floralwhite          {background-color:#fffaf0;}   .fgfloralwhite        {color:#fffaf0;}\n.ivory                {background-color:#fffff0;}   .fgivory              {color:#fffff0;}    \n.antiquewhite         {background-color:#faebd7;}   .fgantiquewhite       {color:#faebd7;}    \n.linen                {background-color:#faf0e6;}   .fglinen              {color:#faf0e6;}\n.lavenderblush        {background-color:#fff0f5;}   .fglavenderblush      {color:#fff0f5;}    \n.mistyrose            {background-color:#ffe4e1;}   .fgmistyrose          {color:#ffe4e1;}    \n/* gray colors                                       gray foreground colors            */\n.gainsboro            {background-color:#dcdcdc;}   .fggainsboro          {color:#dcdcdc;}    \n.darkgrey             {background-color:#444444;}   .fgdarkgrey           {color:#444444;}    \n.lightgrey            {background-color:#d3d3d3;}   .fglightgrey          {color:#d3d3d3;}    \n.lightergrey          {background-color:#f4f4f4;}   .fglightergrey        {color:#f4f4f4;}    \n.silver               {background-color:#c0c0c0;}   .fgsilver             {color:#c0c0c0;}    \n.darkgray             {background-color:#a9a9a9;}   .fgdarkgray           {color:#a9a9a9;}    \n.gray                 {background-color:#808080;}   .fggray               {color:#808080;}    \n.dimgray              {background-color:#696969;}   .fgdimgray            {color:#696969;}    \n.lightslategray       {background-color:#778899;}   .fglightslategray     {color:#778899;}    \n.slategray            {background-color:#708090;}   .fgslategray          {color:#708090;}    \n.darkslategray        {background-color:#2f4f4f;}   .fgdarkslategray      {color:#2f4f4f;}    \n.black                {background-color:#000000;}   .fgblack              {color:#000000;}\n\n.deepshadowed{\n    box-shadow: 0 0 65px #333;\n    -webkit-box-shadow: 0 0 65px #333;\n    -moz-box-shadow: 0 0 65px #333;\n}\n\n.windowshadowed{\n    box-shadow: 0 0 7px #555;\n    -webkit-box-shadow: 0 0 7px #555;\n    -moz-box-shadow: 0 0 7px #555;\n}\n\n.windowshadowed_active{\n    box-shadow: 0 0 70px #444;\n    -webkit-box-shadow: 0 0 70px #444;\n    -moz-box-shadow: 0 0 70x #444;\n}\n\n.windowshadowed_active_light{\n    box-shadow: 0 0 60px #bbb;\n    -webkit-box-shadow: 0 0 60px #bbb;\n    -moz-box-shadow: 0 0 60x #bbb;\n}\n\n/* css for trustos widgetry */\n\n.button {\n  background: #7acaff;\n  background-image: -webkit-linear-gradient(top, #7acaff, #2275bd);\n  background-image: -moz-linear-gradient(top, #7acaff, #2275bd);\n  background-image: -ms-linear-gradient(top, #7acaff, #2275bd);\n  background-image: -o-linear-gradient(top, #7acaff, #2275bd);\n  background-image: linear-gradient(to bottom, #7acaff, #2275bd);\n  -webkit-border-radius: 7;\n  -moz-border-radius: 7;\n  border-radius: 7px;\n  -webkit-box-shadow: 0px 0px 3px #d1d1d1;\n  -moz-box-shadow: 0px 0px 3px #d1d1d1;\n  box-shadow: 0px 0px 3px #d1d1d1;\n  color: #ffffff;\n  padding: 4px 10px 4px 10px;\n  border: solid #d6d6d6 1px;\n  outline:none;\n}\n\n.button:hover {\n  background: #add3f0;\n  background-image: -webkit-linear-gradient(top, #add3f0, #3498db);\n  background-image: -moz-linear-gradient(top, #add3f0, #3498db);\n  background-image: -ms-linear-gradient(top, #add3f0, #3498db);\n  background-image: -o-linear-gradient(top, #add3f0, #3498db);\n  background-image: linear-gradient(to bottom, #add3f0, #3498db);\n  outline:none;\n}\n\n.button:disabled {\n    background:#99A4C1;\n    color: #777;\n    outline:none;\n}\n\n/* Handy System Gradients */\n\n.darkBlueGradient{\n    background: #1e5799; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #1e5799 0%, #2989d8 50%, #207cca 51%, #7db9e8 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#1e5799), color-stop(50%,#2989d8), color-stop(51%,#207cca), color-stop(100%,#7db9e8)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #1e5799 0%,#2989d8 50%,#207cca 51%,#7db9e8 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #1e5799 0%,#2989d8 50%,#207cca 51%,#7db9e8 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #1e5799 0%,#2989d8 50%,#207cca 51%,#7db9e8 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #1e5799 0%,#2989d8 50%,#207cca 51%,#7db9e8 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#1e5799', endColorstr='#7db9e8',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.vertBlackGradient{\n    background: #4c4c4c;\n    background: -moz-linear-gradient(top,  #4c4c4c 0%, #595959 12%, #666666 25%, #474747 39%, #2c2c2c 50%, #000000 51%, #111111 60%, #2b2b2b 76%, #1c1c1c 91%, #131313 100%);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#4c4c4c), color-stop(12%,#595959), color-stop(25%,#666666), color-stop(39%,#474747), color-stop(50%,#2c2c2c), color-stop(51%,#000000), color-stop(60%,#111111), color-stop(76%,#2b2b2b), color-stop(91%,#1c1c1c), color-stop(100%,#131313));\n    background: -webkit-linear-gradient(top,  #4c4c4c 0%,#595959 12%,#666666 25%,#474747 39%,#2c2c2c 50%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%);\n    background: -o-linear-gradient(top,  #4c4c4c 0%,#595959 12%,#666666 25%,#474747 39%,#2c2c2c 50%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%);\n    background: -ms-linear-gradient(top,  #4c4c4c 0%,#595959 12%,#666666 25%,#474747 39%,#2c2c2c 50%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%);\n    background: linear-gradient(to bottom,  #4c4c4c 0%,#595959 12%,#666666 25%,#474747 39%,#2c2c2c 50%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#4c4c4c', endColorstr='#131313',GradientType=0 );\n}\n\n.vertBlackGradientReverse{\n    background: #131313; /* Old browsers */\n    background: -moz-linear-gradient(top,  #131313 0%, #000000 9%, #111111 40%, #2b2b2b 46%, #000000 49%, #303030 61%, #2c2c2c 69%, #303030 75%, #333333 79%, #686868 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#131313), color-stop(9%,#000000), color-stop(40%,#111111), color-stop(46%,#2b2b2b), color-stop(49%,#000000), color-stop(61%,#303030), color-stop(69%,#2c2c2c), color-stop(75%,#303030), color-stop(79%,#333333), color-stop(100%,#686868)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #131313 0%,#000000 9%,#111111 40%,#2b2b2b 46%,#000000 49%,#303030 61%,#2c2c2c 69%,#303030 75%,#333333 79%,#686868 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #131313 0%,#000000 9%,#111111 40%,#2b2b2b 46%,#000000 49%,#303030 61%,#2c2c2c 69%,#303030 75%,#333333 79%,#686868 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #131313 0%,#000000 9%,#111111 40%,#2b2b2b 46%,#000000 49%,#303030 61%,#2c2c2c 69%,#303030 75%,#333333 79%,#686868 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #131313 0%,#000000 9%,#111111 40%,#2b2b2b 46%,#000000 49%,#303030 61%,#2c2c2c 69%,#303030 75%,#333333 79%,#686868 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#131313', endColorstr='#686868',GradientType=0 ); /* IE6-9 */\n}\n\n.diagBlackGradient{\n    background: #4c4c4c; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #4c4c4c 0%, #595959 12%, #474747 19%, #2c2c2c 36%, #000000 51%, #111111 60%, #2b2b2b 76%, #1c1c1c 91%, #131313 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#4c4c4c), color-stop(12%,#595959), color-stop(19%,#474747), color-stop(36%,#2c2c2c), color-stop(51%,#000000), color-stop(60%,#111111), color-stop(76%,#2b2b2b), color-stop(91%,#1c1c1c), color-stop(100%,#131313)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #4c4c4c 0%,#595959 12%,#474747 19%,#2c2c2c 36%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #4c4c4c 0%,#595959 12%,#474747 19%,#2c2c2c 36%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #4c4c4c 0%,#595959 12%,#474747 19%,#2c2c2c 36%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #4c4c4c 0%,#595959 12%,#474747 19%,#2c2c2c 36%,#000000 51%,#111111 60%,#2b2b2b 76%,#1c1c1c 91%,#131313 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#4c4c4c', endColorstr='#131313',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n\n.lightBlueGradient{\n    background: #b8e1fc;\n    background: -moz-linear-gradient(-45deg,  #b8e1fc 0%, #a9d2f3 10%, #90bae4 25%, #90bcea 37%, #90bff0 50%, #6ba8e5 51%, #a2daf5 83%, #bdf3fd 100%);\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,#b8e1fc), color-stop(10%,#a9d2f3), color-stop(25%,#90bae4), color-stop(37%,#90bcea), color-stop(50%,#90bff0), color-stop(51%,#6ba8e5), color-stop(83%,#a2daf5), color-stop(100%,#bdf3fd));\n    background: -webkit-linear-gradient(-45deg,  #b8e1fc 0%,#a9d2f3 10%,#90bae4 25%,#90bcea 37%,#90bff0 50%,#6ba8e5 51%,#a2daf5 83%,#bdf3fd 100%);\n    background: -o-linear-gradient(-45deg,  #b8e1fc 0%,#a9d2f3 10%,#90bae4 25%,#90bcea 37%,#90bff0 50%,#6ba8e5 51%,#a2daf5 83%,#bdf3fd 100%);\n    background: -ms-linear-gradient(-45deg,  #b8e1fc 0%,#a9d2f3 10%,#90bae4 25%,#90bcea 37%,#90bff0 50%,#6ba8e5 51%,#a2daf5 83%,#bdf3fd 100%);\n    background: linear-gradient(135deg,  #b8e1fc 0%,#a9d2f3 10%,#90bae4 25%,#90bcea 37%,#90bff0 50%,#6ba8e5 51%,#a2daf5 83%,#bdf3fd 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b8e1fc', endColorstr='#bdf3fd',GradientType=1 );\n}\n\n.vertLightBlueGradient{\n    background: #e7f0f3; /* Old browsers */\n    background: -moz-linear-gradient(top,  #e7f0f3 0%, #d1e5ed 50%, #b8d8e2 51%, #e7f0f3 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#e7f0f3), color-stop(50%,#d1e5ed), color-stop(51%,#b8d8e2), color-stop(100%,#e7f0f3)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #e7f0f3 0%,#d1e5ed 50%,#b8d8e2 51%,#e7f0f3 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #e7f0f3 0%,#d1e5ed 50%,#b8d8e2 51%,#e7f0f3 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #e7f0f3 0%,#d1e5ed 50%,#b8d8e2 51%,#e7f0f3 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #e7f0f3 0%,#d1e5ed 50%,#b8d8e2 51%,#e7f0f3 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#e7f0f3', endColorstr='#e7f0f3',GradientType=0 ); /* IE6-9 */\n    \n\n}\n\n.vertTanGradient{\n    background: #f9f1e5; /* Old browsers */\n    background: -moz-linear-gradient(top,  #f9f1e5 0%, #e2d2b8 50%, #ddcaab 51%, #f5ebdb 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f9f1e5), color-stop(50%,#e2d2b8), color-stop(51%,#ddcaab), color-stop(100%,#f5ebdb)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #f9f1e5 0%,#e2d2b8 50%,#ddcaab 51%,#f5ebdb 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #f9f1e5 0%,#e2d2b8 50%,#ddcaab 51%,#f5ebdb 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #f9f1e5 0%,#e2d2b8 50%,#ddcaab 51%,#f5ebdb 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #f9f1e5 0%,#e2d2b8 50%,#ddcaab 51%,#f5ebdb 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f9f1e5', endColorstr='#f5ebdb',GradientType=0 ); /* IE6-9 */\n    \n}\n\n.vertBlueGradient{\n    background: #7db9e8; /* Old browsers */\n    background: -moz-linear-gradient(top,  #7db9e8 0%, #207cca 49%, #2b88d9 50%, #3b679e 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#7db9e8), color-stop(49%,#207cca), color-stop(50%,#2b88d9), color-stop(100%,#3b679e)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #7db9e8 0%,#207cca 49%,#2b88d9 50%,#3b679e 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #7db9e8 0%,#207cca 49%,#2b88d9 50%,#3b679e 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #7db9e8 0%,#207cca 49%,#2b88d9 50%,#3b679e 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #7db9e8 0%,#207cca 49%,#2b88d9 50%,#3b679e 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#7db9e8', endColorstr='#3b679e',GradientType=0 ); /* IE6-9 */\n}\n\n.tanGradient{\n    background: #f3e2c7; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #f3e2c7 0%, #c19e67 50%, #b68d4c 51%, #e9d4b3 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#f3e2c7), color-stop(50%,#c19e67), color-stop(51%,#b68d4c), color-stop(100%,#e9d4b3)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #f3e2c7 0%,#c19e67 50%,#b68d4c 51%,#e9d4b3 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #f3e2c7 0%,#c19e67 50%,#b68d4c 51%,#e9d4b3 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #f3e2c7 0%,#c19e67 50%,#b68d4c 51%,#e9d4b3 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #f3e2c7 0%,#c19e67 50%,#b68d4c 51%,#e9d4b3 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f3e2c7', endColorstr='#e9d4b3',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.forestGradient{\n    background: #005904;\n    background: -moz-linear-gradient(left,  #005904 0%, #005700 17%, #008a00 33%, #418940 48%, #65915f 57%, #137c33 100%);\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,#005904), color-stop(17%,#005700), color-stop(33%,#008a00), color-stop(48%,#418940), color-stop(57%,#65915f), color-stop(100%,#137c33));\n    background: -webkit-linear-gradient(left,  #005904 0%,#005700 17%,#008a00 33%,#418940 48%,#65915f 57%,#137c33 100%);\n    background: -o-linear-gradient(left,  #005904 0%,#005700 17%,#008a00 33%,#418940 48%,#65915f 57%,#137c33 100%);\n    background: -ms-linear-gradient(left,  #005904 0%,#005700 17%,#008a00 33%,#418940 48%,#65915f 57%,#137c33 100%);\n    background: linear-gradient(to right,  #005904 0%,#005700 17%,#008a00 33%,#418940 48%,#65915f 57%,#137c33 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#005904', endColorstr='#137c33',GradientType=1 );\n}\n\n.forestReverseGradient{\n    background: #137c33;\n    background: -moz-linear-gradient(left,  #137c33 0%, #65915f 43%, #418940 52%, #008a00 67%, #005700 83%, #005904 100%);\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,#137c33), color-stop(43%,#65915f), color-stop(52%,#418940), color-stop(67%,#008a00), color-stop(83%,#005700), color-stop(100%,#005904));\n    background: -webkit-linear-gradient(left,  #137c33 0%,#65915f 43%,#418940 52%,#008a00 67%,#005700 83%,#005904 100%);\n    background: -o-linear-gradient(left,  #137c33 0%,#65915f 43%,#418940 52%,#008a00 67%,#005700 83%,#005904 100%);\n    background: -ms-linear-gradient(left,  #137c33 0%,#65915f 43%,#418940 52%,#008a00 67%,#005700 83%,#005904 100%);\n    background: linear-gradient(to right,  #137c33 0%,#65915f 43%,#418940 52%,#008a00 67%,#005700 83%,#005904 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#137c33', endColorstr='#005904',GradientType=1 );\n}\n\n.lightGreyGradient{\n    background: #f9f9f9; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #f9f9f9 0%, #c9c9c9 40%, #f4f4f4 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#f9f9f9), color-stop(40%,#c9c9c9), color-stop(100%,#f4f4f4)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #f9f9f9 0%,#c9c9c9 40%,#f4f4f4 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #f9f9f9 0%,#c9c9c9 40%,#f4f4f4 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #f9f9f9 0%,#c9c9c9 40%,#f4f4f4 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #f9f9f9 0%,#c9c9c9 40%,#f4f4f4 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f9f9f9', endColorstr='#f4f4f4',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.lightTanGradient{\n    background: rgb(242,233,220); /* Old browsers */\n    background: -moz-linear-gradient(top,  rgba(242,233,220,1) 0%, rgba(237,217,180,1) 50%, rgba(234,227,211,1) 69%, rgba(232,219,199,1) 100%, rgba(232,219,199,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(242,233,220,1)), color-stop(50%,rgba(237,217,180,1)), color-stop(69%,rgba(234,227,211,1)), color-stop(100%,rgba(232,219,199,1)), color-stop(100%,rgba(232,219,199,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  rgba(242,233,220,1) 0%,rgba(237,217,180,1) 50%,rgba(234,227,211,1) 69%,rgba(232,219,199,1) 100%,rgba(232,219,199,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  rgba(242,233,220,1) 0%,rgba(237,217,180,1) 50%,rgba(234,227,211,1) 69%,rgba(232,219,199,1) 100%,rgba(232,219,199,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  rgba(242,233,220,1) 0%,rgba(237,217,180,1) 50%,rgba(234,227,211,1) 69%,rgba(232,219,199,1) 100%,rgba(232,219,199,1) 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  rgba(242,233,220,1) 0%,rgba(237,217,180,1) 50%,rgba(234,227,211,1) 69%,rgba(232,219,199,1) 100%,rgba(232,219,199,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f2e9dc', endColorstr='#e8dbc7',GradientType=0 ); /* IE6-9 */\n}\n\n.greyblueGradient{\n    background: rgb(245,246,246); /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  rgba(245,246,246,1) 0%, rgba(219,220,226,1) 21%, rgba(184,186,198,1) 49%, rgba(221,223,227,1) 80%, rgba(245,246,246,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,rgba(245,246,246,1)), color-stop(21%,rgba(219,220,226,1)), color-stop(49%,rgba(184,186,198,1)), color-stop(80%,rgba(221,223,227,1)), color-stop(100%,rgba(245,246,246,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  rgba(245,246,246,1) 0%,rgba(219,220,226,1) 21%,rgba(184,186,198,1) 49%,rgba(221,223,227,1) 80%,rgba(245,246,246,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  rgba(245,246,246,1) 0%,rgba(219,220,226,1) 21%,rgba(184,186,198,1) 49%,rgba(221,223,227,1) 80%,rgba(245,246,246,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  rgba(245,246,246,1) 0%,rgba(219,220,226,1) 21%,rgba(184,186,198,1) 49%,rgba(221,223,227,1) 80%,rgba(245,246,246,1) 100%); /* IE10+ */\n    background: linear-gradient(135deg,  rgba(245,246,246,1) 0%,rgba(219,220,226,1) 21%,rgba(184,186,198,1) 49%,rgba(221,223,227,1) 80%,rgba(245,246,246,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f5f6f6', endColorstr='#f5f6f6',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.darkgreyGradient{\n    background: rgb(125,126,125); /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  rgba(125,126,125,1) 0%, rgba(14,14,14,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,rgba(125,126,125,1)), color-stop(100%,rgba(14,14,14,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* IE10+ */\n    background: linear-gradient(135deg,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#7d7e7d', endColorstr='#0e0e0e',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.vertDarkgreyGradient{\n    background: rgb(125,126,125); /* Old browsers */\n    background: -moz-linear-gradient(top,  rgba(125,126,125,1) 0%, rgba(14,14,14,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(125,126,125,1)), color-stop(100%,rgba(14,14,14,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  rgba(125,126,125,1) 0%,rgba(14,14,14,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#7d7e7d', endColorstr='#0e0e0e',GradientType=0 ); /* IE6-9 */\n    \n}\n\n.redGradient{\n    background: rgb(143,2,34); /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  rgba(143,2,34,1) 44%, rgba(221,79,82,1) 94%, rgba(239,55,55,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(44%,rgba(143,2,34,1)), color-stop(94%,rgba(221,79,82,1)), color-stop(100%,rgba(239,55,55,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  rgba(143,2,34,1) 44%,rgba(221,79,82,1) 94%,rgba(239,55,55,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  rgba(143,2,34,1) 44%,rgba(221,79,82,1) 94%,rgba(239,55,55,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  rgba(143,2,34,1) 44%,rgba(221,79,82,1) 94%,rgba(239,55,55,1) 100%); /* IE10+ */\n    background: linear-gradient(135deg,  rgba(143,2,34,1) 44%,rgba(221,79,82,1) 94%,rgba(239,55,55,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#8f0222', endColorstr='#ef3737',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.yellowGradient{\n    background: rgb(219,164,54); /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  rgba(219,164,54,1) 20%, rgba(232,219,146,1) 61%, rgba(232,219,146,1) 88%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(20%,rgba(219,164,54,1)), color-stop(61%,rgba(232,219,146,1)), color-stop(88%,rgba(232,219,146,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  rgba(219,164,54,1) 20%,rgba(232,219,146,1) 61%,rgba(232,219,146,1) 88%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  rgba(219,164,54,1) 20%,rgba(232,219,146,1) 61%,rgba(232,219,146,1) 88%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  rgba(219,164,54,1) 20%,rgba(232,219,146,1) 61%,rgba(232,219,146,1) 88%); /* IE10+ */\n    background: linear-gradient(135deg,  rgba(219,164,54,1) 20%,rgba(232,219,146,1) 61%,rgba(232,219,146,1) 88%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#dba436', endColorstr='#e8db92',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n    \n}\n\n.stripedBlackGradient{\n    background: #4c4c4c; /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  #4c4c4c 0%, #272530 11%, #474747 39%, #1c1a2b 50%, #111111 60%, #2d2d2d 69%, #2b2b2b 76%, #000000 83%, #000221 91%, #131313 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,#4c4c4c), color-stop(11%,#272530), color-stop(39%,#474747), color-stop(50%,#1c1a2b), color-stop(60%,#111111), color-stop(69%,#2d2d2d), color-stop(76%,#2b2b2b), color-stop(83%,#000000), color-stop(91%,#000221), color-stop(100%,#131313)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  #4c4c4c 0%,#272530 11%,#474747 39%,#1c1a2b 50%,#111111 60%,#2d2d2d 69%,#2b2b2b 76%,#000000 83%,#000221 91%,#131313 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  #4c4c4c 0%,#272530 11%,#474747 39%,#1c1a2b 50%,#111111 60%,#2d2d2d 69%,#2b2b2b 76%,#000000 83%,#000221 91%,#131313 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  #4c4c4c 0%,#272530 11%,#474747 39%,#1c1a2b 50%,#111111 60%,#2d2d2d 69%,#2b2b2b 76%,#000000 83%,#000221 91%,#131313 100%); /* IE10+ */\n    background: linear-gradient(135deg,  #4c4c4c 0%,#272530 11%,#474747 39%,#1c1a2b 50%,#111111 60%,#2d2d2d 69%,#2b2b2b 76%,#000000 83%,#000221 91%,#131313 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#4c4c4c', endColorstr='#131313',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */    \n}\n\n.whiteGradient{\n    background: rgb(255,255,255); /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  rgba(255,255,255,1) 0%, rgba(242,242,244,1) 48%, rgba(255,255,255,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,rgba(255,255,255,1)), color-stop(48%,rgba(242,242,244,1)), color-stop(100%,rgba(255,255,255,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  rgba(255,255,255,1) 0%,rgba(242,242,244,1) 48%,rgba(255,255,255,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  rgba(255,255,255,1) 0%,rgba(242,242,244,1) 48%,rgba(255,255,255,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  rgba(255,255,255,1) 0%,rgba(242,242,244,1) 48%,rgba(255,255,255,1) 100%); /* IE10+ */\n    background: linear-gradient(135deg,  rgba(255,255,255,1) 0%,rgba(242,242,244,1) 48%,rgba(255,255,255,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#ffffff',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.blueShadeGradient{\n    background: #cedbe9; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #cedbe9 0%, #6199c7 13%, #aac5de 49%, #6199c7 60%, #aac5de 84%, #aac5de 100%, #4bb8f0 100%, #419ad6 100%, #3a84c3 100%, #26558b 100%, #3a8bc2 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#cedbe9), color-stop(13%,#6199c7), color-stop(49%,#aac5de), color-stop(60%,#6199c7), color-stop(84%,#aac5de), color-stop(100%,#aac5de), color-stop(100%,#4bb8f0), color-stop(100%,#419ad6), color-stop(100%,#3a84c3), color-stop(100%,#26558b), color-stop(100%,#3a8bc2)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #cedbe9 0%,#6199c7 13%,#aac5de 49%,#6199c7 60%,#aac5de 84%,#aac5de 100%,#4bb8f0 100%,#419ad6 100%,#3a84c3 100%,#26558b 100%,#3a8bc2 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #cedbe9 0%,#6199c7 13%,#aac5de 49%,#6199c7 60%,#aac5de 84%,#aac5de 100%,#4bb8f0 100%,#419ad6 100%,#3a84c3 100%,#26558b 100%,#3a8bc2 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #cedbe9 0%,#6199c7 13%,#aac5de 49%,#6199c7 60%,#aac5de 84%,#aac5de 100%,#4bb8f0 100%,#419ad6 100%,#3a84c3 100%,#26558b 100%,#3a8bc2 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #cedbe9 0%,#6199c7 13%,#aac5de 49%,#6199c7 60%,#aac5de 84%,#aac5de 100%,#4bb8f0 100%,#419ad6 100%,#3a84c3 100%,#26558b 100%,#3a8bc2 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#cedbe9', endColorstr='#3a8bc2',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n    \n}\n\n.lightMetalGradient{\n    background: #dddddd; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #dddddd 0%, #c4bec1 36%, #c3c4ba 64%, #ededed 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#dddddd), color-stop(36%,#c4bec1), color-stop(64%,#c3c4ba), color-stop(100%,#ededed)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #dddddd 0%,#c4bec1 36%,#c3c4ba 64%,#ededed 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #dddddd 0%,#c4bec1 36%,#c3c4ba 64%,#ededed 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #dddddd 0%,#c4bec1 36%,#c3c4ba 64%,#ededed 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #dddddd 0%,#c4bec1 36%,#c3c4ba 64%,#ededed 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#dddddd', endColorstr='#ededed',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.lightMetalGradientReverse{\n    .background: #ededed; /* Old browsers */\n    background: -moz-linear-gradient(45deg,  #ededed 0%, #c3c4ba 36%, #c4bec1 64%, #dddddd 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,#ededed), color-stop(36%,#c3c4ba), color-stop(64%,#c4bec1), color-stop(100%,#dddddd)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(45deg,  #ededed 0%,#c3c4ba 36%,#c4bec1 64%,#dddddd 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(45deg,  #ededed 0%,#c3c4ba 36%,#c4bec1 64%,#dddddd 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(45deg,  #ededed 0%,#c3c4ba 36%,#c4bec1 64%,#dddddd 100%); /* IE10+ */\n    background: linear-gradient(45deg,  #ededed 0%,#c3c4ba 36%,#c4bec1 64%,#dddddd 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ededed', endColorstr='#dddddd',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.vertGreyGradient{\n    background: #b5bdc8; /* Old browsers */\n    background: -moz-linear-gradient(top,  #b5bdc8 0%, #828c95 36%, #8c8c8c 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#b5bdc8), color-stop(36%,#828c95), color-stop(100%,#8c8c8c)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b5bdc8', endColorstr='#8c8c8c',GradientType=0 ); /* IE6-9 */\n}\n\n.vertGreyGradientReverse{\n    background: #8c8c8c; /* Old browsers */\n    background: -moz-linear-gradient(top,  #8c8c8c 0%, #828c95 64%, #b5bdc8 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#8c8c8c), color-stop(64%,#828c95), color-stop(100%,#b5bdc8)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#8c8c8c', endColorstr='#b5bdc8',GradientType=0 ); /* IE6-9 */\n   \n}\n\n.diagGreyGradient{\n    background: #b5bdc8; /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  #b5bdc8 0%, #828c95 36%, #8c8c8c 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,#b5bdc8), color-stop(36%,#828c95), color-stop(100%,#8c8c8c)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* IE10+ */\n    background: linear-gradient(135deg,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b5bdc8', endColorstr='#8c8c8c',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.diagGreyGradientReverse{\n    background: #8c8c8c; /* Old browsers */\n    background: -moz-linear-gradient(-45deg,  #8c8c8c 0%, #828c95 64%, #b5bdc8 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,#8c8c8c), color-stop(64%,#828c95), color-stop(100%,#b5bdc8)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* IE10+ */\n    background: linear-gradient(135deg,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#8c8c8c', endColorstr='#b5bdc8',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */\n}\n\n.horizGreyGradient{\n    background: #b5bdc8; /* Old browsers */\n    background: -moz-linear-gradient(left,  #b5bdc8 0%, #828c95 36%, #8c8c8c 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,#b5bdc8), color-stop(36%,#828c95), color-stop(100%,#8c8c8c)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* IE10+ */\n    background: linear-gradient(to right,  #b5bdc8 0%,#828c95 36%,#8c8c8c 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b5bdc8', endColorstr='#8c8c8c',GradientType=1 ); /* IE6-9 */\n}\n\n.horizGreyGradientReverse{\n    background: #8c8c8c; /* Old browsers */\n    background: -moz-linear-gradient(left,  #8c8c8c 0%, #828c95 64%, #b5bdc8 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,#8c8c8c), color-stop(64%,#828c95), color-stop(100%,#b5bdc8)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* IE10+ */\n    background: linear-gradient(to right,  #8c8c8c 0%,#828c95 64%,#b5bdc8 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#8c8c8c', endColorstr='#b5bdc8',GradientType=1 ); /* IE6-9 */\n}\n\n.horizBlackGradient{\n    background: rgb(0,0,0); /* Old browsers */\n    background: -moz-linear-gradient(left,  rgba(0,0,0,1) 0%, rgba(102,102,102,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgba(0,0,0,1)), color-stop(100%,rgba(102,102,102,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  rgba(0,0,0,1) 0%,rgba(102,102,102,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  rgba(0,0,0,1) 0%,rgba(102,102,102,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  rgba(0,0,0,1) 0%,rgba(102,102,102,1) 100%); /* IE10+ */\n    background: linear-gradient(to right,  rgba(0,0,0,1) 0%,rgba(102,102,102,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#000000', endColorstr='#666666',GradientType=1 ); /* IE6-9 */\n    \n}\n\n.horizBlackGradientReverse{\n    background: rgb(102,102,102); /* Old browsers */\n    background: -moz-linear-gradient(left,  rgba(102,102,102,1) 0%, rgba(0,0,0,1) 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgba(102,102,102,1)), color-stop(100%,rgba(0,0,0,1))); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  rgba(102,102,102,1) 0%,rgba(0,0,0,1) 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  rgba(102,102,102,1) 0%,rgba(0,0,0,1) 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  rgba(102,102,102,1) 0%,rgba(0,0,0,1) 100%); /* IE10+ */\n    background: linear-gradient(to right,  rgba(102,102,102,1) 0%,rgba(0,0,0,1) 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#666666', endColorstr='#000000',GradientType=1 ); /* IE6-9 */\n    \n}\n\n.bgGradient{\n    background: #f9fdff; /* Old browsers */\n    background: -moz-linear-gradient(left,  #f9fdff 69%, #eaeaea 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(69%,#f9fdff), color-stop(100%,#eaeaea)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  #f9fdff 69%,#eaeaea 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  #f9fdff 69%,#eaeaea 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  #f9fdff 69%,#eaeaea 100%); /* IE10+ */\n    background: linear-gradient(to right,  #f9fdff 69%,#eaeaea 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f9fdff', endColorstr='#eaeaea',GradientType=1 ); /* IE6-9 */\n    \n}\n\n.bgGradientReversed{\n    background: #eaeaea; /* Old browsers */\n    background: -moz-linear-gradient(left,  #eaeaea 0%, #f9fdff 47%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,#eaeaea), color-stop(47%,#f9fdff)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  #eaeaea 0%,#f9fdff 47%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  #eaeaea 0%,#f9fdff 47%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  #eaeaea 0%,#f9fdff 47%); /* IE10+ */\n    background: linear-gradient(to right,  #eaeaea 0%,#f9fdff 47%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#eaeaea', endColorstr='#f9fdff',GradientType=1 ); /* IE6-9 */\n    \n}\n\n.menuGradient{\n    background: #f5f5f5; /* Old browsers */\n    background: -moz-linear-gradient(top,  #f5f5f5 0%, #eaeaea 49%, #e4e4e4 49%, #e4e4e4 49%, #f7f7f7 99%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f5f5f5), color-stop(49%,#eaeaea), color-stop(49%,#e4e4e4), color-stop(49%,#e4e4e4), color-stop(99%,#f7f7f7)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #f5f5f5 0%,#eaeaea 49%,#e4e4e4 49%,#e4e4e4 49%,#f7f7f7 99%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #f5f5f5 0%,#eaeaea 49%,#e4e4e4 49%,#e4e4e4 49%,#f7f7f7 99%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #f5f5f5 0%,#eaeaea 49%,#e4e4e4 49%,#e4e4e4 49%,#f7f7f7 99%); /* IE10+ */\n    background: linear-gradient(to bottom,  #f5f5f5 0%,#eaeaea 49%,#e4e4e4 49%,#e4e4e4 49%,#f7f7f7 99%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f5f5f5', endColorstr='#f7f7f7',GradientType=0 ); /* IE6-9 */\n}\n\n.horizMenuGradient{\n    background: #e5eaed; /* Old browsers */\n    background: -moz-linear-gradient(left,  #e5eaed 0%, #dce4e8 50%, #d5dce1 51%, #e3e9ef 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right top, color-stop(0%,#e5eaed), color-stop(50%,#dce4e8), color-stop(51%,#d5dce1), color-stop(100%,#e3e9ef)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(left,  #e5eaed 0%,#dce4e8 50%,#d5dce1 51%,#e3e9ef 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(left,  #e5eaed 0%,#dce4e8 50%,#d5dce1 51%,#e3e9ef 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(left,  #e5eaed 0%,#dce4e8 50%,#d5dce1 51%,#e3e9ef 100%); /* IE10+ */\n    background: linear-gradient(to right,  #e5eaed 0%,#dce4e8 50%,#d5dce1 51%,#e3e9ef 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#e5eaed', endColorstr='#e3e9ef',GradientType=1 ); /* IE6-9 */\n    \n}\n\n.buttonGradient{\n    background-image: -webkit-linear-gradient(top, #7acaff, #2275bd);\n    background-image: -moz-linear-gradient(top, #7acaff, #2275bd);\n    background-image: -ms-linear-gradient(top, #7acaff, #2275bd);\n    background-image: -o-linear-gradient(top, #7acaff, #2275bd);\n    background-image: linear-gradient(to bottom, #7acaff, #2275bd);\n}\n\n.vertRedGradient{\n    /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#f3c5bd+0,e86c57+50,ea2803+51,ff6600+75,c72200+100;Red+Gloss */\n    background: #f3c5bd; /* Old browsers */\n    background: -moz-linear-gradient(top,  #f3c5bd 0%, #e86c57 50%, #ea2803 51%, #ff6600 75%, #c72200 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f3c5bd), color-stop(50%,#e86c57), color-stop(51%,#ea2803), color-stop(75%,#ff6600), color-stop(100%,#c72200)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #f3c5bd 0%,#e86c57 50%,#ea2803 51%,#ff6600 75%,#c72200 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #f3c5bd 0%,#e86c57 50%,#ea2803 51%,#ff6600 75%,#c72200 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #f3c5bd 0%,#e86c57 50%,#ea2803 51%,#ff6600 75%,#c72200 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #f3c5bd 0%,#e86c57 50%,#ea2803 51%,#ff6600 75%,#c72200 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f3c5bd', endColorstr='#c72200',GradientType=0 ); /* IE6-9 */\n}\n\n.vertBlueGradientInverted{\n    background: #c3dbed; /* Old browsers */\n    background: -moz-linear-gradient(top,  #c3dbed 0%, #91bce1 49%, #9dc2e1 50%, #81a9d7 100%); /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#c3dbed), color-stop(49%,#91bce1), color-stop(50%,#9dc2e1), color-stop(100%,#81a9d7)); /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(top,  #c3dbed 0%,#91bce1 49%,#9dc2e1 50%,#81a9d7 100%); /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(top,  #c3dbed 0%,#91bce1 49%,#9dc2e1 50%,#81a9d7 100%); /* Opera 11.10+ */\n    background: -ms-linear-gradient(top,  #c3dbed 0%,#91bce1 49%,#9dc2e1 50%,#81a9d7 100%); /* IE10+ */\n    background: linear-gradient(to bottom,  #c3dbed 0%,#91bce1 49%,#9dc2e1 50%,#81a9d7 100%); /* W3C */\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#c3dbed', endColorstr='#81a9d7',GradientType=0 ); /* IE6-9 */\n    \n}\n\n\n\n", ""]);

	// exports


/***/ },
/* 8 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(true) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function createLinkElement() {
		var linkElement = document.createElement("link");
		var head = getHeadElement();
		linkElement.rel = "stylesheet";
		head.appendChild(linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement();
			update = updateLink.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(11);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(12);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
	!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
	return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
	void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"=="function"&&__webpack_require__(13)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});


/***/ },
/* 13 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/*** IMPORTS FROM imports-loader ***/
	(function() {

	var GLOBAL = this;
	GLOBAL.JSHINT=(function(){"use strict";var anonname,bang={'<':true,'<=':true,'==':true,'===':true,'!==':true,'!=':true,'>':true,'>=':true,'+':true,'-':true,'*':true,'/':true,'%':true},boolOptions={asi:true,bitwise:true,boss:true,browser:true,couch:true,curly:true,debug:true,devel:true,dojo:true,eqeqeq:true,eqnull:true,es5:true,esnext:true,evil:true,expr:true,forin:true,funcscope:true,globalstrict:true,immed:true,iterator:true,jquery:true,lastsemic:true,latedef:true,laxbreak:true,laxcomma:true,loopfunc:true,mootools:true,multistr:true,newcap:true,noarg:true,node:true,noempty:true,nonew:true,nonstandard:true,nomen:true,onevar:true,onecase:true,passfail:true,plusplus:true,proto:true,prototypejs:true,regexdash:true,regexp:true,rhino:true,undef:true,scripturl:true,shadow:true,smarttabs:true,strict:true,sub:true,supernew:true,trailing:true,validthis:true,withstmt:true,white:true,wsh:true},valOptions={maxlen:false,indent:false,maxerr:false,predef:false},browser={ArrayBuffer:false,ArrayBufferView:false,Audio:false,addEventListener:false,applicationCache:false,atob:false,blur:false,btoa:false,clearInterval:false,clearTimeout:false,close:false,closed:false,DataView:false,DOMParser:false,defaultStatus:false,document:false,event:false,FileReader:false,Float32Array:false,Float64Array:false,FormData:false,focus:false,frames:false,getComputedStyle:false,HTMLElement:false,HTMLAnchorElement:false,HTMLBaseElement:false,HTMLBlockquoteElement:false,HTMLBodyElement:false,HTMLBRElement:false,HTMLButtonElement:false,HTMLCanvasElement:false,HTMLDirectoryElement:false,HTMLDivElement:false,HTMLDListElement:false,HTMLFieldSetElement:false,HTMLFontElement:false,HTMLFormElement:false,HTMLFrameElement:false,HTMLFrameSetElement:false,HTMLHeadElement:false,HTMLHeadingElement:false,HTMLHRElement:false,HTMLHtmlElement:false,HTMLIFrameElement:false,HTMLImageElement:false,HTMLInputElement:false,HTMLIsIndexElement:false,HTMLLabelElement:false,HTMLLayerElement:false,HTMLLegendElement:false,HTMLLIElement:false,HTMLLinkElement:false,HTMLMapElement:false,HTMLMenuElement:false,HTMLMetaElement:false,HTMLModElement:false,HTMLObjectElement:false,HTMLOListElement:false,HTMLOptGroupElement:false,HTMLOptionElement:false,HTMLParagraphElement:false,HTMLParamElement:false,HTMLPreElement:false,HTMLQuoteElement:false,HTMLScriptElement:false,HTMLSelectElement:false,HTMLStyleElement:false,HTMLTableCaptionElement:false,HTMLTableCellElement:false,HTMLTableColElement:false,HTMLTableElement:false,HTMLTableRowElement:false,HTMLTableSectionElement:false,HTMLTextAreaElement:false,HTMLTitleElement:false,HTMLUListElement:false,HTMLVideoElement:false,history:false,Int16Array:false,Int32Array:false,Int8Array:false,Image:false,length:false,localStorage:false,location:false,MessageChannel:false,MessageEvent:false,MessagePort:false,moveBy:false,moveTo:false,name:false,navigator:false,onbeforeunload:true,onblur:true,onerror:true,onfocus:true,onload:true,onresize:true,onunload:true,open:false,openDatabase:false,opener:false,Option:false,parent:false,print:false,removeEventListener:false,resizeBy:false,resizeTo:false,screen:false,scroll:false,scrollBy:false,scrollTo:false,sessionStorage:false,setInterval:false,setTimeout:false,SharedWorker:false,status:false,top:false,Uint16Array:false,Uint32Array:false,Uint8Array:false,WebSocket:false,window:false,Worker:false,XMLHttpRequest:false,XMLSerializer:false,XPathEvaluator:false,XPathException:false,XPathExpression:false,XPathNamespace:false,XPathNSResolver:false,XPathResult:false},couch={"require":false,respond:false,getRow:false,emit:false,send:false,start:false,sum:false,log:false,exports:false,module:false,provides:false},devel={alert:false,confirm:false,console:false,Debug:false,opera:false,prompt:false},dojo={dojo:false,dijit:false,dojox:false,define:false,"require":false},escapes={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','/':'\\/','\\':'\\\\'},funct,functionicity=['closure','exception','global','label','outer','unused','var'],functions,global,implied,inblock,indent,jsonmode,jquery={'$':false,jQuery:false},lines,lookahead,member,membersOnly,mootools={'$':false,'$$':false,Assets:false,Browser:false,Chain:false,Class:false,Color:false,Cookie:false,Core:false,Document:false,DomReady:false,DOMReady:false,Drag:false,Element:false,Elements:false,Event:false,Events:false,Fx:false,Group:false,Hash:false,HtmlTable:false,Iframe:false,IframeShim:false,InputValidator:false,instanceOf:false,Keyboard:false,Locale:false,Mask:false,MooTools:false,Native:false,Options:false,OverText:false,Request:false,Scroller:false,Slick:false,Slider:false,Sortables:false,Spinner:false,Swiff:false,Tips:false,Type:false,typeOf:false,URI:false,Window:false},nexttoken,node={__filename:false,__dirname:false,Buffer:false,console:false,exports:false,GLOBAL:false,global:false,module:false,process:false,require:false,setTimeout:false,clearTimeout:false,setInterval:false,clearInterval:false},noreach,option,predefined,prereg,prevtoken,prototypejs={'$':false,'$$':false,'$A':false,'$F':false,'$H':false,'$R':false,'$break':false,'$continue':false,'$w':false,Abstract:false,Ajax:false,Class:false,Enumerable:false,Element:false,Event:false,Field:false,Form:false,Hash:false,Insertion:false,ObjectRange:false,PeriodicalExecuter:false,Position:false,Prototype:false,Selector:false,Template:false,Toggle:false,Try:false,Autocompleter:false,Builder:false,Control:false,Draggable:false,Draggables:false,Droppables:false,Effect:false,Sortable:false,SortableObserver:false,Sound:false,Scriptaculous:false},rhino={defineClass:false,deserialize:false,gc:false,help:false,importPackage:false,"java":false,load:false,loadClass:false,print:false,quit:false,readFile:false,readUrl:false,runCommand:false,seal:false,serialize:false,spawn:false,sync:false,toint32:false,version:false},scope,stack,standard={Array:false,Boolean:false,Date:false,decodeURI:false,decodeURIComponent:false,encodeURI:false,encodeURIComponent:false,Error:false,'eval':false,EvalError:false,Function:false,hasOwnProperty:false,isFinite:false,isNaN:false,JSON:false,Math:false,Number:false,Object:false,parseInt:false,parseFloat:false,RangeError:false,ReferenceError:false,RegExp:false,String:false,SyntaxError:false,TypeError:false,URIError:false},nonstandard={escape:false,unescape:false},standard_member={E:true,LN2:true,LN10:true,LOG2E:true,LOG10E:true,MAX_VALUE:true,MIN_VALUE:true,NEGATIVE_INFINITY:true,PI:true,POSITIVE_INFINITY:true,SQRT1_2:true,SQRT2:true},directive,syntax={},tab,token,urls,useESNextSyntax,warnings,wsh={ActiveXObject:true,Enumerator:true,GetObject:true,ScriptEngine:true,ScriptEngineBuildVersion:true,ScriptEngineMajorVersion:true,ScriptEngineMinorVersion:true,VBArray:true,WSH:true,WScript:true,XDomainRequest:true};var ax,cx,tx,nx,nxg,lx,ix,jx,ft;(function(){ax=/@cc|<\/?|script|\]\s*\]|<\s*!|&lt/i;cx=/[\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;tx=/^\s*([(){}\[.,:;'"~\?\]#@]|==?=?|\/(\*(jshint|jslint|members?|global)?|=|\/)?|\*[\/=]?|\+(?:=|\++)?|-(?:=|-+)?|%=?|&[&=]?|\|[|=]?|>>?>?=?|<([\/=!]|\!(\[|--)?|<=?)?|\^=?|\!=?=?|[a-zA-Z_$][a-zA-Z0-9_$]*|[0-9]+([xX][0-9a-fA-F]+|\.[0-9]*)?([eE][+\-]?[0-9]+)?)/;nx=/[\u0000-\u001f&<"\/\\\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;nxg=/[\u0000-\u001f&<"\/\\\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;lx=/\*\/|\/\*/;ix=/^([a-zA-Z_$][a-zA-Z0-9_$]*)$/;jx=/^(?:javascript|jscript|ecmascript|vbscript|mocha|livescript)\s*:/i;ft=/^\s*\/\*\s*falls\sthrough\s*\*\/\s*$/}());function F(){}function is_own(object,name){return Object.prototype.hasOwnProperty.call(object,name)}function checkOption(name,t){if(valOptions[name]===undefined&&boolOptions[name]===undefined){warning("Bad option: '"+name+"'.",t)}}if(typeof Array.isArray!=='function'){Array.isArray=function(o){return Object.prototype.toString.apply(o)==='[object Array]'}}if(typeof Object.create!=='function'){Object.create=function(o){F.prototype=o;return new F()}}if(typeof Object.keys!=='function'){Object.keys=function(o){var a=[],k;for(k in o){if(is_own(o,k)){a.push(k)}}return a}}if(typeof String.prototype.entityify!=='function'){String.prototype.entityify=function(){return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')}}if(typeof String.prototype.isAlpha!=='function'){String.prototype.isAlpha=function(){return(this>='a'&&this<='z\uffff')||(this>='A'&&this<='Z\uffff')}}if(typeof String.prototype.isDigit!=='function'){String.prototype.isDigit=function(){return(this>='0'&&this<='9')}}if(typeof String.prototype.supplant!=='function'){String.prototype.supplant=function(o){return this.replace(/\{([^{}]*)\}/g,function(a,b){var r=o[b];return typeof r==='string'||typeof r==='number'?r:a})}}if(typeof String.prototype.name!=='function'){String.prototype.name=function(){if(ix.test(this)){return this}if(nx.test(this)){return'"'+this.replace(nxg,function(a){var c=escapes[a];if(c){return c}return'\\u'+('0000'+a.charCodeAt().toString(16)).slice(-4)})+'"'}return'"'+this+'"'}}function combine(t,o){var n;for(n in o){if(is_own(o,n)){t[n]=o[n]}}}function assume(){if(option.couch){combine(predefined,couch)}if(option.rhino){combine(predefined,rhino)}if(option.prototypejs){combine(predefined,prototypejs)}if(option.node){combine(predefined,node);option.globalstrict=true}if(option.devel){combine(predefined,devel)}if(option.dojo){combine(predefined,dojo)}if(option.browser){combine(predefined,browser)}if(option.nonstandard){combine(predefined,nonstandard)}if(option.jquery){combine(predefined,jquery)}if(option.mootools){combine(predefined,mootools)}if(option.wsh){combine(predefined,wsh)}if(option.esnext){useESNextSyntax()}if(option.globalstrict&&option.strict!==false){option.strict=true}}function quit(message,line,chr){var percentage=Math.floor((line/lines.length)*100);throw{name:'JSHintError',line:line,character:chr,message:message+" ("+percentage+"% scanned).",raw:message}}function isundef(scope,m,t,a){return JSHINT.undefs.push([scope,m,t,a])}function warning(m,t,a,b,c,d){var ch,l,w;t=t||nexttoken;if(t.id==='(end)'){t=token}l=t.line||0;ch=t.from||0;w={id:'(error)',raw:m,evidence:lines[l-1]||'',line:l,character:ch,a:a,b:b,c:c,d:d};w.reason=m.supplant(w);JSHINT.errors.push(w);if(option.passfail){quit('Stopping. ',l,ch)}warnings+=1;if(warnings>=option.maxerr){quit("Too many errors.",l,ch)}return w}function warningAt(m,l,ch,a,b,c,d){return warning(m,{line:l,from:ch},a,b,c,d)}function error(m,t,a,b,c,d){var w=warning(m,t,a,b,c,d)}function errorAt(m,l,ch,a,b,c,d){return error(m,{line:l,from:ch},a,b,c,d)}var lex=(function lex(){var character,from,line,s;function nextLine(){var at,tw;if(line>=lines.length)return false;character=1;s=lines[line];line+=1;if(option.smarttabs)at=s.search(/ \t/);else at=s.search(/ \t|\t /);if(at>=0)warningAt("Mixed spaces and tabs.",line,at+1);s=s.replace(/\t/g,tab);at=s.search(cx);if(at>=0)warningAt("Unsafe character.",line,at);if(option.maxlen&&option.maxlen<s.length)warningAt("Line too long.",line,s.length);tw=option.trailing&&s.match(/^(.*?)\s+$/);if(tw&&!/^\s+$/.test(s)){warningAt("Trailing whitespace.",line,tw[1].length+1)}return true}function it(type,value){var i,t;if(type==='(color)'||type==='(range)'){t={type:type}}else if(type==='(punctuator)'||(type==='(identifier)'&&is_own(syntax,value))){t=syntax[value]||syntax['(error)']}else{t=syntax[type]}t=Object.create(t);if(type==='(string)'||type==='(range)'){if(!option.scripturl&&jx.test(value)){warningAt("Script URL.",line,from)}}if(type==='(identifier)'){t.identifier=true;if(value==='__proto__'&&!option.proto){warningAt("The '{a}' property is deprecated.",line,from,value)}else if(value==='__iterator__'&&!option.iterator){warningAt("'{a}' is only available in JavaScript 1.7.",line,from,value)}else if(option.nomen&&(value.charAt(0)==='_'||value.charAt(value.length-1)==='_')){if(!option.node||token.id==='.'||(value!=='__dirname'&&value!=='__filename')){warningAt("Unexpected {a} in '{b}'.",line,from,"dangling '_'",value)}}}t.value=value;t.line=line;t.character=character;t.from=from;i=t.id;if(i!=='(endline)'){prereg=i&&(('(,=:[!&|?{};'.indexOf(i.charAt(i.length-1))>=0)||i==='return'||i==='case')}return t}return{init:function(source){if(typeof source==='string'){lines=source.replace(/\r\n/g,'\n').replace(/\r/g,'\n').split('\n')}else{lines=source}if(lines[0]&&lines[0].substr(0,2)==='#!')lines[0]='';line=0;nextLine();from=1},range:function(begin,end){var c,value='';from=character;if(s.charAt(0)!==begin){errorAt("Expected '{a}' and instead saw '{b}'.",line,character,begin,s.charAt(0))}for(;;){s=s.slice(1);character+=1;c=s.charAt(0);switch(c){case'':errorAt("Missing '{a}'.",line,character,c);break;case end:s=s.slice(1);character+=1;return it('(range)',value);case'\\':warningAt("Unexpected '{a}'.",line,character,c)}value+=c}},token:function(){var b,c,captures,d,depth,high,i,l,low,q,t,isLiteral,isInRange,n;function match(x){var r=x.exec(s),r1;if(r){l=r[0].length;r1=r[1];c=r1.charAt(0);s=s.substr(l);from=character+l-r1.length;character+=l;return r1}}function string(x){var c,j,r='',allowNewLine=false;if(jsonmode&&x!=='"'){warningAt("Strings must use doublequote.",line,character)}function esc(n){var i=parseInt(s.substr(j+1,n),16);j+=n;if(i>=32&&i<=126&&i!==34&&i!==92&&i!==39){warningAt("Unnecessary escapement.",line,character)}character+=n;c=String.fromCharCode(i)}j=0;unclosedString:for(;;){while(j>=s.length){j=0;var cl=line,cf=from;if(!nextLine()){errorAt("Unclosed string.",cl,cf);break unclosedString}if(allowNewLine){allowNewLine=false}else{warningAt("Unclosed string.",cl,cf)}}c=s.charAt(j);if(c===x){character+=1;s=s.substr(j+1);return it('(string)',r,x)}if(c<' '){if(c==='\n'||c==='\r'){break}warningAt("Control character in string: {a}.",line,character+j,s.slice(0,j))}else if(c==='\\'){j+=1;character+=1;c=s.charAt(j);n=s.charAt(j+1);switch(c){case'\\':case'"':case'/':break;case'\'':if(jsonmode){warningAt("Avoid \\'.",line,character)}break;case'b':c='\b';break;case'f':c='\f';break;case'n':c='\n';break;case'r':c='\r';break;case't':c='\t';break;case'0':c='\0';if(n>=0&&n<=7&&directive["use strict"]){warningAt("Octal literals are not allowed in strict mode.",line,character)}break;case'u':esc(4);break;case'v':if(jsonmode){warningAt("Avoid \\v.",line,character)}c='\v';break;case'x':if(jsonmode){warningAt("Avoid \\x-.",line,character)}esc(2);break;case'':allowNewLine=true;if(option.multistr){if(jsonmode){warningAt("Avoid EOL escapement.",line,character)}c='';character-=1;break}warningAt("Bad escapement of EOL. Use option multistr if needed.",line,character);break;default:warningAt("Bad escapement.",line,character)}}r+=c;character+=1;j+=1}}for(;;){if(!s){return it(nextLine()?'(endline)':'(end)','')}t=match(tx);if(!t){t='';c='';while(s&&s<'!'){s=s.substr(1)}if(s){errorAt("Unexpected '{a}'.",line,character,s.substr(0,1));s=''}}else{if(c.isAlpha()||c==='_'||c==='$'){return it('(identifier)',t)}if(c.isDigit()){if(!isFinite(Number(t))){warningAt("Bad number '{a}'.",line,character,t)}if(s.substr(0,1).isAlpha()){warningAt("Missing space after '{a}'.",line,character,t)}if(c==='0'){d=t.substr(1,1);if(d.isDigit()){if(token.id!=='.'){warningAt("Don't use extra leading zeros '{a}'.",line,character,t)}}else if(jsonmode&&(d==='x'||d==='X')){warningAt("Avoid 0x-. '{a}'.",line,character,t)}}if(t.substr(t.length-1)==='.'){warningAt("A trailing decimal point can be confused with a dot '{a}'.",line,character,t)}return it('(number)',t)}switch(t){case'"':case"'":return string(t);case'//':s='';token.comment=true;break;case'/*':for(;;){i=s.search(lx);if(i>=0){break}if(!nextLine()){errorAt("Unclosed comment.",line,character)}}character+=i+2;if(s.substr(i,1)==='/'){errorAt("Nested comment.",line,character)}s=s.substr(i+2);token.comment=true;break;case'/*members':case'/*member':case'/*jshint':case'/*jslint':case'/*global':case'*/':return{value:t,type:'special',line:line,character:character,from:from};case'':break;case'/':if(token.id==='/='){errorAt("A regular expression literal can be confused with '/='.",line,from)}if(prereg){depth=0;captures=0;l=0;for(;;){b=true;c=s.charAt(l);l+=1;switch(c){case'':errorAt("Unclosed regular expression.",line,from);return quit('Stopping.',line,from);case'/':if(depth>0){warningAt("{a} unterminated regular expression "+"group(s).",line,from+l,depth)}c=s.substr(0,l-1);q={g:true,i:true,m:true};while(q[s.charAt(l)]===true){q[s.charAt(l)]=false;l+=1}character+=l;s=s.substr(l);q=s.charAt(0);if(q==='/'||q==='*'){errorAt("Confusing regular expression.",line,from)}return it('(regexp)',c);case'\\':c=s.charAt(l);if(c<' '){warningAt("Unexpected control character in regular expression.",line,from+l)}else if(c==='<'){warningAt("Unexpected escaped character '{a}' in regular expression.",line,from+l,c)}l+=1;break;case'(':depth+=1;b=false;if(s.charAt(l)==='?'){l+=1;switch(s.charAt(l)){case':':case'=':case'!':l+=1;break;default:warningAt("Expected '{a}' and instead saw '{b}'.",line,from+l,':',s.charAt(l))}}else{captures+=1}break;case'|':b=false;break;case')':if(depth===0){warningAt("Unescaped '{a}'.",line,from+l,')')}else{depth-=1}break;case' ':q=1;while(s.charAt(l)===' '){l+=1;q+=1}if(q>1){warningAt("Spaces are hard to count. Use {{a}}.",line,from+l,q)}break;case'[':c=s.charAt(l);if(c==='^'){l+=1;if(option.regexp){warningAt("Insecure '{a}'.",line,from+l,c)}else if(s.charAt(l)===']'){errorAt("Unescaped '{a}'.",line,from+l,'^')}}if(c===']'){warningAt("Empty class.",line,from+l-1)}isLiteral=false;isInRange=false;klass:do{c=s.charAt(l);l+=1;switch(c){case'[':case'^':warningAt("Unescaped '{a}'.",line,from+l,c);if(isInRange){isInRange=false}else{isLiteral=true}break;case'-':if(isLiteral&&!isInRange){isLiteral=false;isInRange=true}else if(isInRange){isInRange=false}else if(s.charAt(l)===']'){isInRange=true}else{if(option.regexdash!==(l===2||(l===3&&s.charAt(1)==='^'))){warningAt("Unescaped '{a}'.",line,from+l-1,'-')}isLiteral=true}break;case']':if(isInRange&&!option.regexdash){warningAt("Unescaped '{a}'.",line,from+l-1,'-')}break klass;case'\\':c=s.charAt(l);if(c<' '){warningAt("Unexpected control character in regular expression.",line,from+l)}else if(c==='<'){warningAt("Unexpected escaped character '{a}' in regular expression.",line,from+l,c)}l+=1;if(/[wsd]/i.test(c)){if(isInRange){warningAt("Unescaped '{a}'.",line,from+l,'-');isInRange=false}isLiteral=false}else if(isInRange){isInRange=false}else{isLiteral=true}break;case'/':warningAt("Unescaped '{a}'.",line,from+l-1,'/');if(isInRange){isInRange=false}else{isLiteral=true}break;case'<':if(isInRange){isInRange=false}else{isLiteral=true}break;default:if(isInRange){isInRange=false}else{isLiteral=true}}}while(c);break;case'.':if(option.regexp){warningAt("Insecure '{a}'.",line,from+l,c)}break;case']':case'?':case'{':case'}':case'+':case'*':warningAt("Unescaped '{a}'.",line,from+l,c)}if(b){switch(s.charAt(l)){case'?':case'+':case'*':l+=1;if(s.charAt(l)==='?'){l+=1}break;case'{':l+=1;c=s.charAt(l);if(c<'0'||c>'9'){warningAt("Expected a number and instead saw '{a}'.",line,from+l,c)}l+=1;low=+c;for(;;){c=s.charAt(l);if(c<'0'||c>'9'){break}l+=1;low=+c+(low*10)}high=low;if(c===','){l+=1;high=Infinity;c=s.charAt(l);if(c>='0'&&c<='9'){l+=1;high=+c;for(;;){c=s.charAt(l);if(c<'0'||c>'9'){break}l+=1;high=+c+(high*10)}}}if(s.charAt(l)!=='}'){warningAt("Expected '{a}' and instead saw '{b}'.",line,from+l,'}',c)}else{l+=1}if(s.charAt(l)==='?'){l+=1}if(low>high){warningAt("'{a}' should not be greater than '{b}'.",line,from+l,low,high)}}}}c=s.substr(0,l-1);character+=l;s=s.substr(l);return it('(regexp)',c)}return it('(punctuator)',t);case'#':return it('(punctuator)',t);default:return it('(punctuator)',t)}}}}}}());function addlabel(t,type){if(t==='hasOwnProperty'){warning("'hasOwnProperty' is a really bad name.")}if(is_own(funct,t)&&!funct['(global)']){if(funct[t]===true){if(option.latedef)warning("'{a}' was used before it was defined.",nexttoken,t)}else{if(!option.shadow&&type!=="exception")warning("'{a}' is already defined.",nexttoken,t)}}funct[t]=type;if(funct['(global)']){global[t]=funct;if(is_own(implied,t)){if(option.latedef)warning("'{a}' was used before it was defined.",nexttoken,t);delete implied[t]}}else{scope[t]=funct}}function doOption(){var b,obj,filter,o=nexttoken.value,t,v;switch(o){case'*/':error("Unbegun comment.");break;case'/*members':case'/*member':o='/*members';if(!membersOnly){membersOnly={}}obj=membersOnly;break;case'/*jshint':case'/*jslint':obj=option;filter=boolOptions;break;case'/*global':obj=predefined;break;default:error("What?")}t=lex.token();loop:for(;;){for(;;){if(t.type==='special'&&t.value==='*/'){break loop}if(t.id!=='(endline)'&&t.id!==','){break}t=lex.token()}if(t.type!=='(string)'&&t.type!=='(identifier)'&&o!=='/*members'){error("Bad option.",t)}v=lex.token();if(v.id===':'){v=lex.token();if(obj===membersOnly){error("Expected '{a}' and instead saw '{b}'.",t,'*/',':')}if(o==='/*jshint'){checkOption(t.value,t)}if(t.value==='indent'&&(o==='/*jshint'||o==='/*jslint')){b=+v.value;if(typeof b!=='number'||!isFinite(b)||b<=0||Math.floor(b)!==b){error("Expected a small integer and instead saw '{a}'.",v,v.value)}obj.white=true;obj.indent=b}else if(t.value==='maxerr'&&(o==='/*jshint'||o==='/*jslint')){b=+v.value;if(typeof b!=='number'||!isFinite(b)||b<=0||Math.floor(b)!==b){error("Expected a small integer and instead saw '{a}'.",v,v.value)}obj.maxerr=b}else if(t.value==='maxlen'&&(o==='/*jshint'||o==='/*jslint')){b=+v.value;if(typeof b!=='number'||!isFinite(b)||b<=0||Math.floor(b)!==b){error("Expected a small integer and instead saw '{a}'.",v,v.value)}obj.maxlen=b}else if(t.value==='validthis'){if(funct['(global)']){error("Option 'validthis' can't be used in a global scope.")}else{if(v.value==='true'||v.value==='false')obj[t.value]=v.value==='true';else error("Bad option value.",v)}}else if(v.value==='true'){obj[t.value]=true}else if(v.value==='false'){obj[t.value]=false}else{error("Bad option value.",v)}t=lex.token()}else{if(o==='/*jshint'||o==='/*jslint'){error("Missing option value.",t)}obj[t.value]=false;t=v}}if(filter){assume()}}function peek(p){var i=p||0,j=0,t;while(j<=i){t=lookahead[j];if(!t){t=lookahead[j]=lex.token()}j+=1}return t}function advance(id,t){switch(token.id){case'(number)':if(nexttoken.id==='.'){warning("A dot following a number can be confused with a decimal point.",token)}break;case'-':if(nexttoken.id==='-'||nexttoken.id==='--'){warning("Confusing minusses.")}break;case'+':if(nexttoken.id==='+'||nexttoken.id==='++'){warning("Confusing plusses.")}break}if(token.type==='(string)'||token.identifier){anonname=token.value}if(id&&nexttoken.id!==id){if(t){if(nexttoken.id==='(end)'){warning("Unmatched '{a}'.",t,t.id)}else{warning("Expected '{a}' to match '{b}' from line {c} and instead saw '{d}'.",nexttoken,id,t.id,t.line,nexttoken.value)}}else if(nexttoken.type!=='(identifier)'||nexttoken.value!==id){warning("Expected '{a}' and instead saw '{b}'.",nexttoken,id,nexttoken.value)}}prevtoken=token;token=nexttoken;for(;;){nexttoken=lookahead.shift()||lex.token();if(nexttoken.id==='(end)'||nexttoken.id==='(error)'){return}if(nexttoken.type==='special'){doOption()}else{if(nexttoken.id!=='(endline)'){break}}}}function expression(rbp,initial){var left,isArray=false,isObject=false;if(nexttoken.id==='(end)')error("Unexpected early end of program.",token);advance();if(initial){anonname='anonymous';funct['(verb)']=token.value}if(initial===true&&token.fud){left=token.fud()}else{if(token.nud){left=token.nud()}else{if(nexttoken.type==='(number)'&&token.id==='.'){warning("A leading decimal point can be confused with a dot: '.{a}'.",token,nexttoken.value);advance();return token}else{error("Expected an identifier and instead saw '{a}'.",token,token.id)}}while(rbp<nexttoken.lbp){isArray=token.value==='Array';isObject=token.value==='Object';advance();if(isArray&&token.id==='('&&nexttoken.id===')')warning("Use the array literal notation [].",token);if(isObject&&token.id==='('&&nexttoken.id===')')warning("Use the object literal notation {}.",token);if(token.led){left=token.led(left)}else{error("Expected an operator and instead saw '{a}'.",token,token.id)}}}return left}function adjacent(left,right){left=left||token;right=right||nexttoken;if(option.white){if(left.character!==right.from&&left.line===right.line){left.from+=(left.character-left.from);warning("Unexpected space after '{a}'.",left,left.value)}}}function nobreak(left,right){left=left||token;right=right||nexttoken;if(option.white&&(left.character!==right.from||left.line!==right.line)){warning("Unexpected space before '{a}'.",right,right.value)}}function nospace(left,right){left=left||token;right=right||nexttoken;if(option.white&&!left.comment){if(left.line===right.line){adjacent(left,right)}}}function nonadjacent(left,right){if(option.white){left=left||token;right=right||nexttoken;if(left.line===right.line&&left.character===right.from){left.from+=(left.character-left.from);warning("Missing space after '{a}'.",left,left.value)}}}function nobreaknonadjacent(left,right){left=left||token;right=right||nexttoken;if(!option.laxbreak&&left.line!==right.line){warning("Bad line breaking before '{a}'.",right,right.id)}else if(option.white){left=left||token;right=right||nexttoken;if(left.character===right.from){left.from+=(left.character-left.from);warning("Missing space after '{a}'.",left,left.value)}}}function indentation(bias){var i;if(option.white&&nexttoken.id!=='(end)'){i=indent+(bias||0);if(nexttoken.from!==i){warning("Expected '{a}' to have an indentation at {b} instead at {c}.",nexttoken,nexttoken.value,i,nexttoken.from)}}}function nolinebreak(t){t=t||token;if(t.line!==nexttoken.line){warning("Line breaking error '{a}'.",t,t.value)}}function comma(){if(token.line!==nexttoken.line){if(!option.laxcomma){if(comma.first){warning("Comma warnings can be turned off with 'laxcomma'");comma.first=false}warning("Bad line breaking before '{a}'.",token,nexttoken.id)}}else if(!token.comment&&token.character!==nexttoken.from&&option.white){token.from+=(token.character-token.from);warning("Unexpected space after '{a}'.",token,token.value)}advance(',');nonadjacent(token,nexttoken)}function symbol(s,p){var x=syntax[s];if(!x||typeof x!=='object'){syntax[s]=x={id:s,lbp:p,value:s}}return x}function delim(s){return symbol(s,0)}function stmt(s,f){var x=delim(s);x.identifier=x.reserved=true;x.fud=f;return x}function blockstmt(s,f){var x=stmt(s,f);x.block=true;return x}function reserveName(x){var c=x.id.charAt(0);if((c>='a'&&c<='z')||(c>='A'&&c<='Z')){x.identifier=x.reserved=true}return x}function prefix(s,f){var x=symbol(s,150);reserveName(x);x.nud=(typeof f==='function')?f:function(){this.right=expression(150);this.arity='unary';if(this.id==='++'||this.id==='--'){if(option.plusplus){warning("Unexpected use of '{a}'.",this,this.id)}else if((!this.right.identifier||this.right.reserved)&&this.right.id!=='.'&&this.right.id!=='['){warning("Bad operand.",this)}}return this};return x}function type(s,f){var x=delim(s);x.type=s;x.nud=f;return x}function reserve(s,f){var x=type(s,f);x.identifier=x.reserved=true;return x}function reservevar(s,v){return reserve(s,function(){if(typeof v==='function'){v(this)}return this})}function infix(s,f,p,w){var x=symbol(s,p);reserveName(x);x.led=function(left){if(!w){nobreaknonadjacent(prevtoken,token);nonadjacent(token,nexttoken)}if(s==="in"&&left.id==="!"){warning("Confusing use of '{a}'.",left,'!')}if(typeof f==='function'){return f(left,this)}else{this.left=left;this.right=expression(p);return this}};return x}function relation(s,f){var x=symbol(s,100);x.led=function(left){nobreaknonadjacent(prevtoken,token);nonadjacent(token,nexttoken);var right=expression(100);if((left&&left.id==='NaN')||(right&&right.id==='NaN')){warning("Use the isNaN function to compare with NaN.",this)}else if(f){f.apply(this,[left,right])}if(left.id==='!'){warning("Confusing use of '{a}'.",left,'!')}if(right.id==='!'){warning("Confusing use of '{a}'.",right,'!')}this.left=left;this.right=right;return this};return x}function isPoorRelation(node){return node&&((node.type==='(number)'&&+node.value===0)||(node.type==='(string)'&&node.value==='')||(node.type==='null'&&!option.eqnull)||node.type==='true'||node.type==='false'||node.type==='undefined')}function assignop(s,f){symbol(s,20).exps=true;return infix(s,function(left,that){var l;that.left=left;if(predefined[left.value]===false&&scope[left.value]['(global)']===true){warning("Read only.",left)}else if(left['function']){warning("'{a}' is a function.",left,left.value)}if(left){if(option.esnext&&funct[left.value]==='const'){warning("Attempting to override '{a}' which is a constant",left,left.value)}if(left.id==='.'||left.id==='['){if(!left.left||left.left.value==='arguments'){warning('Bad assignment.',that)}that.right=expression(19);return that}else if(left.identifier&&!left.reserved){if(funct[left.value]==='exception'){warning("Do not assign to the exception parameter.",left)}that.right=expression(19);return that}if(left===syntax['function']){warning("Expected an identifier in an assignment and instead saw a function invocation.",token)}}error("Bad assignment.",that)},20)}function bitwise(s,f,p){var x=symbol(s,p);reserveName(x);x.led=(typeof f==='function')?f:function(left){if(option.bitwise){warning("Unexpected use of '{a}'.",this,this.id)}this.left=left;this.right=expression(p);return this};return x}function bitwiseassignop(s){symbol(s,20).exps=true;return infix(s,function(left,that){if(option.bitwise){warning("Unexpected use of '{a}'.",that,that.id)}nonadjacent(prevtoken,token);nonadjacent(token,nexttoken);if(left){if(left.id==='.'||left.id==='['||(left.identifier&&!left.reserved)){expression(19);return that}if(left===syntax['function']){warning("Expected an identifier in an assignment, and instead saw a function invocation.",token)}return that}error("Bad assignment.",that)},20)}function suffix(s,f){var x=symbol(s,150);x.led=function(left){if(option.plusplus){warning("Unexpected use of '{a}'.",this,this.id)}else if((!left.identifier||left.reserved)&&left.id!=='.'&&left.id!=='['){warning("Bad operand.",this)}this.left=left;return this};return x}function optionalidentifier(fnparam){if(nexttoken.identifier){advance();if(token.reserved&&!option.es5){if(!fnparam||token.value!=='undefined'){warning("Expected an identifier and instead saw '{a}' (a reserved word).",token,token.id)}}return token.value}}function identifier(fnparam){var i=optionalidentifier(fnparam);if(i){return i}if(token.id==='function'&&nexttoken.id==='('){warning("Missing name in function declaration.")}else{error("Expected an identifier and instead saw '{a}'.",nexttoken,nexttoken.value)}}function reachable(s){var i=0,t;if(nexttoken.id!==';'||noreach){return}for(;;){t=peek(i);if(t.reach){return}if(t.id!=='(endline)'){if(t.id==='function'){if(!option.latedef){break}warning("Inner functions should be listed at the top of the outer function.",t);break}warning("Unreachable '{a}' after '{b}'.",t,t.value,s);break}i+=1}}function statement(noindent){var i=indent,r,s=scope,t=nexttoken;if(t.id===";"){advance(";");return}if(t.identifier&&!t.reserved&&peek().id===':'){advance();advance(':');scope=Object.create(s);addlabel(t.value,'label');if(!nexttoken.labelled){warning("Label '{a}' on {b} statement.",nexttoken,t.value,nexttoken.value)}if(jx.test(t.value+':')){warning("Label '{a}' looks like a javascript url.",t,t.value)}nexttoken.label=t.value;t=nexttoken}if(!noindent){indentation()}r=expression(0,true);if(!t.block){if(!option.expr&&(!r||!r.exps)){warning("Expected an assignment or function call and instead saw an expression.",token)}else if(option.nonew&&r.id==='('&&r.left.id==='new'){warning("Do not use 'new' for side effects.")}if(nexttoken.id===','){return comma()}if(nexttoken.id!==';'){if(!option.asi){if(!option.lastsemic||nexttoken.id!=='}'||nexttoken.line!==token.line){warningAt("Missing semicolon.",token.line,token.character)}}}else{adjacent(token,nexttoken);advance(';');nonadjacent(token,nexttoken)}}indent=i;scope=s;return r}function statements(startLine){var a=[],f,p;while(!nexttoken.reach&&nexttoken.id!=='(end)'){if(nexttoken.id===';'){p=peek();if(!p||p.id!=="("){warning("Unnecessary semicolon.")}advance(';')}else{a.push(statement(startLine===nexttoken.line))}}return a}function directives(){var i,p,pn;for(;;){if(nexttoken.id==="(string)"){p=peek(0);if(p.id==="(endline)"){i=1;do{pn=peek(i);i=i+1}while(pn.id==="(endline)");if(pn.id!==";"){if(pn.id!=="(string)"&&pn.id!=="(number)"&&pn.id!=="(regexp)"&&pn.identifier!==true&&pn.id!=="}"){break}warning("Missing semicolon.",nexttoken)}else{p=pn}}else if(p.id==="}"){warning("Missing semicolon.",p)}else if(p.id!==";"){break}indentation();advance();if(directive[token.value]){warning("Unnecessary directive \"{a}\".",token,token.value)}if(token.value==="use strict"){option.newcap=true;option.undef=true}directive[token.value]=true;if(p.id===";"){advance(";")}continue}break}}function block(ordinary,stmt,isfunc){var a,b=inblock,old_indent=indent,m,s=scope,t,line,d;inblock=ordinary;if(!ordinary||!option.funcscope)scope=Object.create(scope);nonadjacent(token,nexttoken);t=nexttoken;if(nexttoken.id==='{'){advance('{');line=token.line;if(nexttoken.id!=='}'){indent+=option.indent;while(!ordinary&&nexttoken.from>indent){indent+=option.indent}if(isfunc){m={};for(d in directive){if(is_own(directive,d)){m[d]=directive[d]}}directives();if(option.strict&&funct['(context)']['(global)']){if(!m["use strict"]&&!directive["use strict"]){warning("Missing \"use strict\" statement.")}}}a=statements(line);if(isfunc){directive=m}indent-=option.indent;if(line!==nexttoken.line){indentation()}}else if(line!==nexttoken.line){indentation()}advance('}',t);indent=old_indent}else if(!ordinary){error("Expected '{a}' and instead saw '{b}'.",nexttoken,'{',nexttoken.value)}else{if(!stmt||option.curly)warning("Expected '{a}' and instead saw '{b}'.",nexttoken,'{',nexttoken.value);noreach=true;indent+=option.indent;a=[statement(nexttoken.line===token.line)];indent-=option.indent;noreach=false}funct['(verb)']=null;if(!ordinary||!option.funcscope)scope=s;inblock=b;if(ordinary&&option.noempty&&(!a||a.length===0)){warning("Empty block.")}return a}function countMember(m){if(membersOnly&&typeof membersOnly[m]!=='boolean'){warning("Unexpected /*member '{a}'.",token,m)}if(typeof member[m]==='number'){member[m]+=1}else{member[m]=1}}function note_implied(token){var name=token.value,line=token.line,a=implied[name];if(typeof a==='function'){a=false}if(!a){a=[line];implied[name]=a}else if(a[a.length-1]!==line){a.push(line)}}type('(number)',function(){return this});type('(string)',function(){return this});syntax['(identifier)']={type:'(identifier)',lbp:0,identifier:true,nud:function(){var v=this.value,s=scope[v],f;if(typeof s==='function'){s=undefined}else if(typeof s==='boolean'){f=funct;funct=functions[0];addlabel(v,'var');s=funct;funct=f}if(funct===s){switch(funct[v]){case'unused':funct[v]='var';break;case'unction':funct[v]='function';this['function']=true;break;case'function':this['function']=true;break;case'label':warning("'{a}' is a statement label.",token,v);break}}else if(funct['(global)']){if(option.undef&&typeof predefined[v]!=='boolean'){if(!(anonname==='typeof'||anonname==='delete')||(nexttoken&&(nexttoken.value==='.'||nexttoken.value==='['))){isundef(funct,"'{a}' is not defined.",token,v)}}note_implied(token)}else{switch(funct[v]){case'closure':case'function':case'var':case'unused':warning("'{a}' used out of scope.",token,v);break;case'label':warning("'{a}' is a statement label.",token,v);break;case'outer':case'global':break;default:if(s===true){funct[v]=true}else if(s===null){warning("'{a}' is not allowed.",token,v);note_implied(token)}else if(typeof s!=='object'){if(option.undef){if(!(anonname==='typeof'||anonname==='delete')||(nexttoken&&(nexttoken.value==='.'||nexttoken.value==='['))){isundef(funct,"'{a}' is not defined.",token,v)}}funct[v]=true;note_implied(token)}else{switch(s[v]){case'function':case'unction':this['function']=true;s[v]='closure';funct[v]=s['(global)']?'global':'outer';break;case'var':case'unused':s[v]='closure';funct[v]=s['(global)']?'global':'outer';break;case'closure':case'parameter':funct[v]=s['(global)']?'global':'outer';break;case'label':warning("'{a}' is a statement label.",token,v)}}}}return this},led:function(){error("Expected an operator and instead saw '{a}'.",nexttoken,nexttoken.value)}};type('(regexp)',function(){return this});delim('(endline)');delim('(begin)');delim('(end)').reach=true;delim('</').reach=true;delim('<!');delim('<!--');delim('-->');delim('(error)').reach=true;delim('}').reach=true;delim(')');delim(']');delim('"').reach=true;delim("'").reach=true;delim(';');delim(':').reach=true;delim(',');delim('#');delim('@');reserve('else');reserve('case').reach=true;reserve('catch');reserve('default').reach=true;reserve('finally');reservevar('arguments',function(x){if(directive['use strict']&&funct['(global)']){warning("Strict violation.",x)}});reservevar('eval');reservevar('false');reservevar('Infinity');reservevar('NaN');reservevar('null');reservevar('this',function(x){if(directive['use strict']&&!option.validthis&&((funct['(statement)']&&funct['(name)'].charAt(0)>'Z')||funct['(global)'])){warning("Possible strict violation.",x)}});reservevar('true');reservevar('undefined');assignop('=','assign',20);assignop('+=','assignadd',20);assignop('-=','assignsub',20);assignop('*=','assignmult',20);assignop('/=','assigndiv',20).nud=function(){error("A regular expression literal can be confused with '/='.")};assignop('%=','assignmod',20);bitwiseassignop('&=','assignbitand',20);bitwiseassignop('|=','assignbitor',20);bitwiseassignop('^=','assignbitxor',20);bitwiseassignop('<<=','assignshiftleft',20);bitwiseassignop('>>=','assignshiftright',20);bitwiseassignop('>>>=','assignshiftrightunsigned',20);infix('?',function(left,that){that.left=left;that.right=expression(10);advance(':');that['else']=expression(10);return that},30);infix('||','or',40);infix('&&','and',50);bitwise('|','bitor',70);bitwise('^','bitxor',80);bitwise('&','bitand',90);relation('==',function(left,right){var eqnull=option.eqnull&&(left.value==='null'||right.value==='null');if(!eqnull&&option.eqeqeq)warning("Expected '{a}' and instead saw '{b}'.",this,'===','==');else if(isPoorRelation(left))warning("Use '{a}' to compare with '{b}'.",this,'===',left.value);else if(isPoorRelation(right))warning("Use '{a}' to compare with '{b}'.",this,'===',right.value);return this});relation('===');relation('!=',function(left,right){var eqnull=option.eqnull&&(left.value==='null'||right.value==='null');if(!eqnull&&option.eqeqeq){warning("Expected '{a}' and instead saw '{b}'.",this,'!==','!=')}else if(isPoorRelation(left)){warning("Use '{a}' to compare with '{b}'.",this,'!==',left.value)}else if(isPoorRelation(right)){warning("Use '{a}' to compare with '{b}'.",this,'!==',right.value)}return this});relation('!==');relation('<');relation('>');relation('<=');relation('>=');bitwise('<<','shiftleft',120);bitwise('>>','shiftright',120);bitwise('>>>','shiftrightunsigned',120);infix('in','in',120);infix('instanceof','instanceof',120);infix('+',function(left,that){var right=expression(130);if(left&&right&&left.id==='(string)'&&right.id==='(string)'){left.value+=right.value;left.character=right.character;if(!option.scripturl&&jx.test(left.value)){warning("JavaScript URL.",left)}return left}that.left=left;that.right=right;return that},130);prefix('+','num');prefix('+++',function(){warning("Confusing pluses.");this.right=expression(150);this.arity='unary';return this});infix('+++',function(left){warning("Confusing pluses.");this.left=left;this.right=expression(130);return this},130);infix('-','sub',130);prefix('-','neg');prefix('---',function(){warning("Confusing minuses.");this.right=expression(150);this.arity='unary';return this});infix('---',function(left){warning("Confusing minuses.");this.left=left;this.right=expression(130);return this},130);infix('*','mult',140);infix('/','div',140);infix('%','mod',140);suffix('++','postinc');prefix('++','preinc');syntax['++'].exps=true;suffix('--','postdec');prefix('--','predec');syntax['--'].exps=true;prefix('delete',function(){var p=expression(0);if(!p||(p.id!=='.'&&p.id!=='[')){warning("Variables should not be deleted.")}this.first=p;return this}).exps=true;prefix('~',function(){if(option.bitwise){warning("Unexpected '{a}'.",this,'~')}expression(150);return this});prefix('!',function(){this.right=expression(150);this.arity='unary';if(bang[this.right.id]===true){warning("Confusing use of '{a}'.",this,'!')}return this});prefix('typeof','typeof');prefix('new',function(){var c=expression(155),i;if(c&&c.id!=='function'){if(c.identifier){c['new']=true;switch(c.value){case'Number':case'String':case'Boolean':case'Math':case'JSON':warning("Do not use {a} as a constructor.",token,c.value);break;case'Function':if(!option.evil){warning("The Function constructor is eval.")}break;case'Date':case'RegExp':break;default:if(c.id!=='function'){i=c.value.substr(0,1);if(option.newcap&&(i<'A'||i>'Z')){warning("A constructor name should start with an uppercase letter.",token)}}}}else{if(c.id!=='.'&&c.id!=='['&&c.id!=='('){warning("Bad constructor.",token)}}}else{if(!option.supernew)warning("Weird construction. Delete 'new'.",this)}adjacent(token,nexttoken);if(nexttoken.id!=='('&&!option.supernew){warning("Missing '()' invoking a constructor.")}this.first=c;return this});syntax['new'].exps=true;prefix('void').exps=true;infix('.',function(left,that){adjacent(prevtoken,token);nobreak();var m=identifier();if(typeof m==='string'){countMember(m)}that.left=left;that.right=m;if(left&&left.value==='arguments'&&(m==='callee'||m==='caller')){if(option.noarg)warning("Avoid arguments.{a}.",left,m);else if(directive['use strict'])error('Strict violation.')}else if(!option.evil&&left&&left.value==='document'&&(m==='write'||m==='writeln')){warning("document.write can be a form of eval.",left)}if(!option.evil&&(m==='eval'||m==='execScript')){warning('eval is evil.')}return that},160,true);infix('(',function(left,that){if(prevtoken.id!=='}'&&prevtoken.id!==')'){nobreak(prevtoken,token)}nospace();if(option.immed&&!left.immed&&left.id==='function'){warning("Wrap an immediate function invocation in parentheses "+"to assist the reader in understanding that the expression "+"is the result of a function, and not the function itself.")}var n=0,p=[];if(left){if(left.type==='(identifier)'){if(left.value.match(/^[A-Z]([A-Z0-9_$]*[a-z][A-Za-z0-9_$]*)?$/)){if(left.value!=='Number'&&left.value!=='String'&&left.value!=='Boolean'&&left.value!=='Date'){if(left.value==='Math'){warning("Math is not a function.",left)}else if(option.newcap){warning("Missing 'new' prefix when invoking a constructor.",left)}}}}}if(nexttoken.id!==')'){for(;;){p[p.length]=expression(10);n+=1;if(nexttoken.id!==','){break}comma()}}advance(')');nospace(prevtoken,token);if(typeof left==='object'){if(left.value==='parseInt'&&n===1){warning("Missing radix parameter.",left)}if(!option.evil){if(left.value==='eval'||left.value==='Function'||left.value==='execScript'){warning("eval is evil.",left)}else if(p[0]&&p[0].id==='(string)'&&(left.value==='setTimeout'||left.value==='setInterval')){warning("Implied eval is evil. Pass a function instead of a string.",left)}}if(!left.identifier&&left.id!=='.'&&left.id!=='['&&left.id!=='('&&left.id!=='&&'&&left.id!=='||'&&left.id!=='?'){warning("Bad invocation.",left)}}that.left=left;return that},155,true).exps=true;prefix('(',function(){nospace();if(nexttoken.id==='function'){nexttoken.immed=true}var v=expression(0);advance(')',this);nospace(prevtoken,token);if(option.immed&&v.id==='function'){if(nexttoken.id==='('||(nexttoken.id==='.'&&(peek().value==='call'||peek().value==='apply'))){warning("Move the invocation into the parens that contain the function.",nexttoken)}else{warning("Do not wrap function literals in parens unless they are to be immediately invoked.",this)}}return v});infix('[',function(left,that){nobreak(prevtoken,token);nospace();var e=expression(0),s;if(e&&e.type==='(string)'){if(!option.evil&&(e.value==='eval'||e.value==='execScript')){warning("eval is evil.",that)}countMember(e.value);if(!option.sub&&ix.test(e.value)){s=syntax[e.value];if(!s||!s.reserved){warning("['{a}'] is better written in dot notation.",e,e.value)}}}advance(']',that);nospace(prevtoken,token);that.left=left;that.right=e;return that},160,true);prefix('[',function(){var b=token.line!==nexttoken.line;this.first=[];if(b){indent+=option.indent;if(nexttoken.from===indent+option.indent){indent+=option.indent}}while(nexttoken.id!=='(end)'){while(nexttoken.id===','){warning("Extra comma.");advance(',')}if(nexttoken.id===']'){break}if(b&&token.line!==nexttoken.line){indentation()}this.first.push(expression(10));if(nexttoken.id===','){comma();if(nexttoken.id===']'&&!option.es5){warning("Extra comma.",token);break}}else{break}}if(b){indent-=option.indent;indentation()}advance(']',this);return this},160);function property_name(){var id=optionalidentifier(true);if(!id){if(nexttoken.id==='(string)'){id=nexttoken.value;advance()}else if(nexttoken.id==='(number)'){id=nexttoken.value.toString();advance()}}return id}function functionparams(){var i,t=nexttoken,p=[];advance('(');nospace();if(nexttoken.id===')'){advance(')');return}for(;;){i=identifier(true);p.push(i);addlabel(i,'parameter');if(nexttoken.id===','){comma()}else{advance(')',t);nospace(prevtoken,token);return p}}}function doFunction(i,statement){var f,oldOption=option,oldScope=scope;option=Object.create(option);scope=Object.create(scope);funct={'(name)':i||'"'+anonname+'"','(line)':nexttoken.line,'(context)':funct,'(breakage)':0,'(loopage)':0,'(scope)':scope,'(statement)':statement};f=funct;token.funct=funct;functions.push(funct);if(i){addlabel(i,'function')}funct['(params)']=functionparams();block(false,false,true);scope=oldScope;option=oldOption;funct['(last)']=token.line;funct=funct['(context)'];return f}(function(x){x.nud=function(){var b,f,i,j,p,t;var props={};function saveProperty(name,token){if(props[name]&&is_own(props,name))warning("Duplicate member '{a}'.",nexttoken,i);else props[name]={};props[name].basic=true;props[name].basicToken=token}function saveSetter(name,token){if(props[name]&&is_own(props,name)){if(props[name].basic||props[name].setter)warning("Duplicate member '{a}'.",nexttoken,i)}else{props[name]={}}props[name].setter=true;props[name].setterToken=token}function saveGetter(name){if(props[name]&&is_own(props,name)){if(props[name].basic||props[name].getter)warning("Duplicate member '{a}'.",nexttoken,i)}else{props[name]={}}props[name].getter=true;props[name].getterToken=token}b=token.line!==nexttoken.line;if(b){indent+=option.indent;if(nexttoken.from===indent+option.indent){indent+=option.indent}}for(;;){if(nexttoken.id==='}'){break}if(b){indentation()}if(nexttoken.value==='get'&&peek().id!==':'){advance('get');if(!option.es5){error("get/set are ES5 features.")}i=property_name();if(!i){error("Missing property name.")}saveGetter(i);t=nexttoken;adjacent(token,nexttoken);f=doFunction();p=f['(params)'];if(p){warning("Unexpected parameter '{a}' in get {b} function.",t,p[0],i)}adjacent(token,nexttoken)}else if(nexttoken.value==='set'&&peek().id!==':'){advance('set');if(!option.es5){error("get/set are ES5 features.")}i=property_name();if(!i){error("Missing property name.")}saveSetter(i,nexttoken);t=nexttoken;adjacent(token,nexttoken);f=doFunction();p=f['(params)'];if(!p||p.length!==1){warning("Expected a single parameter in set {a} function.",t,i)}}else{i=property_name();saveProperty(i,nexttoken);if(typeof i!=='string'){break}advance(':');nonadjacent(token,nexttoken);expression(10)}countMember(i);if(nexttoken.id===','){comma();if(nexttoken.id===','){warning("Extra comma.",token)}else if(nexttoken.id==='}'&&!option.es5){warning("Extra comma.",token)}}else{break}}if(b){indent-=option.indent;indentation()}advance('}',this);if(option.es5){for(var name in props){if(is_own(props,name)&&props[name].setter&&!props[name].getter){warning("Setter is defined without getter.",props[name].setterToken)}}}return this};x.fud=function(){error("Expected to see a statement and instead saw a block.",token)}}(delim('{')));useESNextSyntax=function(){var conststatement=stmt('const',function(prefix){var id,name,value;this.first=[];for(;;){nonadjacent(token,nexttoken);id=identifier();if(funct[id]==="const"){warning("const '"+id+"' has already been declared")}if(funct['(global)']&&predefined[id]===false){warning("Redefinition of '{a}'.",token,id)}addlabel(id,'const');if(prefix){break}name=token;this.first.push(token);if(nexttoken.id!=="="){warning("const "+"'{a}' is initialized to 'undefined'.",token,id)}if(nexttoken.id==='='){nonadjacent(token,nexttoken);advance('=');nonadjacent(token,nexttoken);if(nexttoken.id==='undefined'){warning("It is not necessary to initialize "+"'{a}' to 'undefined'.",token,id)}if(peek(0).id==='='&&nexttoken.identifier){error("Constant {a} was not declared correctly.",nexttoken,nexttoken.value)}value=expression(0);name.first=value}if(nexttoken.id!==','){break}comma()}return this});conststatement.exps=true};var varstatement=stmt('var',function(prefix){var id,name,value;if(funct['(onevar)']&&option.onevar){warning("Too many var statements.")}else if(!funct['(global)']){funct['(onevar)']=true}this.first=[];for(;;){nonadjacent(token,nexttoken);id=identifier();if(option.esnext&&funct[id]==="const"){warning("const '"+id+"' has already been declared")}if(funct['(global)']&&predefined[id]===false){warning("Redefinition of '{a}'.",token,id)}addlabel(id,'unused');if(prefix){break}name=token;this.first.push(token);if(nexttoken.id==='='){nonadjacent(token,nexttoken);advance('=');nonadjacent(token,nexttoken);if(nexttoken.id==='undefined'){warning("It is not necessary to initialize '{a}' to 'undefined'.",token,id)}if(peek(0).id==='='&&nexttoken.identifier){error("Variable {a} was not declared correctly.",nexttoken,nexttoken.value)}value=expression(0);name.first=value}if(nexttoken.id!==','){break}comma()}return this});varstatement.exps=true;blockstmt('function',function(){if(inblock){warning("Function declarations should not be placed in blocks. "+"Use a function expression or move the statement to the top of "+"the outer function.",token)}var i=identifier();if(option.esnext&&funct[i]==="const"){warning("const '"+i+"' has already been declared")}adjacent(token,nexttoken);addlabel(i,'unction');doFunction(i,true);if(nexttoken.id==='('&&nexttoken.line===token.line){error("Function declarations are not invocable. Wrap the whole function invocation in parens.")}return this});prefix('function',function(){var i=optionalidentifier();if(i){adjacent(token,nexttoken)}else{nonadjacent(token,nexttoken)}doFunction(i);if(!option.loopfunc&&funct['(loopage)']){warning("Don't make functions within a loop.")}return this});blockstmt('if',function(){var t=nexttoken;advance('(');nonadjacent(this,t);nospace();expression(20);if(nexttoken.id==='='){if(!option.boss)warning("Expected a conditional expression and instead saw an assignment.");advance('=');expression(20)}advance(')',t);nospace(prevtoken,token);block(true,true);if(nexttoken.id==='else'){nonadjacent(token,nexttoken);advance('else');if(nexttoken.id==='if'||nexttoken.id==='switch'){statement(true)}else{block(true,true)}}return this});blockstmt('try',function(){var b,e,s;block(false);if(nexttoken.id==='catch'){advance('catch');nonadjacent(token,nexttoken);advance('(');s=scope;scope=Object.create(s);e=nexttoken.value;if(nexttoken.type!=='(identifier)'){warning("Expected an identifier and instead saw '{a}'.",nexttoken,e)}else{addlabel(e,'exception')}advance();advance(')');block(false);b=true;scope=s}if(nexttoken.id==='finally'){advance('finally');block(false);return}else if(!b){error("Expected '{a}' and instead saw '{b}'.",nexttoken,'catch',nexttoken.value)}return this});blockstmt('while',function(){var t=nexttoken;funct['(breakage)']+=1;funct['(loopage)']+=1;advance('(');nonadjacent(this,t);nospace();expression(20);if(nexttoken.id==='='){if(!option.boss)warning("Expected a conditional expression and instead saw an assignment.");advance('=');expression(20)}advance(')',t);nospace(prevtoken,token);block(true,true);funct['(breakage)']-=1;funct['(loopage)']-=1;return this}).labelled=true;blockstmt('with',function(){var t=nexttoken;if(directive['use strict']){error("'with' is not allowed in strict mode.",token)}else if(!option.withstmt){warning("Don't use 'with'.",token)}advance('(');nonadjacent(this,t);nospace();expression(0);advance(')',t);nospace(prevtoken,token);block(true,true);return this});blockstmt('switch',function(){var t=nexttoken,g=false;funct['(breakage)']+=1;advance('(');nonadjacent(this,t);nospace();this.condition=expression(20);advance(')',t);nospace(prevtoken,token);nonadjacent(token,nexttoken);t=nexttoken;advance('{');nonadjacent(token,nexttoken);indent+=option.indent;this.cases=[];for(;;){switch(nexttoken.id){case'case':switch(funct['(verb)']){case'break':case'case':case'continue':case'return':case'switch':case'throw':break;default:if(!ft.test(lines[nexttoken.line-2])){warning("Expected a 'break' statement before 'case'.",token)}}indentation(-option.indent);advance('case');this.cases.push(expression(20));g=true;advance(':');funct['(verb)']='case';break;case'default':switch(funct['(verb)']){case'break':case'continue':case'return':case'throw':break;default:if(!ft.test(lines[nexttoken.line-2])){warning("Expected a 'break' statement before 'default'.",token)}}indentation(-option.indent);advance('default');g=true;advance(':');break;case'}':indent-=option.indent;indentation();advance('}',t);if(this.cases.length===1||this.condition.id==='true'||this.condition.id==='false'){if(!option.onecase)warning("This 'switch' should be an 'if'.",this)}funct['(breakage)']-=1;funct['(verb)']=undefined;return;case'(end)':error("Missing '{a}'.",nexttoken,'}');return;default:if(g){switch(token.id){case',':error("Each value should have its own case label.");return;case':':g=false;statements();break;default:error("Missing ':' on a case clause.",token);return}}else{if(token.id===':'){advance(':');error("Unexpected '{a}'.",token,':');statements()}else{error("Expected '{a}' and instead saw '{b}'.",nexttoken,'case',nexttoken.value);return}}}}}).labelled=true;stmt('debugger',function(){if(!option.debug){warning("All 'debugger' statements should be removed.")}return this}).exps=true;(function(){var x=stmt('do',function(){funct['(breakage)']+=1;funct['(loopage)']+=1;this.first=block(true);advance('while');var t=nexttoken;nonadjacent(token,t);advance('(');nospace();expression(20);if(nexttoken.id==='='){if(!option.boss)warning("Expected a conditional expression and instead saw an assignment.");advance('=');expression(20)}advance(')',t);nospace(prevtoken,token);funct['(breakage)']-=1;funct['(loopage)']-=1;return this});x.labelled=true;x.exps=true}());blockstmt('for',function(){var s,t=nexttoken;funct['(breakage)']+=1;funct['(loopage)']+=1;advance('(');nonadjacent(this,t);nospace();if(peek(nexttoken.id==='var'?1:0).id==='in'){if(nexttoken.id==='var'){advance('var');varstatement.fud.call(varstatement,true)}else{switch(funct[nexttoken.value]){case'unused':funct[nexttoken.value]='var';break;case'var':break;default:warning("Bad for in variable '{a}'.",nexttoken,nexttoken.value)}advance()}advance('in');expression(20);advance(')',t);s=block(true,true);if(option.forin&&s&&(s.length>1||typeof s[0]!=='object'||s[0].value!=='if')){warning("The body of a for in should be wrapped in an if statement to filter "+"unwanted properties from the prototype.",this)}funct['(breakage)']-=1;funct['(loopage)']-=1;return this}else{if(nexttoken.id!==';'){if(nexttoken.id==='var'){advance('var');varstatement.fud.call(varstatement)}else{for(;;){expression(0,'for');if(nexttoken.id!==','){break}comma()}}}nolinebreak(token);advance(';');if(nexttoken.id!==';'){expression(20);if(nexttoken.id==='='){if(!option.boss)warning("Expected a conditional expression and instead saw an assignment.");advance('=');expression(20)}}nolinebreak(token);advance(';');if(nexttoken.id===';'){error("Expected '{a}' and instead saw '{b}'.",nexttoken,')',';')}if(nexttoken.id!==')'){for(;;){expression(0,'for');if(nexttoken.id!==','){break}comma()}}advance(')',t);nospace(prevtoken,token);block(true,true);funct['(breakage)']-=1;funct['(loopage)']-=1;return this}}).labelled=true;stmt('break',function(){var v=nexttoken.value;if(funct['(breakage)']===0)warning("Unexpected '{a}'.",nexttoken,this.value);if(!option.asi)nolinebreak(this);if(nexttoken.id!==';'){if(token.line===nexttoken.line){if(funct[v]!=='label'){warning("'{a}' is not a statement label.",nexttoken,v)}else if(scope[v]!==funct){warning("'{a}' is out of scope.",nexttoken,v)}this.first=nexttoken;advance()}}reachable('break');return this}).exps=true;stmt('continue',function(){var v=nexttoken.value;if(funct['(breakage)']===0)warning("Unexpected '{a}'.",nexttoken,this.value);if(!option.asi)nolinebreak(this);if(nexttoken.id!==';'){if(token.line===nexttoken.line){if(funct[v]!=='label'){warning("'{a}' is not a statement label.",nexttoken,v)}else if(scope[v]!==funct){warning("'{a}' is out of scope.",nexttoken,v)}this.first=nexttoken;advance()}}else if(!funct['(loopage)']){warning("Unexpected '{a}'.",nexttoken,this.value)}reachable('continue');return this}).exps=true;stmt('return',function(){if(this.line===nexttoken.line){if(nexttoken.id==='(regexp)')warning("Wrap the /regexp/ literal in parens to disambiguate the slash operator.");if(nexttoken.id!==';'&&!nexttoken.reach){nonadjacent(token,nexttoken);if(peek().value==="="&&!option.boss){warningAt("Did you mean to return a conditional instead of an assignment?",token.line,token.character+1)}this.first=expression(0)}}else if(!option.asi){nolinebreak(this)}reachable('return');return this}).exps=true;stmt('throw',function(){nolinebreak(this);nonadjacent(token,nexttoken);this.first=expression(20);reachable('throw');return this}).exps=true;reserve('class');reserve('const');reserve('enum');reserve('export');reserve('extends');reserve('import');reserve('super');reserve('let');reserve('yield');reserve('implements');reserve('interface');reserve('package');reserve('private');reserve('protected');reserve('public');reserve('static');function jsonValue(){function jsonObject(){var o={},t=nexttoken;advance('{');if(nexttoken.id!=='}'){for(;;){if(nexttoken.id==='(end)'){error("Missing '}' to match '{' from line {a}.",nexttoken,t.line)}else if(nexttoken.id==='}'){warning("Unexpected comma.",token);break}else if(nexttoken.id===','){error("Unexpected comma.",nexttoken)}else if(nexttoken.id!=='(string)'){warning("Expected a string and instead saw {a}.",nexttoken,nexttoken.value)}if(o[nexttoken.value]===true){warning("Duplicate key '{a}'.",nexttoken,nexttoken.value)}else if((nexttoken.value==='__proto__'&&!option.proto)||(nexttoken.value==='__iterator__'&&!option.iterator)){warning("The '{a}' key may produce unexpected results.",nexttoken,nexttoken.value)}else{o[nexttoken.value]=true}advance();advance(':');jsonValue();if(nexttoken.id!==','){break}advance(',')}}advance('}')}function jsonArray(){var t=nexttoken;advance('[');if(nexttoken.id!==']'){for(;;){if(nexttoken.id==='(end)'){error("Missing ']' to match '[' from line {a}.",nexttoken,t.line)}else if(nexttoken.id===']'){warning("Unexpected comma.",token);break}else if(nexttoken.id===','){error("Unexpected comma.",nexttoken)}jsonValue();if(nexttoken.id!==','){break}advance(',')}}advance(']')}switch(nexttoken.id){case'{':jsonObject();break;case'[':jsonArray();break;case'true':case'false':case'null':case'(number)':case'(string)':advance();break;case'-':advance('-');if(token.character!==nexttoken.from){warning("Unexpected space after '-'.",token)}adjacent(token,nexttoken);advance('(number)');break;default:error("Expected a JSON value.",nexttoken)}}var itself=function(s,o,g){var a,i,k;JSHINT.errors=[];JSHINT.undefs=[];predefined=Object.create(standard);combine(predefined,g||{});if(o){a=o.predef;if(a){if(Array.isArray(a)){for(i=0;i<a.length;i+=1){predefined[a[i]]=true}}else if(typeof a==='object'){k=Object.keys(a);for(i=0;i<k.length;i+=1){predefined[k[i]]=!!a[k[i]]}}}option=o}else{option={}}option.indent=option.indent||4;option.maxerr=option.maxerr||50;tab='';for(i=0;i<option.indent;i+=1){tab+=' '}indent=1;global=Object.create(predefined);scope=global;funct={'(global)':true,'(name)':'(global)','(scope)':scope,'(breakage)':0,'(loopage)':0};functions=[funct];urls=[];stack=null;member={};membersOnly=null;implied={};inblock=false;lookahead=[];jsonmode=false;warnings=0;lex.init(s);prereg=true;directive={};prevtoken=token=nexttoken=syntax['(begin)'];for(var name in o){if(is_own(o,name)){checkOption(name,token)}}assume();combine(predefined,g||{});comma.first=true;try{advance();switch(nexttoken.id){case'{':case'[':option.laxbreak=true;jsonmode=true;jsonValue();break;default:directives();if(directive["use strict"]&&!option.globalstrict){warning("Use the function form of \"use strict\".",prevtoken)}statements()}advance('(end)');var markDefined=function(name,context){do{if(typeof context[name]==='string'){if(context[name]==='unused')context[name]='var';else if(context[name]==='unction')context[name]='closure';return true}context=context['(context)']}while(context);return false};var clearImplied=function(name,line){if(!implied[name])return;var newImplied=[];for(var i=0;i<implied[name].length;i+=1){if(implied[name][i]!==line)newImplied.push(implied[name][i])}if(newImplied.length===0)delete implied[name];else implied[name]=newImplied};for(i=0;i<JSHINT.undefs.length;i+=1){k=JSHINT.undefs[i].slice(0);if(markDefined(k[2].value,k[0])){clearImplied(k[2].value,k[2].line)}else{warning.apply(warning,k.slice(1))}}}catch(e){if(e){var nt=nexttoken||{};JSHINT.errors.push({raw:e.raw,reason:e.message,line:e.line||nt.line,character:e.character||nt.from},null)}}return JSHINT.errors.length===0};itself.data=function(){var data={functions:[],options:option},fu,globals,implieds=[],f,i,j,members=[],n,unused=[],v;if(itself.errors.length){data.errors=itself.errors}if(jsonmode){data.json=true}for(n in implied){if(is_own(implied,n)){implieds.push({name:n,line:implied[n]})}}if(implieds.length>0){data.implieds=implieds}if(urls.length>0){data.urls=urls}globals=Object.keys(scope);if(globals.length>0){data.globals=globals}for(i=1;i<functions.length;i+=1){f=functions[i];fu={};for(j=0;j<functionicity.length;j+=1){fu[functionicity[j]]=[]}for(n in f){if(is_own(f,n)&&n.charAt(0)!=='('){v=f[n];if(v==='unction'){v='unused'}if(Array.isArray(fu[v])){fu[v].push(n);if(v==='unused'){unused.push({name:n,line:f['(line)'],'function':f['(name)']})}}}}for(j=0;j<functionicity.length;j+=1){if(fu[functionicity[j]].length===0){delete fu[functionicity[j]]}}fu.name=f['(name)'];fu.param=f['(params)'];fu.line=f['(line)'];fu.last=f['(last)'];data.functions.push(fu)}if(unused.length>0){data.unused=unused}members=[];for(n in member){if(typeof member[n]==='number'){data.member=member;break}}return data};itself.report=function(option){var data=itself.data();var a=[],c,e,err,f,i,k,l,m='',n,o=[],s;function detail(h,array){var b,i,singularity;if(array){o.push('<div><i>'+h+'</i> ');array=array.sort();for(i=0;i<array.length;i+=1){if(array[i]!==singularity){singularity=array[i];o.push((b?', ':'')+singularity);b=true}}o.push('</div>')}}if(data.errors||data.implieds||data.unused){err=true;o.push('<div id=errors><i>Error:</i>');if(data.errors){for(i=0;i<data.errors.length;i+=1){c=data.errors[i];if(c){e=c.evidence||'';o.push('<p>Problem'+(isFinite(c.line)?' at line '+c.line+' character '+c.character:'')+': '+c.reason.entityify()+'</p><p class=evidence>'+(e&&(e.length>80?e.slice(0,77)+'...':e).entityify())+'</p>')}}}if(data.implieds){s=[];for(i=0;i<data.implieds.length;i+=1){s[i]='<code>'+data.implieds[i].name+'</code>&nbsp;<i>'+data.implieds[i].line+'</i>'}o.push('<p><i>Implied global:</i> '+s.join(', ')+'</p>')}if(data.unused){s=[];for(i=0;i<data.unused.length;i+=1){s[i]='<code><u>'+data.unused[i].name+'</u></code>&nbsp;<i>'+data.unused[i].line+'</i> <code>'+data.unused[i]['function']+'</code>'}o.push('<p><i>Unused variable:</i> '+s.join(', ')+'</p>')}if(data.json){o.push('<p>JSON: bad.</p>')}o.push('</div>')}if(!option){o.push('<br><div id=functions>');if(data.urls){detail("URLs<br>",data.urls,'<br>')}if(data.json&&!err){o.push('<p>JSON: good.</p>')}else if(data.globals){o.push('<div><i>Global</i> '+data.globals.sort().join(', ')+'</div>')}else{o.push('<div><i>No new global variables introduced.</i></div>')}for(i=0;i<data.functions.length;i+=1){f=data.functions[i];o.push('<br><div class=function><i>'+f.line+'-'+f.last+'</i> '+(f.name||'')+'('+(f.param?f.param.join(', '):'')+')</div>');detail('<big><b>Unused</b></big>',f.unused);detail('Closure',f.closure);detail('Variable',f['var']);detail('Exception',f.exception);detail('Outer',f.outer);detail('Global',f.global);detail('Label',f.label)}if(data.member){a=Object.keys(data.member);if(a.length){a=a.sort();m='<br><pre id=members>/*members ';l=10;for(i=0;i<a.length;i+=1){k=a[i];n=k.name();if(l+n.length>72){o.push(m+'<br>');m='    ';l=1}l+=n.length+2;if(data.member[k]===1){n='<i>'+n+'</i>'}if(i<a.length-1){n+=', '}m+=n}o.push(m+'<br>*/</pre>')}o.push('</div>')}}return o.join('')};itself.jshint=itself;return itself}());if(typeof exports==='object'&&exports)exports.JSHINT=JSHINT;}.call(window));

/***/ },
/* 15 */
/***/ function(module, exports) {

	/*** IMPORTS FROM imports-loader ***/
	(function() {

	var GLOBAL = this;

	// Domain Public by Eric Wendelin http://eriwen.com/ (2008)
	//                  Luke Smith http://lucassmith.name/ (2008)
	//                  Loic Dachary <loic@dachary.org> (2008)
	//                  Johan Euphrosine <proppy@aminche.com> (2008)
	//                  Oyvind Sean Kinsey http://kinsey.no/blog (2010)
	//                  Victor Homyakov <victor-homyakov@users.sourceforge.net> (2010)

	/**
	 * Main function giving a function stack trace with a forced or passed in Error
	 *
	 * @cfg {Error} e The error to create a stacktrace from (optional)
	 * @cfg {Boolean} guess If we should try to resolve the names of anonymous functions
	 * @return {Array} of Strings with functions, lines, files, and arguments where possible
	 */
	GLOBAL.printStackTrace = function(options) {
	    options = options || {guess: true};
	    var ex = options.e || null, guess = !!options.guess;
	    var p = new GLOBAL.printStackTrace.implementation(), result = p.run(ex);
	    return (guess) ? p.guessAnonymousFunctions(result) : result;
	}

	GLOBAL.printStackTrace.implementation = function() {
	};

	GLOBAL.printStackTrace.implementation.prototype = {
	    /**
	     * @param {Error} ex The error to create a stacktrace from (optional)
	     * @param {String} mode Forced mode (optional, mostly for unit tests)
	     */
	    run: function(ex, mode) {
	        ex = ex || this.createException();
	        // examine exception properties w/o debugger
	        //for (var prop in ex) {alert("Ex['" + prop + "']=" + ex[prop]);}
	        mode = mode || this.mode(ex);
	        if (mode === 'other') {
	            return this.other(arguments.callee);
	        } else {
	            return this[mode](ex);
	        }
	    },

	    createException: function() {
	        try {
	            this.undef();
	        } catch (e) {
	            return e;
	        }
	    },

	    /**
	     * Mode could differ for different exception, e.g.
	     * exceptions in Chrome may or may not have arguments or stack.
	     *
	     * @return {String} mode of operation for the exception
	     */
	    mode: function(e) {
	        if (e['arguments'] && e.stack) {
	            return 'chrome';
	        } else if (e.stack && e.sourceURL) {
	            return 'safari';
	        } else if (e.stack && e.number) {
	            return 'ie';
	        } else if (typeof e.message === 'string' && typeof window !== 'undefined' && window.opera) {
	            // e.message.indexOf("Backtrace:") > -1 -> opera
	            // !e.stacktrace -> opera
	            if (!e.stacktrace) {
	                return 'opera9'; // use e.message
	            }
	            // 'opera#sourceloc' in e -> opera9, opera10a
	            if (e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
	                return 'opera9'; // use e.message
	            }
	            // e.stacktrace && !e.stack -> opera10a
	            if (!e.stack) {
	                return 'opera10a'; // use e.stacktrace
	            }
	            // e.stacktrace && e.stack -> opera10b
	            if (e.stacktrace.indexOf("called from line") < 0) {
	                return 'opera10b'; // use e.stacktrace, format differs from 'opera10a'
	            }
	            // e.stacktrace && e.stack -> opera11
	            return 'opera11'; // use e.stacktrace, format differs from 'opera10a', 'opera10b'
	        } else if (e.stack) {
	            return 'firefox';
	        }
	        return 'other';
	    },

	    /**
	     * Given a context, function name, and callback function, overwrite it so that it calls
	     * printStackTrace() first with a callback and then runs the rest of the body.
	     *
	     * @param {Object} context of execution (e.g. window)
	     * @param {String} functionName to instrument
	     * @param {Function} function to call with a stack trace on invocation
	     */
	    instrumentFunction: function(context, functionName, callback) {
	        context = context || window;
	        var original = context[functionName];
	        context[functionName] = function instrumented() {
	            callback.call(this, GLOBAL.printStackTrace().slice(4));
	            return context[functionName]._instrumented.apply(this, arguments);
	        };
	        context[functionName]._instrumented = original;
	    },

	    /**
	     * Given a context and function name of a function that has been
	     * instrumented, revert the function to it's original (non-instrumented)
	     * state.
	     *
	     * @param {Object} context of execution (e.g. window)
	     * @param {String} functionName to de-instrument
	     */
	    deinstrumentFunction: function(context, functionName) {
	        if (context[functionName].constructor === Function &&
	                context[functionName]._instrumented &&
	                context[functionName]._instrumented.constructor === Function) {
	            context[functionName] = context[functionName]._instrumented;
	        }
	    },

	    /**
	     * Given an Error object, return a formatted Array based on Chrome's stack string.
	     *
	     * @param e - Error object to inspect
	     * @return Array<String> of function calls, files and line numbers
	     */
	    chrome: function(e) {
	        var stack = (e.stack + '\n').replace(/^\S[^\(]+?[\n$]/gm, '').
	          replace(/^\s+(at eval )?at\s+/gm, '').
	          replace(/^([^\(]+?)([\n$])/gm, '{anonymous}()@$1$2').
	          replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm, '{anonymous}()@$1').split('\n');
	        stack.pop();
	        return stack;
	    },

	    /**
	     * Given an Error object, return a formatted Array based on Safari's stack string.
	     *
	     * @param e - Error object to inspect
	     * @return Array<String> of function calls, files and line numbers
	     */
	    safari: function(e) {
	        return e.stack.replace(/\[native code\]\n/m, '')
	            .replace(/^(?=\w+Error\:).*$\n/m, '')
	            .replace(/^@/gm, '{anonymous}()@')
	            .split('\n');
	    },

	    /**
	     * Given an Error object, return a formatted Array based on IE's stack string.
	     *
	     * @param e - Error object to inspect
	     * @return Array<String> of function calls, files and line numbers
	     */
	    ie: function(e) {
	        var lineRE = /^.*at (\w+) \(([^\)]+)\)$/gm;
	        return e.stack.replace(/at Anonymous function /gm, '{anonymous}()@')
	            .replace(lineRE, '$1@$2')
	            .split('\n');
	    },

	    /**
	     * Given an Error object, return a formatted Array based on Firefox's stack string.
	     *
	     * @param e - Error object to inspect
	     * @return Array<String> of function calls, files and line numbers
	     */
	    firefox: function(e) {
	        return e.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^[\(@]/gm, '{anonymous}()@').split('\n');
	    },

	    opera11: function(e) {
	        var ANON = '{anonymous}', lineRE = /^.*line (\d+), column (\d+)(?: in (.+))? in (\S+):$/;
	        var lines = e.stacktrace.split('\n'), result = [];

	        for (var i = 0, len = lines.length; i < len; i += 2) {
	            var match = lineRE.exec(lines[i]);
	            if (match) {
	                var location = match[4] + ':' + match[1] + ':' + match[2];
	                var fnName = match[3] || "global code";
	                fnName = fnName.replace(/<anonymous function: (\S+)>/, "$1").replace(/<anonymous function>/, ANON);
	                result.push(fnName + '@' + location + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
	            }
	        }

	        return result;
	    },

	    opera10b: function(e) {
	        // "<anonymous function: run>([arguments not available])@file://localhost/G:/js/stacktrace.js:27\n" +
	        // "printStackTrace([arguments not available])@file://localhost/G:/js/stacktrace.js:18\n" +
	        // "@file://localhost/G:/js/test/functional/testcase1.html:15"
	        var lineRE = /^(.*)@(.+):(\d+)$/;
	        var lines = e.stacktrace.split('\n'), result = [];

	        for (var i = 0, len = lines.length; i < len; i++) {
	            var match = lineRE.exec(lines[i]);
	            if (match) {
	                var fnName = match[1]? (match[1] + '()') : "global code";
	                result.push(fnName + '@' + match[2] + ':' + match[3]);
	            }
	        }

	        return result;
	    },

	    /**
	     * Given an Error object, return a formatted Array based on Opera 10's stacktrace string.
	     *
	     * @param e - Error object to inspect
	     * @return Array<String> of function calls, files and line numbers
	     */
	    opera10a: function(e) {
	        // "  Line 27 of linked script file://localhost/G:/js/stacktrace.js\n"
	        // "  Line 11 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html: In function foo\n"
	        var ANON = '{anonymous}', lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
	        var lines = e.stacktrace.split('\n'), result = [];

	        for (var i = 0, len = lines.length; i < len; i += 2) {
	            var match = lineRE.exec(lines[i]);
	            if (match) {
	                var fnName = match[3] || ANON;
	                result.push(fnName + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
	            }
	        }

	        return result;
	    },

	    // Opera 7.x-9.2x only!
	    opera9: function(e) {
	        // "  Line 43 of linked script file://localhost/G:/js/stacktrace.js\n"
	        // "  Line 7 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html\n"
	        var ANON = '{anonymous}', lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
	        var lines = e.message.split('\n'), result = [];

	        for (var i = 2, len = lines.length; i < len; i += 2) {
	            var match = lineRE.exec(lines[i]);
	            if (match) {
	                result.push(ANON + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\s+/, ''));
	            }
	        }

	        return result;
	    },

	    // Safari 5-, IE 9-, and others
	    other: function(curr) {
	        var ANON = '{anonymous}', fnRE = /function\s*([\w\-$]+)?\s*\(/i, stack = [], fn, args, maxStackSize = 10;
	        while (curr && curr['arguments'] && stack.length < maxStackSize) {
	            fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
	            args = Array.prototype.slice.call(curr['arguments'] || []);
	            stack[stack.length] = fn + '(' + this.stringifyArguments(args) + ')';
	            curr = curr.caller;
	        }
	        return stack;
	    },

	    /**
	     * Given arguments array as a String, subsituting type names for non-string types.
	     *
	     * @param {Arguments} args
	     * @return {Array} of Strings with stringified arguments
	     */
	    stringifyArguments: function(args) {
	        var result = [];
	        var slice = Array.prototype.slice;
	        for (var i = 0; i < args.length; ++i) {
	            var arg = args[i];
	            if (arg === undefined) {
	                result[i] = 'undefined';
	            } else if (arg === null) {
	                result[i] = 'null';
	            } else if (arg.constructor) {
	                if (arg.constructor === Array) {
	                    if (arg.length < 3) {
	                        result[i] = '[' + this.stringifyArguments(arg) + ']';
	                    } else {
	                        result[i] = '[' + this.stringifyArguments(slice.call(arg, 0, 1)) + '...' + this.stringifyArguments(slice.call(arg, -1)) + ']';
	                    }
	                } else if (arg.constructor === Object) {
	                    result[i] = '#object';
	                } else if (arg.constructor === Function) {
	                    result[i] = '#function';
	                } else if (arg.constructor === String) {
	                    result[i] = '"' + arg + '"';
	                } else if (arg.constructor === Number) {
	                    result[i] = arg;
	                }
	            }
	        }
	        return result.join(',');
	    },

	    sourceCache: {},

	    /**
	     * @return the text from a given URL
	     */
	    ajax: function(url) {
	        var req = this.createXMLHTTPObject();
	        if (req) {
	            try {
	                req.open('GET', url, false);
	                //req.overrideMimeType('text/plain');
	                //req.overrideMimeType('text/javascript');
	                req.send(null);
	                //return req.status == 200 ? req.responseText : '';
	                return req.responseText;
	            } catch (e) {
	            }
	        }
	        return '';
	    },

	    /**
	     * Try XHR methods in order and store XHR factory.
	     *
	     * @return <Function> XHR function or equivalent
	     */
	    createXMLHTTPObject: function() {
	        var xmlhttp, XMLHttpFactories = [
	            function() {
	                return new XMLHttpRequest();
	            }, function() {
	                return new ActiveXObject('Msxml2.XMLHTTP');
	            }, function() {
	                return new ActiveXObject('Msxml3.XMLHTTP');
	            }, function() {
	                return new ActiveXObject('Microsoft.XMLHTTP');
	            }
	        ];
	        for (var i = 0; i < XMLHttpFactories.length; i++) {
	            try {
	                xmlhttp = XMLHttpFactories[i]();
	                // Use memoization to cache the factory
	                this.createXMLHTTPObject = XMLHttpFactories[i];
	                return xmlhttp;
	            } catch (e) {
	            }
	        }
	    },

	    /**
	     * Given a URL, check if it is in the same domain (so we can get the source
	     * via Ajax).
	     *
	     * @param url <String> source url
	     * @return False if we need a cross-domain request
	     */
	    isSameDomain: function(url) {
	        return typeof location !== "undefined" && url.indexOf(location.hostname) !== -1; // location may not be defined, e.g. when running from nodejs.
	    },

	    /**
	     * Get source code from given URL if in the same domain.
	     *
	     * @param url <String> JS source URL
	     * @return <Array> Array of source code lines
	     */
	    getSource: function(url) {
	        // TODO reuse source from script tags?
	        if (!(url in this.sourceCache)) {
	            this.sourceCache[url] = this.ajax(url).split('\n');
	        }
	        return this.sourceCache[url];
	    },

	    guessAnonymousFunctions: function(stack) {
	        for (var i = 0; i < stack.length; ++i) {
	            var reStack = /\{anonymous\}\(.*\)@(.*)/,
	                reRef = /^(.*?)(?::(\d+))(?::(\d+))?(?: -- .+)?$/,
	                frame = stack[i], ref = reStack.exec(frame);

	            if (ref) {
	                var m = reRef.exec(ref[1]);
	                if (m) { // If falsey, we did not get any file/line information
	                    var file = m[1], lineno = m[2], charno = m[3] || 0;
	                    if (file && this.isSameDomain(file) && lineno) {
	                        var functionName = this.guessAnonymousFunction(file, lineno, charno);
	                        stack[i] = frame.replace('{anonymous}', functionName);
	                    }
	                }
	            }
	        }
	        return stack;
	    },

	    guessAnonymousFunction: function(url, lineNo, charNo) {
	        var ret;
	        try {
	            ret = this.findFunctionName(this.getSource(url), lineNo);
	        } catch (e) {
	            ret = 'getSource failed with url: ' + url + ', exception: ' + e.toString();
	        }
	        return ret;
	    },

	    findFunctionName: function(source, lineNo) {
	        // FIXME findFunctionName fails for compressed source
	        // (more than one function on the same line)
	        // TODO use captured args
	        // function {name}({args}) m[1]=name m[2]=args
	        var reFunctionDeclaration = /function\s+([^(]*?)\s*\(([^)]*)\)/;
	        // {name} = function ({args}) TODO args capture
	        // /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*function(?:[^(]*)/
	        var reFunctionExpression = /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*function\b/;
	        // {name} = eval()
	        var reFunctionEvaluation = /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*(?:eval|new Function)\b/;
	        // Walk backwards in the source lines until we find
	        // the line which matches one of the patterns above
	        var code = "", line, maxLines = Math.min(lineNo, 20), m, commentPos;
	        for (var i = 0; i < maxLines; ++i) {
	            // lineNo is 1-based, source[] is 0-based
	            line = source[lineNo - i - 1];
	            commentPos = line.indexOf('//');
	            if (commentPos >= 0) {
	                line = line.substr(0, commentPos);
	            }
	            // TODO check other types of comments? Commented code may lead to false positive
	            if (line) {
	                code = line + code;
	                m = reFunctionExpression.exec(code);
	                if (m && m[1]) {
	                    return m[1];
	                }
	                m = reFunctionDeclaration.exec(code);
	                if (m && m[1]) {
	                    //return m[1] + "(" + (m[2] || "") + ")";
	                    return m[1];
	                }
	                m = reFunctionEvaluation.exec(code);
	                if (m && m[1]) {
	                    return m[1];
	                }
	            }
	        }
	        return '(?)';
	    }
	};
	}.call(window));

/***/ },
/* 16 */
/***/ function(module, exports) {

	/*** IMPORTS FROM imports-loader ***/
	(function() {

	/*!
	 * jQuery Templates Plugin 1.0.0pre
	 * http://github.com/jquery/jquery-tmpl
	 * Requires jQuery 1.4.2
	 *
	 * Copyright 2011, Software Freedom Conservancy, Inc.
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 * http://jquery.org/license
	 */
	(function( jQuery, undefined ){
		var oldManip = jQuery.fn.domManip, tmplItmAtt = "_tmplitem", htmlExpr = /^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,
			newTmplItems = {}, wrappedItems = {}, appendToTmplItems, topTmplItem = { key: 0, data: {} }, itemKey = 0, cloneIndex = 0, stack = [];

		function newTmplItem( options, parentItem, fn, data ) {
			// Returns a template item data structure for a new rendered instance of a template (a 'template item').
			// The content field is a hierarchical array of strings and nested items (to be
			// removed and replaced by nodes field of dom elements, once inserted in DOM).
			var newItem = {
				data: data || (data === 0 || data === false) ? data : (parentItem ? parentItem.data : {}),
				_wrap: parentItem ? parentItem._wrap : null,
				tmpl: null,
				parent: parentItem || null,
				nodes: [],
				calls: tiCalls,
				nest: tiNest,
				wrap: tiWrap,
				html: tiHtml,
				update: tiUpdate
			};
			if ( options ) {
				jQuery.extend( newItem, options, { nodes: [], parent: parentItem });
			}
			if ( fn ) {
				// Build the hierarchical content to be used during insertion into DOM
				newItem.tmpl = fn;
				newItem._ctnt = newItem._ctnt || newItem.tmpl( jQuery, newItem );
				newItem.key = ++itemKey;
				// Keep track of new template item, until it is stored as jQuery Data on DOM element
				(stack.length ? wrappedItems : newTmplItems)[itemKey] = newItem;
			}
			return newItem;
		}

		// Override appendTo etc., in order to provide support for targeting multiple elements. (This code would disappear if integrated in jquery core).
		jQuery.each({
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function( name, original ) {
			jQuery.fn[ name ] = function( selector ) {
				var ret = [], insert = jQuery( selector ), elems, i, l, tmplItems,
					parent = this.length === 1 && this[0].parentNode;

				appendToTmplItems = newTmplItems || {};
				if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
					insert[ original ]( this[0] );
					ret = this;
				} else {
					for ( i = 0, l = insert.length; i < l; i++ ) {
						cloneIndex = i;
						elems = (i > 0 ? this.clone(true) : this).get();
						jQuery( insert[i] )[ original ]( elems );
						ret = ret.concat( elems );
					}
					cloneIndex = 0;
					ret = this.pushStack( ret, name, insert.selector );
				}
				tmplItems = appendToTmplItems;
				appendToTmplItems = null;
				jQuery.tmpl.complete( tmplItems );
				return ret;
			};
		});

		jQuery.fn.extend({
			// Use first wrapped element as template markup.
			// Return wrapped set of template items, obtained by rendering template against data.
			tmpl: function( data, options, parentItem ) {
				return jQuery.tmpl( this[0], data, options, parentItem );
			},

			// Find which rendered template item the first wrapped DOM element belongs to
			tmplItem: function() {
				return jQuery.tmplItem( this[0] );
			},

			// Consider the first wrapped element as a template declaration, and get the compiled template or store it as a named template.
			template: function( name ) {
				return jQuery.template( name, this[0] );
			},

			domManip: function( args, table, callback, options ) {
				if ( args[0] && jQuery.isArray( args[0] )) {
					var dmArgs = jQuery.makeArray( arguments ), elems = args[0], elemsLength = elems.length, i = 0, tmplItem;
					while ( i < elemsLength && !(tmplItem = jQuery.data( elems[i++], "tmplItem" ))) {}
					if ( tmplItem && cloneIndex ) {
						dmArgs[2] = function( fragClone ) {
							// Handler called by oldManip when rendered template has been inserted into DOM.
							jQuery.tmpl.afterManip( this, fragClone, callback );
						};
					}
					oldManip.apply( this, dmArgs );
				} else {
					oldManip.apply( this, arguments );
				}
				cloneIndex = 0;
				if ( !appendToTmplItems ) {
					jQuery.tmpl.complete( newTmplItems );
				}
				return this;
			}
		});

		jQuery.extend({
			// Return wrapped set of template items, obtained by rendering template against data.
			tmpl: function( tmpl, data, options, parentItem ) {
				var ret, topLevel = !parentItem;
				if ( topLevel ) {
					// This is a top-level tmpl call (not from a nested template using {{tmpl}})
					parentItem = topTmplItem;
					tmpl = jQuery.template[tmpl] || jQuery.template( null, tmpl );
					wrappedItems = {}; // Any wrapped items will be rebuilt, since this is top level
				} else if ( !tmpl ) {
					// The template item is already associated with DOM - this is a refresh.
					// Re-evaluate rendered template for the parentItem
					tmpl = parentItem.tmpl;
					newTmplItems[parentItem.key] = parentItem;
					parentItem.nodes = [];
					if ( parentItem.wrapped ) {
						updateWrapped( parentItem, parentItem.wrapped );
					}
					// Rebuild, without creating a new template item
					return jQuery( build( parentItem, null, parentItem.tmpl( jQuery, parentItem ) ));
				}
				if ( !tmpl ) {
					return []; // Could throw...
				}
				if ( typeof data === "function" ) {
					data = data.call( parentItem || {} );
				}
				if ( options && options.wrapped ) {
					updateWrapped( options, options.wrapped );
				}
				ret = jQuery.isArray( data ) ?
					jQuery.map( data, function( dataItem ) {
						return dataItem ? newTmplItem( options, parentItem, tmpl, dataItem ) : null;
					}) :
					[ newTmplItem( options, parentItem, tmpl, data ) ];
				return topLevel ? jQuery( build( parentItem, null, ret ) ) : ret;
			},

			// Return rendered template item for an element.
			tmplItem: function( elem ) {
				var tmplItem;
				if ( elem instanceof jQuery ) {
					elem = elem[0];
				}
				while ( elem && elem.nodeType === 1 && !(tmplItem = jQuery.data( elem, "tmplItem" )) && (elem = elem.parentNode) ) {}
				return tmplItem || topTmplItem;
			},

			// Set:
			// Use $.template( name, tmpl ) to cache a named template,
			// where tmpl is a template string, a script element or a jQuery instance wrapping a script element, etc.
			// Use $( "selector" ).template( name ) to provide access by name to a script block template declaration.

			// Get:
			// Use $.template( name ) to access a cached template.
			// Also $( selectorToScriptBlock ).template(), or $.template( null, templateString )
			// will return the compiled template, without adding a name reference.
			// If templateString includes at least one HTML tag, $.template( templateString ) is equivalent
			// to $.template( null, templateString )
			template: function( name, tmpl ) {
				if (tmpl) {
					// Compile template and associate with name
					if ( typeof tmpl === "string" ) {
						// This is an HTML string being passed directly in.
						tmpl = buildTmplFn( tmpl );
					} else if ( tmpl instanceof jQuery ) {
						tmpl = tmpl[0] || {};
					}
					if ( tmpl.nodeType ) {
						// If this is a template block, use cached copy, or generate tmpl function and cache.
						tmpl = jQuery.data( tmpl, "tmpl" ) || jQuery.data( tmpl, "tmpl", buildTmplFn( tmpl.innerHTML ));
						// Issue: In IE, if the container element is not a script block, the innerHTML will remove quotes from attribute values whenever the value does not include white space.
						// This means that foo="${x}" will not work if the value of x includes white space: foo="${x}" -> foo=value of x.
						// To correct this, include space in tag: foo="${ x }" -> foo="value of x"
					}
					return typeof name === "string" ? (jQuery.template[name] = tmpl) : tmpl;
				}
				// Return named compiled template
				return name ? (typeof name !== "string" ? jQuery.template( null, name ):
					(jQuery.template[name] ||
						// If not in map, and not containing at least on HTML tag, treat as a selector.
						// (If integrated with core, use quickExpr.exec)
						jQuery.template( null, htmlExpr.test( name ) ? name : jQuery( name )))) : null;
			},

			encode: function( text ) {
				// Do HTML encoding replacing < > & and ' and " by corresponding entities.
				return ("" + text).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;");
			}
		});

		jQuery.extend( jQuery.tmpl, {
			tag: {
				"tmpl": {
					_default: { $2: "null" },
					open: "if($notnull_1){__=__.concat($item.nest($1,$2));}"
					// tmpl target parameter can be of type function, so use $1, not $1a (so not auto detection of functions)
					// This means that {{tmpl foo}} treats foo as a template (which IS a function).
					// Explicit parens can be used if foo is a function that returns a template: {{tmpl foo()}}.
				},
				"wrap": {
					_default: { $2: "null" },
					open: "$item.calls(__,$1,$2);__=[];",
					close: "call=$item.calls();__=call._.concat($item.wrap(call,__));"
				},
				"each": {
					_default: { $2: "$index, $value" },
					open: "if($notnull_1){$.each($1a,function($2){with(this){",
					close: "}});}"
				},
				"if": {
					open: "if(($notnull_1) && $1a){",
					close: "}"
				},
				"else": {
					_default: { $1: "true" },
					open: "}else if(($notnull_1) && $1a){"
				},
				"html": {
					// Unecoded expression evaluation.
					open: "if($notnull_1){__.push($1a);}"
				},
				"=": {
					// Encoded expression evaluation. Abbreviated form is ${}.
					_default: { $1: "$data" },
					open: "if($notnull_1){__.push($.encode($1a));}"
				},
				"!": {
					// Comment tag. Skipped by parser
					open: ""
				}
			},

			// This stub can be overridden, e.g. in jquery.tmplPlus for providing rendered events
			complete: function( items ) {
				newTmplItems = {};
			},

			// Call this from code which overrides domManip, or equivalent
			// Manage cloning/storing template items etc.
			afterManip: function afterManip( elem, fragClone, callback ) {
				// Provides cloned fragment ready for fixup prior to and after insertion into DOM
				var content = fragClone.nodeType === 11 ?
					jQuery.makeArray(fragClone.childNodes) :
					fragClone.nodeType === 1 ? [fragClone] : [];

				// Return fragment to original caller (e.g. append) for DOM insertion
				callback.call( elem, fragClone );

				// Fragment has been inserted:- Add inserted nodes to tmplItem data structure. Replace inserted element annotations by jQuery.data.
				storeTmplItems( content );
				cloneIndex++;
			}
		});

		//========================== Private helper functions, used by code above ==========================

		function build( tmplItem, nested, content ) {
			// Convert hierarchical content into flat string array
			// and finally return array of fragments ready for DOM insertion
			var frag, ret = content ? jQuery.map( content, function( item ) {
				return (typeof item === "string") ?
					// Insert template item annotations, to be converted to jQuery.data( "tmplItem" ) when elems are inserted into DOM.
					(tmplItem.key ? item.replace( /(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g, "$1 " + tmplItmAtt + "=\"" + tmplItem.key + "\" $2" ) : item) :
					// This is a child template item. Build nested template.
					build( item, tmplItem, item._ctnt );
			}) :
			// If content is not defined, insert tmplItem directly. Not a template item. May be a string, or a string array, e.g. from {{html $item.html()}}.
			tmplItem;
			if ( nested ) {
				return ret;
			}

			// top-level template
			ret = ret.join("");

			// Support templates which have initial or final text nodes, or consist only of text
			// Also support HTML entities within the HTML markup.
			//ret.replace( /^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/, function( all, before, middle, after) {
			//	frag = jQuery( middle ).get();
	        //
			//	storeTmplItems( frag );
			//	if ( before ) {
			//		frag = unencode( before ).concat(frag);
			//	}
			//	if ( after ) {
			//		frag = frag.concat(unencode( after ));
			//	}
			//});
			return frag ? frag : unencode( ret );
		}

		function unencode( text ) {
			// Use createElement, since createTextNode will not render HTML entities correctly
			var el = document.createElement( "div" );
			el.innerHTML = text;
			return jQuery.makeArray(el.childNodes);
		}

		// Generate a reusable function that will serve to render a template against data
		function buildTmplFn( markup ) {
			return new Function("jQuery","$item",
				// Use the variable __ to hold a string array while building the compiled template. (See https://github.com/jquery/jquery-tmpl/issues#issue/10).
				"var $=jQuery,call,__=[],$data=$item.data;" +

				// Introduce the data as local variables using with(){}
				"with($data){__.push('" +

				// Convert the template into pure JavaScript
				jQuery.trim(markup)
					.replace( /([\\'])/g, "\\$1" )
					.replace( /[\r\t\n]/g, " " )
					.replace( /\$\{([^\}]*)\}/g, "{{= $1}}" )
					.replace( /\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,
					function( all, slash, type, fnargs, target, parens, args ) {
						var tag = jQuery.tmpl.tag[ type ], def, expr, exprAutoFnDetect;
						if ( !tag ) {
							throw "Unknown template tag: " + type;
						}
						def = tag._default || [];
						if ( parens && !/\w$/.test(target)) {
							target += parens;
							parens = "";
						}
						if ( target ) {
							target = unescape( target );
							args = args ? ("," + unescape( args ) + ")") : (parens ? ")" : "");
							// Support for target being things like a.toLowerCase();
							// In that case don't call with template item as 'this' pointer. Just evaluate...
							expr = parens ? (target.indexOf(".") > -1 ? target + unescape( parens ) : ("(" + target + ").call($item" + args)) : target;
							exprAutoFnDetect = parens ? expr : "(typeof(" + target + ")==='function'?(" + target + ").call($item):(" + target + "))";
						} else {
							exprAutoFnDetect = expr = def.$1 || "null";
						}
						fnargs = unescape( fnargs );
						return "');" +
							tag[ slash ? "close" : "open" ]
								.split( "$notnull_1" ).join( target ? "typeof(" + target + ")!=='undefined' && (" + target + ")!=null" : "true" )
								.split( "$1a" ).join( exprAutoFnDetect )
								.split( "$1" ).join( expr )
								.split( "$2" ).join( fnargs || def.$2 || "" ) +
							"__.push('";
					}) +
				"');}return __;"
			);
		}
		function updateWrapped( options, wrapped ) {
			// Build the wrapped content.
			options._wrap = build( options, true,
				// Suport imperative scenario in which options.wrapped can be set to a selector or an HTML string.
				jQuery.isArray( wrapped ) ? wrapped : [htmlExpr.test( wrapped ) ? wrapped : jQuery( wrapped ).html()]
			).join("");
		}

		function unescape( args ) {
			return args ? args.replace( /\\'/g, "'").replace(/\\\\/g, "\\" ) : null;
		}
		function outerHtml( elem ) {
			var div = document.createElement("div");
			div.appendChild( elem.cloneNode(true) );
			return div.innerHTML;
		}

		// Store template items in jQuery.data(), ensuring a unique tmplItem data data structure for each rendered template instance.
		function storeTmplItems( content ) {
			//var keySuffix = "_" + cloneIndex, elem, elems, newClonedItems = {}, i, l, m;
			//for ( i = 0, l = content.length; i < l; i++ ) {
			//	if ( (elem = content[i]).nodeType !== 1 ) {
			//		continue;
			//	}
			//	elems = elem.getElementsByTagName("*");
			//	for ( m = elems.length - 1; m >= 0; m-- ) {
			//		processItemKey( elems[m] );
			//	}
			//	processItemKey( elem );
			//}
			//function processItemKey( el ) {
			//	//var pntKey, pntNode = el, pntItem, tmplItem, key;
			//	//// Ensure that each rendered template inserted into the DOM has its own template item,
			//	//if ( (key = el.getAttribute( tmplItmAtt ))) {
			//	//	while ( pntNode.parentNode && (pntNode = pntNode.parentNode).nodeType === 1 && !(pntKey = pntNode.getAttribute( tmplItmAtt ))) { }
			//	//	if ( pntKey !== key ) {
			//	//		// The next ancestor with a _tmplitem expando is on a different key than this one.
			//	//		// So this is a top-level element within this template item
			//	//		// Set pntNode to the key of the parentNode, or to 0 if pntNode.parentNode is null, or pntNode is a fragment.
			//	//		pntNode = pntNode.parentNode ? (pntNode.nodeType === 11 ? 0 : (pntNode.getAttribute( tmplItmAtt ) || 0)) : 0;
			//	//		if ( !(tmplItem = newTmplItems[key]) ) {
			//	//			// The item is for wrapped content, and was copied from the temporary parent wrappedItem.
			//	//			tmplItem = wrappedItems[key];
			//	//			tmplItem = newTmplItem( tmplItem, newTmplItems[pntNode]||wrappedItems[pntNode] );
			//	//			tmplItem.key = ++itemKey;
			//	//			newTmplItems[itemKey] = tmplItem;
			//	//		}
			//	//		if ( cloneIndex ) {
			//	//			cloneTmplItem( key );
			//	//		}
			//	//	}
			//	//	el.removeAttribute( tmplItmAtt );
			//	//} //else if ( cloneIndex && (tmplItem = jQuery.data( el, "tmplItem" )) ) {
			//	//	// This was a rendered element, cloned during append or appendTo etc.
			//	//	// TmplItem stored in jQuery data has already been cloned in cloneCopyEvent. We must replace it with a fresh cloned tmplItem.
			//	//	cloneTmplItem( tmplItem.key );
			//	//	newTmplItems[tmplItem.key] = tmplItem;
			//	//	pntNode = jQuery.data( el.parentNode, "tmplItem" );
			//	//	pntNode = pntNode ? pntNode.key : 0;
			//	//}
			//	//if ( tmplItem ) {
			//	//	pntItem = tmplItem;
			//	//	// Find the template item of the parent element.
			//	//	// (Using !=, not !==, since pntItem.key is number, and pntNode may be a string)
			//	//	while ( pntItem && pntItem.key != pntNode ) {
			//	//		// Add this element as a top-level node for this rendered template item, as well as for any
			//	//		// ancestor items between this item and the item of its parent element
			//	//		pntItem.nodes.push( el );
			//	//		pntItem = pntItem.parent;
			//	//	}
			//	//	// Delete content built during rendering - reduce API surface area and memory use, and avoid exposing of stale data after rendering...
			//	//	delete tmplItem._ctnt;
			//	//	delete tmplItem._wrap;
			//	//	// Store template item as jQuery data on the element
			//	//	//jQuery.data( el, "tmplItem", tmplItem );
			//	//}
			//	function cloneTmplItem( key ) {
			//		//key = key + keySuffix;
			//		//tmplItem = newClonedItems[key] =
			//		//	(newClonedItems[key] || newTmplItem( tmplItem, newTmplItems[tmplItem.parent.key + keySuffix] || tmplItem.parent ));
			//	}
			//}
		}

		//---- Helper functions for template item ----

		function tiCalls( content, tmpl, data, options ) {
			if ( !content ) {
				return stack.pop();
			}
			stack.push({ _: content, tmpl: tmpl, item:this, data: data, options: options });
		}

		function tiNest( tmpl, data, options ) {
			// nested template, using {{tmpl}} tag
			return jQuery.tmpl( jQuery.template( tmpl ), data, options, this );
		}

		function tiWrap( call, wrapped ) {
			// nested template, using {{wrap}} tag
			var options = call.options || {};
			options.wrapped = wrapped;
			// Apply the template, which may incorporate wrapped content,
			return jQuery.tmpl( jQuery.template( call.tmpl ), call.data, options, call.item );
		}

		function tiHtml( filter, textOnly ) {
			var wrapped = this._wrap;
			return jQuery.map(
				jQuery( jQuery.isArray( wrapped ) ? wrapped.join("") : wrapped ).filter( filter || "*" ),
				function(e) {
					return textOnly ?
						e.innerText || e.textContent :
						e.outerHTML || outerHtml(e);
				});
		}

		function tiUpdate() {
			var coll = this.nodes;
			jQuery.tmpl( null, null, null, this).insertBefore( coll[0] );
			jQuery( coll ).remove();
		}
	})( jQuery );
	}.call(window));

/***/ },
/* 17 */
/***/ function(module, exports) {

	/*** IMPORTS FROM imports-loader ***/
	(function() {


	var GLOBAL = this;
	var window = this;

	////////////////////////////////////////////////////////////////////////////////
	// Copyright James Robey c2012-2015, jrobey.services@gmail.com. All Rights Reserved.
	// HTTP://HYPERTAG.IO
	// Look for the package runtime release to distrubute your own open-source Hypertag applications.
	////////////////////////////////////////////////////////////////////////////////

	// HYPERTAG: A unique HTML application concept and runtime combining JSON, JQuery, JQuery Templates, etc
	// into perfectly recursive, perfectly balanced, repeatable, concise structures which achieve useful 
	// re-de-composition and/or iteration of HTML of any complexity; a reusable component architecture for, 
	// mobile, desktop, and more, in a totally new vision of what a web app should be.

	// code base begins:

	/* this is a standard in my framework, for expressing manupulations of the global namespace */

	//NAMETAG is a LEGACY reference, the last one to it, here
	//Otherwise, all methods specific to Hypertag are placed under this
	GLOBAL.Hypertag = Nametag = {};

	//generically hold methods that will be applied to views at various points. 
	Hypertag.Methods = {};

	//blank the body - we will unblank last thing, after load!
	$(document.body).fadeTo(0, 0);

	////////////////////////////////////////////////////////////////////////////////
	// The lights dim, the audience hushes, and the show goes on, at document "Ready"
	// This is listed first in the code to help newcomers perceive the way a hypertag
	// program gets off the ground.
	////////////////////////////////////////////////////////////////////////////////

	$(document).ready(function(){
	    Hypertag.Body = document.body;
	    Hypertag.$Body = $(document.body);

	    //establish instances of components hypertag uses.
	    Hypertag.SHML = new SHMLClass();
	    Hypertag.Runtime = new RuntimeClass();
	    Hypertag.Compiler = new CompilerClass();

	    Hypertag.GUI.setupGUIEvents();

	    //set up all the traits with the global methods that will affect an element in that way
	    Hypertag.Runtime.addCSSTraits({
	        ".clickable":_clickableMethod, 
	        ".button":_clickableMethod,
	        ".changeable":_changeableMethod, 
	        ".self":_makeElementNavigiable
	    });
	    
	    //if we are looking for libraries, they will be recursively
	    //included and the method passed run (initilaizing hypertag)
	    //after all have been loaded
	    Hypertag.Compiler._LoadLibrariesFromScripts(function(){
	    
	        //build a lookup so the _ConvertHypertagsToInstances can figure out what lowercase tag names correspond 
	        //with case-sensitive template names. 
	        Hypertag.Compiler._BuildTemplateLookups();
	    
	        //We may wish to supress processing SHML if we want to get the unprocessed contents of script tags
	        //as is the case when making examples apps that need to present the original, unprocessed code.
	        Hypertag.useSHML !== false && 
	            Hypertag.Compiler._ProcessSHMLTemplateTags();

	        //scan the DOM superstyles 
	        Hypertag.Compiler._ProcessConstants();            
	        Hypertag.Compiler._ProcessSuperstyles();            

	        //begin the process of searching for and recursively expanding hypertags
	        //as invokved in the body of the document.
	        //tell listeners we are about to expand Hypertags for the first time
	        
	        send(Hypertag, "__init__");

	        //start the template expand cascade by expanding from the body on down, recursively. The magic!
	        Hypertag.Runtime.ExpandHypertags();
	    
	        //tell listeners we are finished expanding Hypertags for the first time
	        send(Hypertag, "__load__");
	        send(Hypertag, "__ready__");
	        send(Hypertag, "__after__");

	        setTimeout(function(){
	            //now that all is loaded, show the body we hid, at the start.
	            Hypertag.$Body.fadeTo(0, 1);
	            send(Hypertag, "__ultimately__");
	        });
	    });
	     
	});

	////////////////////////////////////////////////////////////////////////////////////
	// assemble the Hypertag system, which is the Hypertag class, Hypertag.Runtime to store
	// various state, and a raft of methods to aid the Hypertag class where appropriate.
	////////////////////////////////////////////////////////////////////////////////////

	/* this is a container for all runtime methods that parse, execute, and dump individual hypertags */
	GLOBAL.RuntimeClass = function(){
	    var self = this;

	    //////////////////////////////////////////////////
	    //////  INTERNAL LISTS AND LOOKUPS USED FOR MANAGING TEMPLATES...
	    //////////////////////////////////////////////////

	    //store imported templates
	    self.TemplateNodes = {};
	    //store "anonymous" templates generated from a named template
	    self.AnonymousTemplateNodes = {};

	    //INTENT: this compiles and caches templates
	    self.CompiledTemplateCache = {};
	    //INTENT: this compiles and caches the methods associated with templates
	    self.CompiledTemplateOptionsCache = {};
	    //INTENT:this stores the text that was evaluated to get the options stored on the template ONLY for purposes of emitting the template DB for the production runtime.
	    self.CompiledTemplateOptionsTextCache = {},

	    //INTENT:attributes derived from template tags that should be checked for hitches like atttributes 
	    self.CompiledTemplateAttributeNames = {};
	    //INTENT: used ONLY for hypertags lookup; holds a lookup of lower case names to uppercase cached template names, to achieve case insensitivity (otherwise lowercase would have to be enforced.)
	    self.TemplateLowercaseLookup = {};
	    //INTENT: used ONLY for the named tag
	    self.TemplateTagType = {};
	    //INTENT: register a list of templates to be applied as traits at reload
	    self.ExtendsTemplateLookup = {};
	    //INTENT: record what anonymous templates were made for what templates (compiler)
	    self.AnonymousTemplatesForTemplate = {};
	    //INTENT: record what templates do not contain inner HTML content so their content isnt included when
	    //used as a trait
	    self.CompiledTemplatesWithoutContent = {};

	    /* look up table for workflow lifetimes as used in hypertrust */
	    self.WorkflowLifetimes = {};

	    //the set of unique templates (exploiting an object for that effect) we've loaded into the page since the runtime started.
	    self.EvalScript = function(text){
	        return window.eval(text);
	    };

	    self.SourcesLoaded = {};

	    //if this is false, no saved, compiled, templates have been loaded from JS.
	    self.SavedCompiledTemplateCache = {};
	    self.SavedCompiledTemplateOptionsCache = {};
	    self.SavedTemplateLowercaseLookup = [];
	    self.SavedTemplateTagType = [];
	    self.SavedExtendsTemplateLookup = [];

	    //////////////////////////////////////////////////
	    ////// DEFFERRED METHODS AND EVENTS SAVED DURING THE COURSE OF EVALUATION
	    //////////////////////////////////////////////////

	    //all the loading events themselves are deferred
	    self.FirstLoadEvents = [];

	    //methods that need to be fired, deferred, after a hypertag is (re)loaded
	    self.LoadItemEvents = [];
	    self.LoadedItemEvents = [];

	    self.PreloadTagEvents = [];
	    self.LoadTagEvents = [];
	    self.LoadedTagEvents = [];
	    self.SetupTagEvents = [];
	    self.ReadyTagEvents = [];
	    self.AfterTagEvents = [];
	    self.FinallyTagEvents = [];
	    self.FinishedTagEvents = [];
	    self.PenultimatelyTagEvents = [];
	    self.UltimatelyTagEvents = [];
	    self.Expanding = false; // an event/flag to let listeners know if a hypertag is in the process of being expanded (top-level only) and which one.

	    //////////////////////////////////////////////////
	    ////// LOOKUP TO KNOW WHAT TAGS ARE HTML (ANYTHING ELSE WILL PROCESSED AS HYPERTAGS)
	    //////////////////////////////////////////////////
	    //thanks go to Dan Swartzendruber for providing this list and unfatigable speculative help throughout!
	    self.html_tag_names = {
	        a:true,abbr:true,acronym:true,address:true,applet:true,area:true,article:true,aside:true,audio:true,b:true,
	        base:true,basefont:true,bdi:true,bdo:true,big:true,blink:true,blockquote:true,body:true,br:true,button:true,
	        canvas:true,caption:true,center:true,cite:true,code:true,col:true,colgroup:true,command:true,data:true,
	        datalist:true,dd:true,del:true,details:true,dfn:true,dir:true,div:true,dl:true,dt:true,
	        em:true,fieldset:true,figcaption:true,figure:true,font:true,footer:true,form:true,frame:true,frameset:true,
	        htrue:true,h1:true,h2:true,h3:true,h4:true,h5:true,h6:true,head:true,header:true,hgroup:true,hr:true,html:true,i:true,
	        iframe:true,img:true,input:true,ins:true,isindex:true,kbd:true,keygen:true,label:true,legend:true,
	        li:true,link:true,map:true,mark:true,marquee:true,menu:true,meta:true,meter:true,nav:true,noframes:true,
	        noscript:true,object:true,ol:true,optgroup:true,option:true,output:true,p:true,param:true,pre:true,
	        progress:true,q:true,rp:true,rt:true,ruby:true,s:true,samp:true,script:true,section:true,select:true,small:true,
	        list:true,span:true,strike:true,strikeout:true,strong:true,style:true,sub:true,summary:true,sup:true,
	        table:true,tbody:true,td:true,textarea:true,tfoot:true,th:true,thead:true,time:true,title:true,tr:true,track:true,
	        tt:true,u:true,ul:true,video:true,wbr:true,xmp:true
	    };

	    self.html_tag_names['var'] = true;

	    //dynamic css loaded by key, used in removing them
	    self.styles = {};

	    //////////////////////////////////////////////////
	    ////// STANDALONE/MISC STUFF
	    //////////////////////////////////////////////////

	    /* stuff for double click */
	    self.cancelDoubleClickFlag = false;

	    //do we use jshint to tell us about mistakes? save cycles with off
	    self.debug = true;

	    //do we save text related to compilation of templates in memory that makes it easier to dump them, later?
	    self.enableTemplateCompilation = true;

	    //how close do two clicks have to be to be a double click? higher values introduce greater UI delay
	    self.doubleClickDelay = 200;

	    /* this will hold a table of __uuid__ to name, used in debugging */
	    self.TemplateReverseAliases = {};

	    /* any hitches set on these attributes will be inited at the start of the hypertag automatically.*/
	    self.attributes_to_autohitch = {'width':true, 'height':true, 'top':true, 'bottom':true, 'left':true, 'right':true, 'opacity':true};

	    /* how long the mouse must be held down before drag is interpretted. *2 is hoverselectable time */
	    self.hoverdelay = 1000;
	    self.dragdelay = 1000;   

	    /* any class-name to method associations created here will have that method applied to any node with that class
	       once, when a top level hypertag is reloaded. By utilizing a per-element flag, we will NOT apply a trait more than 
	       once, even if we process the thing more than once - we dont remove the class as we do with hypertag because, as in 
	       the instance of button, we want the class AND the behavior. I introduce CSS Traits! */
	    self.CSSTraits = {};

	    /* these are public apis wrapping the creation of an object+running some method on it.
	       This form of encapsulation allows for normalized Hypertag.Runtime.foo() calls while
	       still creating a new class each call, something critically required for correct error handling */

	    /* a global to access items from the query string. note we strip the leading '?' from the query string, if any */
	    self.QueryString = parseQueryString(window.location.search.substring(1));

	    return self;
	};

	//yep, this is really it, the singlular create loop of the hypertag system. This function always operates on live DOM, emitting
	//inner templates for use with instances as it finds them. When templates create yet more class-hypertag nodes
	//and this method is recursively called on their contents, a tree of hypertag instances are detected and expanded
	//according to the Laws Of Hypertag.

	//FYI: Because this operates on "live" DOM nodes (in the page) jquery, and not XML, routines are needed for traversal.
	//XML routines are used interior, when processing inner templates.

	//NOTE: Order is VERY important here. This parituclar way visits nodes and makes things the righr way.
	//change with care! 
	RuntimeClass.prototype.ExpandHypertags = function(target){ 

	    //if no target, use the body
	    target = target || Hypertag.Body;

	    /* we must use a try/except loop here, or we will be unable to continue when a hypertag has errors */
	    try{
	        /* try/catching errors at this level allows us to continue when errors in an app occur. */

	        //mark that a loading cycle (a recursive call starting from some initial call) is beginning.
	        if(!Hypertag.Runtime.Expanding)
	            Hypertag.Runtime.Expanding = target;

	        //INTENT: a non-recurisve search algorithm for all top-most hypertag nodes, which, with their options,
	        //will be instantiated as needed. Since inner templates are now handled in template tags (as option inner_template) we'll
	        //not handle them here, when expanding hypertags, any longer. We treat anonymous templates just like real templates.
	        //This reflects the deeper reality of anonymous nodes in the html body as  being "parsed-in" BEFORE being processed/output
	        //just like real templates. The previous method of just printing an entire DOM via a single jq template was 
	        //inefficient and error prone, since things like var replacement in image tags wont work right (not
	        //to mention that dom being "printed twice", once on browser ready and again as an anonymous templates were 
	        //detetected via this loop, if we did allow it.
	        var hypertags_to_expand = [];

	        //start off our processing with all of the child nodes of the target node to process.

	        var all_elems = [target[0] || target]; //the list of all outstanding items to process

	        var elem; //the current item being processed
	        while(elem = all_elems.shift()){
	            //if we find one
	            if(hasClass(elem, 'hypertag')){    
	                //we push here.. but pop below - so it's evaled in the order we found them.
	                hypertags_to_expand.push([elem, Hypertag.Runtime._extractCodeblock(elem) || ""]);

	                //we've processed the hypertag - empty it - remove the hypertag class, add it to the hypertags to be 
	                $(elem).empty().removeClass('hypertag').addClass('isHypertag');
	            }                    

	            //add all element children to be checked for hypertags to make
	            var children = $.makeArray(elem.childNodes);
	            for(var i = 0, node ; (node = children[i]) ; i ++)
	                if(node.nodeType == 1)
	                    all_elems.push(node);
	        }

	        //We have the nodes to make - now we make them:
	        //If a new hypertag as a result contains more hypertags, this method is called recursively to expand those
	        //and only on the top node as saved by Runtime.Expanding == item is true is the  
	        //node top-level -- all loads will occur. All methods added during these recursions are all handled at the end, as god intended.
	    
	        //it IS important that we pop and not shift - this allows for child hypertags to experience their
	        //construct events before their parents do. of course, if we want to do something AFTER, that's 
	        //the whole point of initstages, so this setup is not constrictive, but awesome.
	        while((elem = hypertags_to_expand.pop())){
	            try{
	                new HypertagClass(elem[0], elem[1]);
	            }catch(e){
	                var err_msg = String(e);
	                var final_err_msg = "Construct error ------------\n\n    "+err_msg;
	            
	                if(!err_msg.startswith("SYNTAX ERROR: "))
	                    final_err_msg += "\n\nContext was -------------------------------\n    " + elem[1];
	                
	                if(Hypertag.Debugger.exceptions.length){
	                    for(var i = 0; i < Hypertag.Debugger.exceptions.length ; i ++)
	                        final_err_msg += Hypertag.Debugger.exceptions[i] + "\n";
	                    Hypertag.Debugger.exceptions = [];
	                }
	                
	                Hypertag.Debugger.error(final_err_msg);
	            
	                /* this is just handy.. letting the console highlight the div with the error visually too */
	                console.log("Tag associated with last error is: ", elem[0]);
	            
	            }
	        }
	    
	        //for each hypertag we found (and parsed, for its inner templates, etc), process it
	        //this ensures that each "layer" (as the dom gets deeper) of hypertags gets made depth-first.
	        if(target == Hypertag.Runtime.Expanding){
	            //run the accumulated initialization stages, interleaved for all items then list in each stage. order is important!
	        
	            var debug_state = [];
	            for(;;){
	                try{
	                    //SUMMARY: This will look for deferred methods to run, and whenever it finds any,
	                    //runs and jumps back to the beginning again such that all methods of a given initstage are 
	                    //run before any later ones, as is desired logically. Ending condition is getting to the 
	                    //end, where a break awaits. This is actually quite important, and this is fast.

	                    //First we look at any loads (which will probably make more of the deferreds handled next!)
	                    //NOTE: we shift reloads off the top of the stack, from top to bottom
	                    if(Hypertag.Runtime.FirstLoadEvents.length){
	                        var hypertag = Hypertag.Runtime.FirstLoadEvents.shift();
	                        debug_state[0] = 'FirstLoadEvents'; debug_state[1] = hypertag.template || hypertag.inner_template;
	                        hypertag.reload();
	                        continue;
	                    }
	                
	                    //__init__ is not fired as a part of this loop since it is NOT deferred liek the rest of these are.
	                
	                    /* load for items goes first */
	                    if(Hypertag.Runtime.LoadItemEvents.length){
	                        var state = Hypertag.Runtime.LoadItemEvents.pop();
	                        debug_state[0] = 'LoadItemEvents'; debug_state[1] = state[0].__loaditem__ || state[0];
	                        state[0].fire('__loaditem__', state[1]);
	                        continue;
	                    }

	                    //the __load__ event happens everytime a template or list is reloaded, incl. the first time
	                    //NOTE: but we pop off of the Deferred events, from bottom to top!
	                    if(Hypertag.Runtime.PreloadTagEvents.length){
	                        var hypertag = Hypertag.Runtime.PreloadTagEvents.pop();
	                        debug_state[0] = 'PreloadTagEvents'; debug_state[1] = hypertag.__preload__ || hypertag;
	                        //if the hypertag has selectors to find, this is our time to do so.
	                        //before now all contents may not have been made. After, it's too late.
	                        hypertag._resolveSelectorSyntax();
	                        hypertag.fire('__preload__');
	                        continue;
	                    }

	                    //the __load__ event happens everytime a template or list is reloaded, incl. the first time
	                    //NOTE: but we pop off of the Deferred events, from bottom to top!
	                    if(Hypertag.Runtime.LoadTagEvents.length){
	                        var hypertag = Hypertag.Runtime.LoadTagEvents.pop();
	                        debug_state[0] = 'LoadTagEvents'; debug_state[1] = hypertag.__load__ || hypertag;
	                        hypertag.fire('__load__');
	                        continue;
	                    }
	                
	                    if(Hypertag.Runtime.LoadedItemEvents.length){
	                        var state = Hypertag.Runtime.LoadedItemEvents.pop();
	                        debug_state[0] = 'LoadedItemEvents'; debug_state[1] = state[0].__loadeditem__ || state[0];
	                        state[0].fire('__loadeditem__', state[1]);
	                        continue;
	                    }

	                    //the __loaded__ event happens everytime a template or list is reloaded, incl. the first time
	                    //NOTE: but we pop off of the Deferred events, from bottom to top!
	                    if(Hypertag.Runtime.LoadedTagEvents.length){
	                        var hypertag = Hypertag.Runtime.LoadedTagEvents.pop();
	                        debug_state[0] = 'LoadedTagEvents'; debug_state[1] = hypertag.__loaded__ || hypertag;
	                        hypertag.fire('__loaded__');
	                        continue;
	                    }

	                    //the __setup__ event is only run on hypertag *instances*, never templates made by a hypertag (aka list items) because only instances can be deferred by autoload:false and thus need a prepare
	                    if(Hypertag.Runtime.SetupTagEvents.length){
	                        var hypertag = Hypertag.Runtime.SetupTagEvents.pop();
	                        debug_state[0] = 'SetupTagEvents'; debug_state[1] = hypertag.__setup__ || hypertag;
	                        hypertag.fire('__setup__');
	                        continue;
	                    }

	                    //the __ready__ event runs only on the first load of a template or list, indicating that all lists have loaded for the first time
	                    if(Hypertag.Runtime.ReadyTagEvents.length){
	                        var hypertag = Hypertag.Runtime.ReadyTagEvents.pop();
	                        debug_state[0] = 'ReadyTagEvents'; debug_state[1] = hypertag.__ready__ || hypertag;
	                        hypertag.fire('__ready__');
	                        continue;
	                    }

	                    //after is run on every load, like __load__, __loaded__, firing after them.
	                    if(Hypertag.Runtime.AfterTagEvents.length){
	                        var hypertag = Hypertag.Runtime.AfterTagEvents.pop();
	                        debug_state[0] = 'AfterTagEvents'; debug_state[1] = hypertag.__after__ || hypertag;
	                        hypertag.fire('__after__');
	                        continue;
	                    }

	                    //__finally__ is run on every load, like __loaded__, but after ready
	                    if(Hypertag.Runtime.FinallyTagEvents.length){
	                        var hypertag = Hypertag.Runtime.FinallyTagEvents.pop();
	                        debug_state[0] = 'FinallyTagEvents'; debug_state[1] = hypertag.__finally__ || hypertag;
	                        hypertag.fire('__finally__');
	                        continue;
	                    }

	                    //__finished__ is run on every load, like __init__, top to bottom, but after everything else.
	                    if(Hypertag.Runtime.FinishedTagEvents.length){
	                        var hypertag = Hypertag.Runtime.FinishedTagEvents.shift();
	                        debug_state[0] = 'FinishedTagEvents'; debug_state[1] = hypertag.__finished__ || hypertag;
	                        hypertag.fire('__finished__');
	                        continue;
	                    }

	                    //__penultimately__ just comes before __ultimately__. See ultimately for discussion of behavior. This is only
	                    //used by the event logic, to be able to have a phase it can set values that the user (programmer) can schedule
	                    //things after (in other words, to be able to have __ultimately__ work after the system's had it's __ultimately__.
	                    //it useful.)
	                    if(Hypertag.Runtime.PenultimatelyTagEvents.length){
	                        var hypertag = Hypertag.Runtime.PenultimatelyTagEvents.pop();
	                        debug_state[0] = 'PenultimatelyTagEvents'; debug_state[1] = hypertag.__penultimately__ || hypertag;

	                        setTimeout(function(hypertag){
	                            return function(){
	                                hypertag.fire('__penultimately__');
	                            };
	                        }(hypertag));
	                    
	                        continue;
	                    }

	                    //__ultimately__ is different in one major way - all such methods occured after the entire render tree has been finished,
	                    //providing for an event to happen after the screen has cleared up, or after a delay, etc.
	                    if(Hypertag.Runtime.UltimatelyTagEvents.length){
	                        var hypertag = Hypertag.Runtime.UltimatelyTagEvents.pop();
	                        debug_state[0] = 'UltimatelyTagEvents'; debug_state[1] = hypertag.__ultimately__ || hypertag;

	                        setTimeout(function(hypertag){
	                            return function(){
	                                hypertag.fire('__ultimately__');
	                            };
	                        }(hypertag));
	                    
	                        continue;
	                    }

	                    //OUR ENDING CONDITION: if we make it here, then there were no more outstanding
	                    //deferreds to do, and so we should break.
	                    break;
	                }
	            
	                catch(err){     
	                    if(Hypertag.Debugger.exceptions.length){
	                        var final_err_msg = "";
	                        for(var i = 0; i < Hypertag.Debugger.exceptions.length ; i ++)
	                            final_err_msg += Hypertag.Debugger.exceptions[i] + "\n";
	                        Hypertag.Debugger.error(final_err_msg);
	                        Hypertag.Debugger.exceptions = [];
	                    }
	                
	                    else{
	                        Hypertag.Runtime.Expanding = false;
	                        throw err;
	                    }
	                }
	            }
	        
	            Hypertag.Runtime.Expanding = false;

	            var $target = $(target);
	        
	            /* make all inputs grab and release focus on the active window in our Hypertag.GUI focus system. */
	        
	            /* we dont process this as a CSS Trait because it has some special needs, such as including the target, 
	               rather than merely finding nodes below it.  It's different in that it's not a new feature but something
	               every input needs to work with focus and so this code actually has application-wide conseqeuences.  */
	            if(Hypertag.GUI.focus){
	                $target.find("input[type!='button'], textarea, select")
	                    .blur(Hypertag.GUI.focus.blurInputMethod)
	                    .focus(Hypertag.GUI.focus.focusInputMethod);
	        
	                if((target.getAttribute('type') == 'button' && target.tagName == 'input') || target.tagName == 'textarea' || target.tagName == 'select')
	                    $target
	                        .blur(Hypertag.GUI.focus.blurInputMethod)
	                        .focus(Hypertag.GUI.focus.focusInputMethod);
	            }

	            /* THIS processes CSS Traits.. that is, if we search for and process all the nodes
	               we find with the class given, and we place a flag on it to prevent double processing. 
	               doing it here represents an ideally efficient method of ensuring every node with the 
	               given class has the method applied just once, in all situations.  */
	            for(var class_name in Hypertag.Runtime.CSSTraits)
	                $target.find(class_name).each(function(){
	                    var applied_trait_flag = '_CSSTrait_'+class_name;
	                    if(!this[applied_trait_flag]){
	                        try{
	                            Hypertag.Runtime.CSSTraits[class_name].call(this, this);
	                        }catch(err){
	                            console.error("Error applying CSS Trait "+class_name+", error is:\n"+String(err)+"\n\nTag Text:\n\n"+PrintXML(this)+"\n");
	                        }
	                    
	                        this[applied_trait_flag] = true;
	                    }
	                });
	        }    
	    }


	    catch(err){
	        Hypertag.Runtime.Expanding = false;
	        Hypertag.Runtime.isCompiling = false;
	    
	        if(Hypertag.Debugger.exceptions.length){
	            var final_err_msg = "";
	            for(var i = 0; i < Hypertag.Debugger.exceptions.length ; i ++)
	                final_err_msg += Hypertag.Debugger.exceptions[i] + "\n";
	            Hypertag.Debugger.error(final_err_msg);
	            Hypertag.Debugger.exceptions = [];
	        }
	    
	        else
	            throw err;            
	    }
	};

	/* YOU may add as many traits under the same name as you wish, just like methods chain in hypertags */
	RuntimeClass.prototype.addCSSTraits = function(to_add, method){
	    var self = this;

	    //if they just give a string promote to object
	    if(typed(to_add, String)){
	        var css_name = to_add; 
	        to_add = {};
	        to_add[css_name] = method;
	    }
	    
	    for(var key in to_add){
	        var dict_to_merge = {};
	        dict_to_merge[key] = to_add[key];

	        if(!self.CSSTraits[key])
	            self.CSSTraits[key] = to_add[key];
	        else
	            HypertagClass.prototype.mergespace(dict_to_merge, self.CSSTraits, true); //final true forces chaining instead of using the "super" approach.

	    }
	}

	RuntimeClass.prototype.clearCSSTrait = function(css_class_name){
	    /* you can only delete the entire set of methods for a css trait */
	    delete this.CSSTraits[css_class_name];
	}

	/* simply return a block of text with line numbers */
	RuntimeClass.prototype.addLineNumbers = function(buf){
	    var text_block_with_line_numbers = "";
	    var text_block_split_up = String(buf).split("\n");
	    for(var i = 0; i < text_block_split_up.length ; i ++)
	        text_block_with_line_numbers += (i+1)+": "+text_block_split_up[i] + "\n";
	    return text_block_with_line_numbers;
	};

	//INTENT: given a template_name, check both the document, and the ImportedTemplates store, for a node
	//(template tag) that contains the info needed to make the template. That info is parsed and stored in Hypertag.Runtime;
	//CompiledTemplateCache, CompiledTemplateOptionsCache which together will
	//be inspected and used when building a template of that given template_name. Tada! (note so callled "inner templates" DON'T get
	//processed here, but up to a point do use the same algorithms you'll see below) 
	RuntimeClass.prototype.TemplateCache = function(template_name){
	    if(Hypertag.Runtime.CompiledTemplateCache[template_name] !== undefined)
	        return Hypertag.Runtime.CompiledTemplateCache[template_name];

	    //if CompiledTemplateCache (and CompiledTemplateOptionsCache) have been defined -- usually by way of 
	    //a template including the output of DumpHypertagTemplatesToConsole() -- use it to populate our templates
	    //and, presumably, spare us the pain of parsing it ourselves, later.
	    if(Hypertag.Runtime.SavedCompiledTemplateCache && !Hypertag.Runtime.CompiledTemplateCache[template_name] && Hypertag.Runtime.SavedCompiledTemplateCache[template_name]){
	        //eval the jquery tmpl method
	        var jq_tmpl_method;
	    
	        try{
	            eval("var jq_tmpl_method = "+Base64.decode(Hypertag.Runtime.SavedCompiledTemplateCache[template_name]));
	        }catch(err){
	            err.message = "\nIn the context of the template: "+template_name+":\n\n"+err.message;
	            throw err;
	        }
	    
	        Hypertag.Runtime.CompiledTemplateCache[template_name] = jq_tmpl_method;
	        Hypertag.Runtime.CompiledTemplateOptionsCache[template_name] = Base64.decode(Hypertag.Runtime.SavedCompiledTemplateOptionsCache[template_name]);
	        return Hypertag.Runtime.CompiledTemplateCache[template_name];
	    }

	    else if(Hypertag.Compiler){
	        //other wise we didn't have it in our cache, or a predefined cache - build it.
	        Hypertag.Compiler.ImportIntoTemplateCache(template_name);

	        //hand back the xml for the template. The methods will be applied as the process needs it to be, indexed by the same name
	        return Hypertag.Runtime.CompiledTemplateCache[template_name];
	    }

	    else
	        throw "Hypertag requires the Hypertag.Compiler system be present, as running the template "+template_name+" would require";
	};

	/* .............................. */
	/* THIS COMES FROM DEVELOPMENT WITH THE COMPILER; THIS IS THE RUNTIME PORTION: */
	/* .............................. */

	/* INTENT: return a dict containing everything I need to start an app 
	   whether .app or .compiled. */

	RuntimeClass.prototype.info = function(path){
	    var data = {};

	    path = fat.normalizePath(path);
	    var pointer = fat.reference(path);

	    if(!pointer){
	        console.error("info could not find", path);
	        return false;
	    }

	    /* if it's a .compiled file, try to read it in */
	    if(path.endswith(".compiled")){
	    
	        try{
	            var file_contents = fat.read(path, false);
	        }catch(err){
	            throw path+" doesn't exist";
	        }
	    
	        try{
	            data = JSON.parse(Base64.decode(file_contents));
	        }catch(err){
	            throw path+" is not readable as .compiled app.";
	        }
	    }

	    else if(path.endswith(".app"))
	        data.appid = pointer.__uuid__;

	    else
	        throw "The path "+path+" was neither a .compiled or .app file";

	    /* provide defaults for both .app's and .compiled's */
	    if(!data.apppath)       data.apppath = path;
	    if(!data.icon)          data.icon = data.icon || pointer.__icon__ || '/common/Images/application/appicon.png';
	    if(!data.label)         data.label = justFileName(pointer.__path__);
	    if(!data.description)   data.description = data.label;

	    data.using = data.appid;

	    return data;
	};

	/* this is the same as run but will so call create() as to make sure the new node is inserted 
	   via inner_template, just like applications are. This lets the same code that runs in a windowed
	   app run some other arbitrary place.  */
	RuntimeClass.prototype.runAsInner = function(path, initvalues, create_target){
	    return this.run(path, initvalues, create_target, true);
	};

	RuntimeClass.prototype.run = function(path, initvalues, create_target, inner_template_flag){

	    /* its a common mistake to pass .app files to this. */
	    if(path.endswith(".app"))
	        throw "The runtime cannot compile .app files. Please provide a .compiled file instead.";

	    var compiled_app = this.load(path);

	    /* only create an element to go with the laod if we are not compiling tags only (hence the option compileTagsOnly) */
	    if(create_target !== false)
	        /* finally, add and return the new hypertag, as a (not yet fully inited!) app. (It will become
	          fully inited after it's opening animation i.e. Hypertag.GUI.duration) */
	        return create_target ? 
	            create(create_target, compiled_app.appid, initvalues, undefined, inner_template_flag) : 
	            Hypertag.GUI.Desktop.addApp(path, initvalues);

	    else
	        return compiled_app.appid;
	};

	RuntimeClass.prototype.loadFromString = function(buf){
	    return this.load(buf, true);
	};

	/* load a file from it's file form into memory for use. return obj describing it */
	RuntimeClass.prototype.load = function(path, pathIsValueFlag){
	    var self = this;

	    /* if pathIsValueFlag is true, assume path is actually text of compiled thing to load */
	    if(pathIsValueFlag !== true){
	        if(!fat.exists(path))
	            return false;

	        var file_contents = fat.read(path, false);
	    }

	    else
	        var file_contents = path;

	    try{
	        /* parse json from a jszip file */
	        var compiled_app = JSON.parse(Base64.decode(file_contents));
	    }catch(err){
	        throw "Cannot load the app "+(pathIsValueFlag === true ? "(from string)" : path)+". May require the compilation module."+err;
	    }

	    /* only if the app hasnt been imported before */
	    if(!Hypertag.Runtime.CompiledTemplateCache[compiled_app.appid]){
	        for(var full_hypertag_name in compiled_app.hypertags){
	            var entry = compiled_app.hypertags[full_hypertag_name];

	            /* decode template method */
	            var jq_tmpl_method;
	            eval("jq_tmpl_method = "+entry.hypertag);
	            Hypertag.Runtime.CompiledTemplateCache[full_hypertag_name] = jq_tmpl_method;

	            /* decode hypertag options block */
	            var jq_tmpl_options;
	            eval("jq_tmpl_options = "+entry.options);
	            Hypertag.Runtime.CompiledTemplateOptionsCache[full_hypertag_name] = jq_tmpl_options;                

	            /* decode extends param */
	            Hypertag.Runtime.ExtendsTemplateLookup[full_hypertag_name] = JSON.parse(entry.does_extend);

	            /* and tag type */
	            if(entry.tagtype)
	                Hypertag.Runtime.TemplateTagType[full_hypertag_name.toLowerCase()] = entry.tagtype;

	            /* re-synthesize the TemplateLowercaseLookup entry */
	            Hypertag.Runtime.TemplateLowercaseLookup[full_hypertag_name.toLowerCase()] = full_hypertag_name;
	        
	            Hypertag.Runtime.TemplateReverseAliases[compiled_app.appid] = entry.name;
	        }

	        /* add any CSS that came from the application as a new sheet on the body */
	        self._addCSSByKey(compiled_app.css, compiled_app.appid);
	        //self._executeJSInApp(compiled_app.js, GLOBAL);
	    }

	    /* for compat with another newer pattern */
	    compiled_app.using = compiled_app.appid;

	    return compiled_app;
	};

	/* synonmyous with the .tag function in the compiler, i return the id to use for a given path with .tag */
	RuntimeClass.prototype.tag = function(path){
	    return this.load(path).appid;
	};

	/* run javascript such that self = app and listens are all set to 
	   the life time of app (app.listen(...)) */
	RuntimeClass.prototype._executeJSInApp = function(javascript, app){
	    try{
	        /* just as simple as can be; no access to the new application, but ability to declare globals */
	        console.log("    ... running global javascript for", app.data.apppath);
	        window.eval(javascript);
	    }

	    catch(err){
	        throw "Error in Javascript:\n\n"+Hypertag.Runtime.addLineNumbers(javascript)+"\n\nError executing script. Error is:\n\n"+String(err);
	    }
	};

	/* THESE ROUTINES HANDLE ADDING CSS SENSIBLY (AND WITH TEXT PROCESSING) */

	/* add a set of css declarations under a key which will ensure uniqueness - that is, 
	   if a css sheet exists under that key, it is first removed. */
	RuntimeClass.prototype._addCSSByKey = function(csstext, key){
	    var self = this;
	    /* create a new style tag */
	    var sheet = document.createElement('style');

	    /* use the style_id to make sure we keep one css sheet on the body per app (not ever-escalating numbers) */
	    if(Hypertag.Runtime.styles[key])
	        $(Hypertag.Runtime.styles[key]).remove();

	    /* update bookeeping for next time we replace it. */
	    Hypertag.Runtime.styles[key] = sheet;

	    /* and finally fill in the contents of the new style tag, committing it to the body */
	    sheet.innerHTML = csstext;
	    document.body.appendChild(sheet);

	    /* return the csstext (with selfs replaced if appropriate) */
	    return csstext;
	};

	/* remove a css sheet, given the key it was stored under */
	RuntimeClass.prototype._removeCSSByKey = function(key){
	    /* remove the sheet if it exists */
	    if(Hypertag.Runtime.styles[key]){
	        $(Hypertag.Runtime.styles[key]).remove();
	        delete Hypertag.Runtime.styles[key];
	    }
	};

	/* this will identify, extract, and return the codeblock as present on a dom node
	   (that is, it will erase and return the codeblock, preparing the item for first run) */
	RuntimeClass.prototype._extractCodeblock = function(item){
	    var codeblock = "";

	    //accumulate text - for options - and nodes - for support of the anonymous template interior to the tag
	    var firsttextblock = true;

	    /* this gets rid of nodes - after the loop to accumuate text (and add comments
	       for deletion) */
	    var nodesToRemove = [];

	    //get any text of the hypertag to use as js options
	    for(var i = 0, node; (node = item.childNodes[i]) ; i ++){

	        /* if text both accumulate it and add it to be deleted afterward */
	        if(node.nodeType == 3){
	            codeblock += node.nodeValue;
	            nodesToRemove.push(node);
	        }

	        /* if it's a comment also add that to be deleted */
	        else if(node.nodeType == 8)
	            nodesToRemove.push(node);
	    }

	    /* this gets rid of comments - they can mess up having a single outputted node, a requirement for lists. */
	    var node;
	    while((node = nodesToRemove.shift()))
	        item.removeChild(node);
	    
	    return codeblock;
	};

	RuntimeClass.prototype.makeElementNavigable = function(self){
	    //see use of _resolveParentReferences in hypertag.js, in HypertagClass init.
	    var references = HypertagClass.prototype._resolveParentReferences.call(self);
	    self.parentview = self.parent = references[0];
	    self.templateroot = self.root = references[1]
	    self.itemroot = references[2];
	    self.directory = references[3];

	    var elementMethods = HypertagClass.prototype;

	    self.$sibling = elementMethods.$sibling;
	    self.$child = elementMethods.$child;
	    self.$named = elementMethods.$named;

	    self.child = elementMethods.child;
	    self.named = elementMethods.named;
	    self.sibling = elementMethods.sibling;

	    self.hasChild = elementMethods.hasChild;
	    self.hasNamed = elementMethods.hasNamed;
	    self.hasSibling = elementMethods.hasSibling;

	    self.lookup = elementMethods.lookup;
	    self.lookupobj = elementMethods.lookupview;
	    self.lookupview = elementMethods.lookupview;
	    self.lookuptag = elementMethods.lookuptemplate;
	    self.lookuptemplate = elementMethods.lookuptemplate;
	    self.lookupname = elementMethods.lookupname;
	    self.lookupset = elementMethods.lookupset;
	    self.lookuplisten = elementMethods.lookuplisten;
	}

	/* if the GUI debugger isn't included */
	Hypertag.Debugger = {
	    exceptions:[]
	};

	//some shorter aliases
	GLOBAL.Debugger = Hypertag.Debugger;
	GLOBAL.debug = Hypertag.Debugger;

	// The hypertrust debugger component will overwrite this to divert messages to it's view
	// otherwise, it's just a way of printing messages to the console with a traceback.
	Hypertag.Debugger.error = function(msg){
	    /* this is important (and should be heavily documented)
	       that when an exeception occurs, we should always empty the 
	       buffer. This has the side effect of disabling buffering for the
	       rest of the run, but has the advantage of ensuring the number of 
	       starts and stop are never left unbalanced, causing what appears 
	       to be events no longer working */
	    if(GLOBAL.fat)
	        while(fat.stop());

	    Hypertag.Runtime.ErrorExpanding = true;

	    var trace = printStackTrace().slice(4).join("\n");
	    var msg = String(arguments[0])+"\n";
	    
	    for(var i = 1; i < arguments.length ; i ++)
	        msg += "    "+String(arguments[i])+" ";

	    console.error("(ERROR)\n"+msg); /* debugger is already well delimed so dont add to msg */
	    set(Hypertag.Debugger, '__error__', msg);
	};

	Hypertag.Debugger.warning = function(msg){
	    var trace = printStackTrace().slice(4).join("\n");
	    var msg = String(arguments[0])+"\n";
	    
	    for(var i = 1; i < arguments.length ; i ++)
	        msg += "    "+String(arguments[i])+" ";

	    console.warn("(warning)\n"+msg); /* debugger is already well delimed so dont add to msg */
	    set(Hypertag.Debugger, '__warning__', msg);
	};

	Hypertag.Debugger.log = function(msg){
	    var trace = printStackTrace().slice(4).join("\n");
	    var msg = String(arguments[0])+"\n";
	    
	    for(var i = 1; i < arguments.length ; i ++)
	        msg += "    "+String(arguments[i])+" ";

	    console.log("(comment)\n"+msg); /* debugger is already well delimed so dont add to msg */
	    set(Hypertag.Debugger, '__comment__', msg);
	};

	//depreciated
	Hypertag.Debugger.comment = Hypertag.Debugger.log;

	/* 
	    COMPILER for HYPERTAG RUNTIME, loads from script tag into memory., c. 2012-2014 JAMES ROBEY, jrobey.services@gmail.com. 
	    All Rights Reserved. Look for the package runtime release to distribute your own open-source appications.
	*/

	GLOBAL.CompilerClass = function(){
	    var self = this;

	    /* at the moment this only controls if the path of a compiled hypertag is included on itself, 
	       for debugging purposes. The runtime will use it if it's there */
	    self.debug = true;

	    /* a place to keep a reverse uuid to name lookup for better debug messages */
	    self.uuid_to_name_debug_lookup = {};

	    return self;
	};

	/* thanks stackoverflow @ http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript */
	/* this is better then random because the time is taken into account, unlike many such algos
	   and the result is a valid javascript variable name
	 */
	CompilerClass.prototype.guid = function(){
	    return "X"+TrustAPI.uuid(16).replace(/\//g, "_").replace(/\+/g, "-");
	};

	//INTENT: given a template name, search various sources and, using the text from that source,
	//create an actual template stored in various buckets to be used when a template of that type is made.
	//this is run when the template is not already loaded.
	CompilerClass.prototype._regExpForConstants = /\#\#\#\w+?\#\#\#/g;
	CompilerClass.prototype.ImportIntoTemplateCache = function(template_name){
	    var self = this;

	    //we only want to process constants on named templates BEFORE anonymous templates are substituted
	    var process_constants = false;

	    //INTENT: try to get the template node from one of the imported template stores
	    var templatenode = Hypertag.Runtime.AnonymousTemplateNodes[template_name];

	    //if we are importing a non-anonymous template for the first time, process constants.
	    if(!templatenode){
	        templatenode = Hypertag.Runtime.TemplateNodes[template_name] || $('#'+template_name)[0];
	        process_constants = true;
	    }
	    
	    //INVESTIGATE ONLY PROCESSING SUPERSTYLES WHEN COMING FROM SCRIPT TAG

	    //Finally, if neither worked, the template was not found.
	    if(!templatenode)
	        throw template_name+" was invoked template of that name has not been defined. Check for errors.";

	    //move attribute/value pairs from the template node to the codeblock, where possible, 
	    //making it possible to assign variables or the special 'classes' attribute from the template tag.
	    //it wraps the content in quotes normally, but it will recognize %{x} as meaning to print the 
	    //value without quotes, which in the codeblock syntax makes it eval'd like we want.
	    //(this is of no use in the file-based compiler, but is of use when writing raw template tags.)
	    templatenode = self._parseAttributesIntoCodeBlock(templatenode);

	    //the text to use from the template has certain conventions we enable to get around the limits of HTML.
	    var templatenode_text = PrintXML(templatenode)
	        .replace(/\&lt\;/g, "<") //these two lines MUST be here for FF - FF 'encodes' template tag text when it prints them.
	        .replace(/\&gt\;/g, ">") //"""
	        .replace(/\[\=/g, "{{= ")
	        .replace(/\=\]/g, "}}")
	        .replace(/\\\/\\\//g, "//")
	        .replace(/\&quot\;/g, "\"")
	        .replace(/\&(?!\w|\#)/g, '&amp;');

	    //PROCESS TEMPLATE CONSTANTS

	    //if they should, find out if any css class in the string is parenthesized
	    if(process_constants){
	        var matches = templatenode_text.match(self._regExpForConstants);
	        
	        if(matches)
	            for(var j = 0; j != matches.length; j ++){
	                var constant = matches[j].slice(3, -3);
	                var constant_scoped = template_name+"."+constant;
	                var constant_text = Hypertag.Compiler._constantsLookup[constant_scoped] || Hypertag.Compiler._constantsLookup[constant];

	                if(!constant_text)
	                    Hypertag.Debugger.error("A constant, \""+constant+"\", was used that isn't defined (in template \""+template_name+"\").");

	                else
	                    templatenode_text = templatenode_text.replace(matches[j], constant_text);    
	            }
	    }

	    //get the full xml of the script tag to use in assembling a jquery template!
	    //we GOTTA declare the namespace or firefox hates on us!
	    var template_dom = ParseXML("<div xmlns='http://www.w3.org/1999/xhtml'></div>");
	    var template_nodes = ParseXML(templatenode_text);
	    for(var i = 0; i < template_nodes.childNodes.length ; i ++)
	        template_dom.appendChild(template_nodes.childNodes[i].cloneNode(true)); //must clone, why i do not know.

	    //INTENT: handle __ready__, __init__, etc. code at top of named-templates!
	    //looking at the children of the dom'd template, pull out any
	    //text saving it in codeblock, (taking all dom elements and saving them for templates, later)
	    var codeblock = "";
	    var nodesToRemove = [];

	    for(var i = 0, node; (node = template_dom.childNodes[i]); i ++){
	        if(node.nodeType == 3){
	            codeblock += node.nodeValue;
	            nodesToRemove.push(node);
	        }

	        /* this gets rid of comments - they can mess up having a single node for lists.. */
	        else if(node.nodeType == 8)
	            nodesToRemove.push(node);
	    }

	    /* by removing nodes AFTER we accumulate text
	       we can delete both text and comment nodes without upsetting the 
	       loop above. */
	    var node;
	    while((node = nodesToRemove.shift()))
	        template_dom.removeChild(node);

	    //for each key in the resulting dict (evaling the text at the top level), 
	    //find each given name, in turn, in the global scope. Use the template name
	    //as the key on global dict - and the value here as the value there.
	    //in this way we build __init__.Templatename = func() structures,
	    //like we want.
	    if(codeblock){
	        codeblock = codeblock
	            .replace(/\%lt\;/g, "<")
	            .replace(/\%gt\;/g, ">")
	            .replace(/\{\-/g, "<")
	            .replace(/\-\}/g, ">")
	            .replace(/\&quot\;/g, "\"")
	            .replace(/\&amp\;/g, "&");

	        //Turn codeblock into a dict (i.e. "x" -> "{x}", with any trailing comma of x removed)
	        codeblock = codeblock.trim();
	        if(codeblock.slice(-1) == ",")
	            codeblock = codeblock.slice(0, codeblock.length-1);
	        codeblock = "{" + codeblock + "}";

	        //if jslint is available this will check the code for errors.
	        if(Hypertag.Runtime.debug){
	            var result = checkDictionaryForErrors(codeblock);
	            if(result)
	                throw "SYNTAX ERROR: " + String(result) + '\n\nCode is:\n\n' + Hypertag.Runtime.addLineNumbers(codeblock);
	        }

	        //copy all methods over to a storage area for use when making instances
	        Hypertag.Runtime.CompiledTemplateOptionsTextCache[template_name] = codeblock;

	        try{
	            eval("var codeblock_method = function(self){return "+codeblock+";};");
	        }catch(e){
	            var msg = "Hypertag Compiler\n    An error occurred compiling "+self.uuid_to_name_debug_lookup[template_name.slice(2)] || template_name+":\n\n    "+String(e);
	            /* Hypertag.Debugger.error(msg); */
	            throw msg;
	        }

	        Hypertag.Runtime.CompiledTemplateOptionsCache[template_name] = codeblock_method;
	    }

	    /* if there is no codeblock provide a default!  */
	    else{
	        //copy all methods over to a storage area for use when making instances
	        codeblock = "false";
	        Hypertag.Runtime.CompiledTemplateOptionsTextCache[template_name] = codeblock;

	        try{
	            eval("var codeblock_method = function(self){return "+codeblock+";};");
	        }catch(e){
	            throw "Hypertag Compiler\n    An error occurred compiling "+self.uuid_to_name_debug_lookup[template_name.slice(2)] || template_name+":\n\n    "+String(e);
	        }

	        Hypertag.Runtime.CompiledTemplateOptionsCache[template_name] = codeblock_method;   
	    }

	    //for each template we will cache, process it for tags meant to be 
	    //replaced (class tags) i.e <foo> becomes <div class="hypertag" template="foo"/>
	    //which when combined with the text the user types, will form the finished tag.
	    self._ConvertHypertagsToInstances(template_name, template_dom);

	    //INTENT: for each anonymous template found, turn it into a "Real" template and substitute.
	    //This is recursive - any further anonymous template found will again be realified
	    self._RecursivelySubstituteRealTemplatesForAnonymousOnes(template_name, template_dom);

	    //Back to text instead of DOM...
	    //_decodeURIsInNodeAttributes: FF wants to be "helpful" (give me a break!) and escape anything in src or href attrs.. even when
	    //using DOMParser! This means that {{= x}} would be escaped to %7D%7D=%20x%7B%7B and so would not be recognized by
	    //the jquery templates var replacement! This sets it back to right -- via string replacement, efficiently -- and ONLY on those attrs
	    //that need it (i.e. src, href)
	    templatenode_text = self._decodeURIsInNodeAttributes(['src', 'href'], PrintInnerXML(template_dom));

	    try{
	        templatenode_text = templatenode_text
	            .replace(/\%amp\;/g, "&amp;")
	            .replace(/\%lt\;/g, "&lt;")
	            .replace(/\%gt\;/g, "&gt;")
	            .replace(/\{\-/g, "&lt;")
	            .replace(/\-\}/g, "&gt;")
	            .replace(/\&quot\;/g, "\"")
	            .replace(/\&amp\;/g, "&");

	        var template = $.template(templatenode_text);
	        Hypertag.Runtime.CompiledTemplateCache[template_name] = template;
	    }catch(err){
	        throw "problem compiling the template "+template_name+", "+err+".\n\n"+templatenode_text;
	    }

	    templatenode = null;
	    templatenode_text = null;
	    template_dom = null;
	};

	//INTENT: Look at a template dom as written in a templateag
	//and, for each inner_template identified, turn it into
	//a "real" template, substituting the anonymous contents
	//for that synthesized, unique "real" template name made.
	//If this is done recursively, then any template will 
	//spawn N "anonymous" (but real) templates that will combine
	//to create the final struture as envisioned.
	CompilerClass.prototype._RecursivelySubstituteRealTemplatesForAnonymousOnes = function(template_name, template_dom){

	    /* SO important for compiling - keep a list of all anonymous templates spawned from
	       rhia one, for packaging, later. */
	    if(Hypertag.Runtime.AnonymousTemplatesForTemplate[template_name] === undefined)
	        Hypertag.Runtime.AnonymousTemplatesForTemplate[template_name] = {};

	    //our standard setup for a non-recursive traversal of the DOM:
	    var all_elems = $.makeArray(template_dom.childNodes);
	    var elem;
	    while(elem = all_elems.shift()){
	        //if not a tag, (comment, text, etc) skip.
	        if(elem.nodeType != 1)
	            continue;

	        //if a hypertag, take contents and make a template using import!
	        else if(hasClass(elem, "hypertag")){

	            //Figure out what inner_template_nodes if any exist on this hypertag
	            var inner_template_nodes = [];
	            var children = $.makeArray(elem.childNodes);
	            for(var i = 0; i < children.length ; i ++)
	                if(children[i].nodeType == 1){
	                    //save the node to be processed below
	                    inner_template_nodes.push(children[i].cloneNode(true));
	                    //remove the tag from the template - it will be referred to by uuid from here on.
	                    elem.removeChild(children[i]);
	                }          

	            //if there were inner_template_nodes, make it template; register it with a uuid put back on the hypertag. done!
	            if(inner_template_nodes.length){
	                //suck up anonyous template nodes -- any (nodeType == 1) in the elem
	                var inner_template = EmptyTemplate.cloneNode(true);

	                //for each anonymous template node discovered above, insert it into the div, above, the container of our template-to-make.
	                for(var i = 0; i < inner_template_nodes.length ; i ++)
	                    inner_template.appendChild(inner_template_nodes[i]);

	                //set the id by which the template will be stored. But.. A TWIST!
	                //if we derive the template name based on MD5 (quick) of domain+anontemplate text,
	                //any /exactly/ the same template will share but one template, no matter where it be written.
	                //yes, extra cycles to gen an md5 and collisions will be rare, but i like it.
	                var uuid = MD5(PrintXML(inner_template));

	                //pass the newly made anon template to the TemplateCache to add ('cause it won't add twice, so md5 id is not duped!)
	                Hypertag.Runtime.AnonymousTemplateNodes[uuid] = inner_template;
	                Hypertag.Runtime.TemplateLowercaseLookup[uuid.toLowerCase()] = uuid;

	                //record that an anonymous template is the result of compiling the main template passed in
	                Hypertag.Runtime.AnonymousTemplatesForTemplate[template_name][uuid] = true;

	                //Finally, importantly (isn't it all) add the option that will associate the hypertag instance with it's anonymous template, as made above.
	                elem.setAttribute("inner_template", uuid);
	            }
	        }

	        //if not a hypertag, merely add it's children, if any, to be further considered.
	        else{
	            var children = $.makeArray(elem.childNodes);
	            if(children.length)
	                for(var i = 0; i < children.length ; i ++)
	                    if(children[i].nodeType == 1)
	                        all_elems.push(children[i]);
	        }
	    }

	    return template_dom;
	};

	/*INTENT: store compiled templates AND make top-level text-defined method name and bodies
	  as the evaluated-value stored on some global tracking object (like __ready__ defined here 
	  will become an entry for the template's ready, i.e. __ready__.sometemplate)

	  The template compiler will erase those text nodes it finds with init methods at the top 
	  of the template, and write the string resulting from those deletions to be the actual template
	  so the programmer can give us input text (in the dom) that's not in the output text (in the dom)=
	  required for allowing a very nice init mechanism like this:

	  <script id="somename" type="text/hypertag>"
	       __ready__:function(){
	           ... 
	       },

	  ...to be the methods that run when this template is loaded
	  and the default given for this template.

	  i don't see it as a drain on resources, doing this sort of 
	  prep work. It only happens on first-load only. it's quick.
	  NOTE templates are parsed with DOMParser, not innerHTML, as with jquery. */

	/* INTENT: Add text as a template-canidate, that is, able to be requested
	   from the TemplateCache
	   given text which contains N hypertag template tags, 
	   turn them into template canidates. Return a list of all the new 
	   templates loaded. (*) */
	CompilerClass.prototype.ImportTemplatesFromText = function(templatetagstext, overwrite){
	    var self = this;
	    var templates_loaded = [];

	    //this is an obscure issue - when we get text from a template tag that contains
	    //an ampersand, it will be misinterpretted by XML parsing, so we turn it back
	    //into &amp; as required. if this breaks something else i'm so sorry.
	    templatetagstext = templatetagstext.replace(/\&(?!(\#|amp\;))/g, "&amp;");

	    //we GOTTA declare the namespace or firefox hates on us!
	    var dom = ParseXML("<div xmlns='http://www.w3.org/1999/xhtml'>"+templatetagstext+"</div>");

	    for(var i in dom.childNodes){
	        var node = dom.childNodes[i];

	        //only add template nodes - ignore all other elements for purposes of import.
	        if(node.nodeType == 1 && 
	           node.tagName == "script" && 
	           (node.attributes.getNamedItem("type").nodeValue.endswith("/hypertag"))){

	            //the id or name to store the template tag on, with an error if not there
	            var template_id = node.attributes.getNamedItem("id").nodeValue;

	            templates_loaded.push(template_id);

	            //store the xml of the template (so we can serialize later)
	            Hypertag.Runtime.TemplateNodes[template_id] = node;

	            //make a new entry on the TemplateLowercaseLookup to make sure we can find it, even when dom nodes are all one case.
	            Hypertag.Runtime.TemplateLowercaseLookup[template_id.toLowerCase()] = template_id;

	            //a lookup pairing template name to tagtype
	            var tagtype = node.getAttribute('tagtype');
	            if(tagtype)
	                Hypertag.Runtime.TemplateTagType[template_id.toLowerCase()] = tagtype;

	            //setup any extends by passing our template_name and the extends attribute from it, if any
	            self._PerformSetupForExtendAttribute(template_id, node.attributes.getNamedItem("extend"));

	            //if the overwrite flag is set, we want to also scrub the cache of any existing template by that name so it will be reloaded.
	            if(overwrite){
	                if(Hypertag.Runtime.CompiledTemplateCache[template_id])
	                    delete Hypertag.Runtime.CompiledTemplateCache[template_id];
	                if(Hypertag.Runtime.CompiledTemplateOptionsCache[template_id])
	                    delete Hypertag.Runtime.CompiledTemplateOptionsCache[template_id];
	            }       
	        }
	    }

	    //return a list of the new templates we've loaded, as their fully qualified names (i.e. 'server:8080/sometemplate)
	    return templates_loaded;
	};

	//I will look for script tags that include libraries (it must use URL not SRC attribute)
	//and load the contents into the body. this will occur BEFORE the first round of tag import
	//allowing any number of libraries to be imported simply and quickly.
	CompilerClass.prototype._LoadedLibraries = {};
	CompilerClass.prototype._LoadLibrariesFromScripts = function(after){
	    var self = this;
	    var libraries = $("script[type='library/hypertag']");

	    //if there are no more libraries found, run the "after" method
	    //note that the return value is never actually passed back, as 
	    //it's already at least one setTimeout in.        
	    var LibrariesLeft = libraries.length;
	    if(!LibrariesLeft) return after();

	    for(var i = 0; i != libraries.length; i ++){
	        var $library = $(libraries[i]);
	        var url = $library.attr('url');
	        var hash = $library.attr('hash') || false;        
	        var cache = $library.attr('cache') || false;        

	        $library.remove();

	        if(!self._LoadedLibraries[url])
	            $.ajax({
	                url:url,
	                async:true,
	                dataType:"String",
	        
	                complete:function(url, cache){
	                    return function(response){
	                        if(response.responseText){
	                            var text_hash = MD5(response.responseText);
	                            console.log("Loading library at "+url+"...");

	                            if(hash && hash !== text_hash){
	                                var abort = confirm("Loading "+url+" had a bad hash. ("+text_hash+" should have been "+hash+". ABORT LOADING?");
	                                if(abort) window.location.href= "//";
	                            }
	                            

	                            else
	                                Hypertag.$Body.append(response.responseText);
	                        
	                            -- LibrariesLeft;
	                    
	                            if(!LibrariesLeft){
	                                self._LoadedLibraries[url] = true;
	                                setTimeout(function(){
	                                    self._LoadLibrariesFromScripts(after);
	                                }); 
	                            }
	                        }       
	                    }
	                }(url, cache)
	            });
	    }

	    //any tags appended above wont be discoverable by selector until after
	    //a timeout. Using setTimeout (and forwarding the after method to run
	    //after no more libraries are found, principally to initially start 
	    //expanding hypertags) we can continue to search for more libraries
	    //a library might have included, ad infinitum.  
	};

	//This code makes an instance out of a definition!
	//INTENT: go through all the elements evaluting tagname, as well as attributes and text,
	//for changes and replacements that make the XML stamped out correct for the *instance*
	//being made (as opposed to the definition the programmer provides via the xml templates).
	//This only works on DOMParser XML, not HTML nodes, fwiw.
	CompilerClass.prototype._ConvertHypertagsToInstances = function(template_name, template_dom){
	    var allitems = $.makeArray($(template_dom).children());
	    var itemsready = [];

	    //find all our (recursive) children, as a list
	    while(allitems.length){
	        var item = allitems.pop();

	        //cheap trick - hypertag is not vetted for SVG yet, let's not to any name conversions to svg tags or anything inside them, for now.
	        if(item.tagName.toLowerCase() != 'svg' || item.getAttribute('tagtype').toLowerCase() != 'svg'){
	            itemsready.push(item);

	            var children = $.makeArray($(item).children());
	            for(var k = 0; k < children.length; k ++)
	                if(children[k].nodeType == 1)
	                    allitems.push(children[k]);
	        }   
	    }

	    //evaluate the items in reverse, as needed for .replaceWith(), since by changing
	    //the node-context, the next write would be to the old one, if we didn't evaluate in this order. 
	    itemsready.reverse();

	    //regex to find any superstyle in a template's class attribute
	    var regExpForSuperStyles = /\(\w+?\)/;

	    //for each item ready to be processed, do so if it's tag name warrants it.
	    for(var i = 0, item; (item = itemsready[i]) ; i ++){
	        var tagname = item.tagName.toLowerCase();

	        //determine if any superstyles should be searched for
	        var classes = item.getAttribute('class');

	        //if they should, find out if any css class in the string is parenthesized
	        if(classes){
	            var matches = classes.match(regExpForSuperStyles);
	        
	            if(matches){
	                for(var j = 0; j != matches.length; j ++){
	                    var superstyle = matches[j].slice(1, -1);
	                    var superstyle_scoped = template_name+"."+superstyle;
	                    var superstyle_classes = Hypertag.Compiler._superstyleLookup[superstyle_scoped] || Hypertag.Compiler._superstyleLookup[superstyle];

	                    if(!superstyle_classes)
	                        Hypertag.Debugger.error("A superstyle, \""+superstyle+"\", was used that isn't defined (in template \""+template_name+"\").");

	                    if(superstyle_classes)
	                        classes = classes.replace(matches[j], superstyle_classes);    
	                }

	                item.setAttribute('class', superstyle+" "+classes);
	            }
	        }

	        //make a new div with the class attributes (plus class "hypertag" copied over)
	        //with the template parameter set the to the tagname before we replaced it with this.
	        if(!Hypertag.Runtime.html_tag_names[tagname]){                     

	            //get the tag type -- if any -- for this template. usually div.
	            var tag = item.getAttribute('tagtype') || Hypertag.Runtime.TemplateTagType[tagname] || "div";
	    
	            //we GOTTA declare the namespace or firefox hates on us!
	            var new_div = ParseXML("<"+tag+" xmlns='http://www.w3.org/1999/xhtml'>"+PrintInnerXML(item)+"</"+tag+">");
	    
	            var template_name_to_use = Hypertag.Runtime.TemplateLowercaseLookup[tagname];
	            if(Hypertag.Runtime.CompiledTemplateAttributeNames[template_name_to_use])
	                for(var key in Hypertag.Runtime.CompiledTemplateAttributeNames[template_name_to_use])
	                    new_div.setAttribute(key, Hypertag.Runtime.CompiledTemplateAttributeNames[template_name_to_use][key]);
	        
	            //copy over attributes from old tag to new
	            //IMPORTANT: looks like prop() and attr() DONT do the same thing! doesn't work with .prop()...
	            for(var j = 0; j < item.attributes.length ; j ++)
	                new_div.setAttribute(item.attributes[j].nodeName, item.attributes[j].nodeValue);

	            var classes = new_div.getAttribute('class');
	            var new_class_value = !classes ? "hypertag" : "hypertag " + classes;
	            new_div.setAttribute("class", new_class_value);

	            //if the tag name is not "view", use the tagname as the template name.
	            //the "view" tag is reserved and special - it is equiv. to <div class="hypertag">
	            //by itself.
	            if(tagname != 'view'){
	                //make sure it was found
	                if(tagname.toLowerCase() == 'parsererror'){
	                    var p = template_dom;
	                    while(1){
	                        if(!p.parentNode)
	                            break;
	                        else
	                            p = p.parentNode;
	                    }
	            
	                    var msg = "XML PARSER PROBLEM (in tagname "+tagname+") when converting hypertag to html instance: \n\n"+PrintXML(p)+"\n\n----\n\n"+PrintXML(template_dom);
	                    /* Hypertag.Debugger.error(msg); */
	                    throw msg;
	                }

	                else if(!template_name_to_use){
	                    var msg = "You're trying to instantiate a '"+tagname+"' hypertag, but a template tag/id for that template has not been defined, or it is not of type 'text/hypertag'! (please note the name is case insenstive)";
	                    /* Hypertag.Debugger.error(msg); */
	                    throw msg;
	                }

	                //and if it was, prepend the right template name for the html tag given, given case insenstivity.
	                new_div.setAttribute("template", template_name_to_use);
	            }

	            //finally, replace the hypertag/view in the document with the same item rewritten to invoke that template/no template.
	            item.parentNode.replaceChild(new_div, item);  
	    
	        }
	    }

	    return template_dom;
	};

	//written by James Robey, jrobey.services@gmail.com
	CompilerClass.prototype._decodeURIsInNodeAttributes = function(attrs, text){
	    //make a copy of the string, we don't want to alter it
	    text = String(text);

	    //stores the table of things to replace (key) with what to replace it with (value)
	    var replaces = {};

	    //always deal with N attrs to decode
	    if(!(attrs instanceof Array))
	        attrs = [attrs];

	    for(var i = 0; i < attrs.length ; i ++){
	        //the attr we are looking to decodeURI the contents of:
	        var attr = attrs[i];

	        //what shows up before strings we want to convert
	        var attr_open = " "+attr+"=\"";

	        //what closes strings we want to convert
	        var attr_close = "\"";

	        //the intermediate_str holds the string as we check it
		    var intermediate_str = String(text);

		    //the index for the start of an expanse to be considered for replacement
		    var startidx;

		    //for each instance of the attribute we find in the text
		    while((startidx = intermediate_str.indexOf(attr_open)) != -1){
		        //chop off all before it so we start at the text to replace
		        var intermediate_str = intermediate_str.slice(startidx+attr.length+3);

		        //find, and chop off all after, the end of the text to replace
		        var repl_str = intermediate_str.slice(0, intermediate_str.indexOf(attr_close));

		        //if the range to be decoded DOESN'T have a substr correlating with the replacement syntax (i.e. "{{= "), ignore it!
		        if(repl_str.indexOf("%7B%7B=%20") == -1)
		            continue;

		        //store the string to replace as the key and the string to replace it with as the value
		        //includin the attribute name to be very sure only it gets replaced (i.e. not accidentally replacing somehing not in the attr)
		        replaces[attr_open+repl_str+attr_close] = attr_open+decodeURI(repl_str)+attr_close;
		    }
	    }

	    //do the actual replacements with as few operations as possible and only where needed (the point of the exercise)
	    for(var repl_str in replaces)
	        text = text.replace(repl_str, replaces[repl_str], 'g')

	    return text;
	};

	//INTENT: for each attribute on a template tag, add a line to a text string prepended to the template node, simulating 
	//the template as if the attributes were written there, instead. They will be processed for hitches 
	//when the template options are processed, indeed, all strings from any options are processed
	CompilerClass.prototype._parseAttributesIntoCodeBlock = function(node, template){
	    //must clone and return or we edit dom we dont want to
	    var node = node.cloneNode(true);

	    //the string to append to the codeblock of the template tag, if any
	    var output = "";

	    //for each attribute we...
	    for(var i = 0, attr; (attr = node.attributes[i]) ; i ++)
	        if(attr.nodeName != 'id' && attr.nodeName != 'type'){
	            var name = attr.nodeName;
	            var value = attr.nodeValue;

	            //find out, is the attribute a string, or meant to be javascript?
	            //if it's javascript, merely fail to quote it, putting the str. verbatim
	            //as the value of the option
	            output += name+":\""+value+"\",\n";
	        }

	    if(output)
	        $(node).prepend("\n"+output);

	    return node;
	};

	/* INTENT: for every jquery template tag we find, build a lookup table of caseinsensitive to case sensitive names that
	   let us know what lower case name from dom node's tagname corresponds with the cased-version the user specified in template tag ID
	   defining that hypertag. */
	CompilerClass.prototype._BuildTemplateLookups = function(){
	    var self = this;
	    $('script').each(function(){
	        if(this.type.endswith('/hypertag')){
	            var template_id = this.attributes.getNamedItem("id").nodeValue;
	            var tag = this.attributes.getNamedItem("tagtype");
	            tag = tag ? tag.nodeValue : "div";

	            var lower_case_name = template_id.toLowerCase();

	            //store a reference to the name we got as lower case - in this way when a named template is made, 
	            //we can easily find it's "real" name from it's all lowercase one. (other suggestions appreciated :)
	            Hypertag.Runtime.TemplateLowercaseLookup[lower_case_name] = template_id;

	            //a lookup pairing template name to tagtype
	            Hypertag.Runtime.TemplateTagType[lower_case_name] = tag;

	            //setup any extends by passing our template_name and the extends attribute from it, if any
	            self._PerformSetupForExtendAttribute(template_id, this.attributes.getNamedItem("extend"));
	        }
	    });
	};

	//scan all the template tags with processor = shml and process them
	CompilerClass.prototype._ProcessSHMLTemplateTags = function(){
	    var self = this;
	    $('script').each(function(){
	        if(this.type.endswith('/hypertag')){
	            var templatetext = PrintInnerXML(this)
	                .replace(/\&lt\;/g, "<") //these two lines MUST be here for FF - FF 'encodes' script tag text when it prints them.
	                .replace(/\&gt\;/g, ">")
	                .replace(/\&quot\;/g, "\"")
	                .replace(/\&(?!\w|\#)/g, '&amp;');
	    
	            if(templatetext.indexOf("<!--") === 0){
	                var end_of_directive_idx = templatetext.indexOf("->");
	                if(end_of_directive_idx !== -1 && ["dialect shml", "markup shml"].indexOf(templatetext.slice(4, end_of_directive_idx-1).trim().toLowerCase()) !== -1)
	                    $(this).html(Hypertag.SHML.process(templatetext).replace(/\&(?!\w|\#)/g, '&amp;'));
	            }
	        }
	    });
	};

	//lookup dicts holding constants used for superstyles and constants either global or scoped
	CompilerClass.prototype._superstyleLookup = {};
	CompilerClass.prototype._constantsLookup = {};

	//parse and load all superstyles defined in text/superstyles style tags
	CompilerClass.prototype._ProcessSuperstyles = function(){
	    var self = this;
	    $('style').each(function(){
	        if(this.type.endswith('superstyles'))
	            self._processCSSBlocksIntoObject(self._superstyleLookup, $(this).text());
	    });
	};

	//parse and load all constants defined in text/constants style tags
	CompilerClass.prototype._ProcessConstants = function(){
	    var self = this;
	    $('style').each(function(){
	        var context = this.getAttribute("context");
	        if(this.type.endswith('constants') && (!context || Hypertag.Constants.indexOf(context) !== -1))
	            self._processCSSBlocksIntoObject(self._constantsLookup, $(this).text());
	    });
	};

	//a simple state machine for sucking in what appears to be a very simple css syntax into
	//an object such that the "selector" can be comma separated and is the key, and the content
	//of the block is assigned to that key(s). This creates a lookup that can be used elsewhere
	//in the runtime (for superstyles and constants). Additionally, triple quotes are supported.
	//if a block contains triple quotes all content will be assigned to the keys without removing
	//whitespace, and, of course, the text can contain "{" or "}" which would otherwise close the block.
	//You can ALSO end the selector(s) with an "=". If you do this, the contents of the constant
	//will be evaluated as javascript expression which can reference other constants (defined before
	//the current constant) through "self" or "this" i.e "self.SOME_CONSTANT" or self['Tmpl.CONSTANT']
	CompilerClass.prototype._processCSSBlocksIntoObject = function(store, csstext){
	    var self = this;

	    /* the css classname to give 'self' declarations */
	    var scope;

	    /* the states of css parsing (for our needs here) */
	    var LOOKING = 0, SELECTOR = 1, END_SELECTOR = 2, TRIPLEQUOTE = 3;

	    /* the current state (or information about) for the css parser (triplequoted supresses removal of whitespace) */
	    var current_selector, current_block, letter, triplequoted;

	    /* and we start out */
	    var state = LOOKING;

	    /* change state on each char as needed, changing any detected 'self' in a selector
	       to the scope requested, whenever detected */
	    for(var i = 0; i < csstext.length ; i ++){
	        letter = csstext[i];

	        //console.log("l, s", state, letter);

	        /* if we are looking eat chars until non-whitespace 
	           i.e. a selector */
	        if(state == LOOKING && letter.trim() != "" && letter.trim() != ';'){
	            /* start selector with first letter we've found.. */
	            current_selector = letter;
	            current_block = "";

	            state = SELECTOR;
	        }

	        /* accumulate the current_selector onto the current_block, 
	           copying chars until we find '{' */
	        else if(state == SELECTOR){

	            /* ...and then we have the selector. perform replacement. */
	            if(letter == '{')
	                state = END_SELECTOR;

	            /* accumulate selector */
	            else
	                current_selector += letter;
	        }

	        else if(state == TRIPLEQUOTE){
	            if(letter == "\"" && csstext.slice(i, i+3) === "\"\"\""){
	                i += 2;
	                state = END_SELECTOR;
	            }

	            else
	                current_block += letter;
	        }

	        /* when the end of a declaration is reached, current_block
	           the final close and go back to looking */
	        else if(state == END_SELECTOR){
	            if(letter == "\"" && csstext.slice(i, i+3) === "\"\"\""){
	                i += 2;
	                state = TRIPLEQUOTE;
	                triplequoted = true;
	            }

	            else if(letter == '}'){
	                var evaluate = false;

	                //if not triplequoted remove all extra whitespace
	                if(!triplequoted)
	                    current_block = current_block.replace(/\n/g, " ").replace(/\s+/g, " ").trim();

	                current_selector = current_selector.trim();

	                //if current_selector (before being split on comma) ends with an "=", set a flag
	                //causing the block of text to be interpretted as a javascript expression.
	                //why? cause we CAN. 
	                if(current_selector.slice(-1) == '='){
	                    evaluate = true;
	                    current_selector = current_selector.slice(0, -1);
	                }

	                var selectors = current_selector.split(',');

	                for(var j = 0; j != selectors.length; j ++){
	                    //if we have been told to evaluate the block as an expression, 
	                    //turn it into a function whose return value will form the constant;
	                    //"self" or "this" will refer to the store, so that you can reference
	                    //constants defined before this one, if you want.
	                    if(evaluate){
	                        eval("var func = function(self){return "+current_block+";};");
	                        store[selectors[j].trim()] = func.call(store, store);
	                    }

	                    else
	                        store[selectors[j].trim()] = current_block;
	                }

	                triplequoted = false;
	                evaluate = false;
	                state = LOOKING;
	            }

	            /* accumulate body of css for declaration */
	            else
	                current_block += letter; 
	        }
	    }
	};

	CompilerClass.prototype.stripComments = function(file_contents){
	    var lines = file_contents.split("\n");

	    for(var i = 0; i < lines.length ; i ++){
	        /* if the has // in it, remove from there until end of line. This then acts to 
	           allow // in any hypertag source - even though, in "real" xml, i would not be able to have them! win!  */
	        var slashidx = lines[i].indexOf("//"); 
	        if(slashidx !== -1)
	            lines[i] = lines[i].slice(0, slashidx);
	    }

	    return lines.join("\n");
	};

	//INTENT: setup any extends lookups asked for by passing the name of the template and it
	CompilerClass.prototype._PerformSetupForExtendAttribute = function(template_name, extend){
	    //if the node has an extend attribute, store it on the ExtendsTemplateLookup dict (the attr will stay there otherwise unused)
	    if(extend){
	        extend = extend.nodeValue.trim();
	    
	        //add this template_name to the lookup keyed on the item we are extending!
	        var lookup = Hypertag.Runtime.ExtendsTemplateLookup;
	        if(!lookup[extend])
	            lookup[extend] = [];
	        lookup[extend].push(template_name);
	    }
	};

	/* copied from runtime for convience; */
	CompilerClass.prototype._executeJSInApp = RuntimeClass.prototype._executeJSInApp;
	CompilerClass.prototype._addCSSByKey = RuntimeClass.prototype._addCSSByKey;
	CompilerClass.prototype._removeCSSByKey = RuntimeClass.prototype._removeCSSByKey;

	//INCLUDE GUI (incl. focus system) //////////////////////////////

	/* basic meta key up/down state tracking as used all over the place but set in Hypertag.GUI.
	   we want these flags to be global and shared by all code everywhere, so they are created right away. */
	GLOBAL.isAltPressed = false;
	GLOBAL.isCrtlPressed = false;
	GLOBAL.isMetaPressed = false;
	GLOBAL.isShiftPressed = false;
	GLOBAL.isCommandPressed = false;

	/* we provide custom alert and prompt methods that force key up..
	   some browsers send key up on prompts.. some dont. */

	GLOBAL._setAllKeysUp = function(){
	    GLOBAL.isMetaPressed = false;
	    GLOBAL.isShiftPressed = false;
	    GLOBAL.isCommandPressed = false;
	    GLOBAL.isAltPressed = false;
	    GLOBAL.isCrtlPressed = false;
	};

	GLOBAL._alert = alert;
	GLOBAL.alert = function(msg){
	    _setAllKeysUp();
	    return _alert(msg);
	};

	GLOBAL._confirm = confirm;
	GLOBAL.confirm = function(msg){
	    _setAllKeysUp(); 
	    return _confirm(msg);
	};

	GLOBAL._prompt = prompt;
	GLOBAL.prompt = function(msg){
	    _setAllKeysUp();
	    return _prompt(msg);
	};

	/* This is global and will hold state for the desktop */
	Hypertag.GUI = {
	    duration:300,
	    disableKeyEvents:false, 
	    _SizedToWindowInitialEventsRequired:[],
	    mousemove:false,

	    cancelDragIfOccuring:function(){
	        var state = Hypertag.Dragging.state;
	        var dragmethods = HypertagDraggingClass.prototype;

	        if(state == 'waiting'){
	            Hypertag.Dragging.state = 'idle';
	            return false;
	        }

	        else if(state == "dragging"){
	            dragmethods.dragDropping(false, false);
	            return false;
	        }

	        return true;
	    },

	    focus:{
	        /* the focus system has three levels, the layer, window, and focused element. by changing the element
	           but not the layer or window we can change focus in an app (any scope, actually) and the advantage is
	           that we can change the layer and resume whatever focus was set on that layer, easily. */
	   
	        setLayer:function(layer){
	            if(this.layer == layer)
	                return;
	    
	            if(!layer.window)
	                layer.window = {};
	    
	            if(!layer._windowStack)
	                layer._windowStack = [];
	        
	            if(this.layer && this.layer.window){
	                send(this.layer.window, '__unfocused__');
	                if(this.layer.window.focused && this.layer.window.focused.focusring !== false)  
	                    $(this.layer.window.focused).removeClass("focused");
	            }
	    
	            set(this, 'layer', layer);
	    
	            if(this.layer.window)
	                send(this.layer.window, '__focused__');
	        
	            var focused = this.layer.window.focused;
	    
	            if(focused){
	                if(focused.tagName.toLowerCase() == 'input')
	                    $(focused).focus();
	    
	                if(focused.focusring !== false)  
	                    $(focused).addClass("focused");
	            }
	            
	            return this;
	        },

	        /* we give a window focus by using this method (we can also pass a list at the same time if we know it) */
	        setWindow:function(element){
	            if(this.layer.window.focused)
	                if(this.layer.window.focused.focusring !== false)
	                    $(this.layer.window.focused).removeClass("focused").blur();
	        
	            if(this.layer.window)
	                send(this.layer.window, '__unfocused__');
	        
	            set(this.layer, 'window', element);
	    
	            /* finally re-send focused event on newly set window whether or not anything is focused. */
	            if(element)
	                send(this.layer.window, '__focused__');
	    
	            var focused = this.layer.window.focused;
	    
	            if(focused){
	                if(focused.tagName.toLowerCase() == 'input')
	                    $(focused).focus();
	    
	                if(focused.focusring !== false)  
	                    $(focused).addClass("focused");
	            }
	            
	            return this;
	        },

	        /* we give a specific element focus by passing it here. The point of a window/element pair is to be
	           able to maintain focus when a user returns to a window they left previously. If no window is set
	           we will try to set it ourselves by looking first for an application above us, or the scriproot of the 
	           element. this is a convience against error in starting conditions */
	        setFocused:function(element){
	            if(!this.layer  || !this.layer.window || (this.layer.window.focused && this.layer.window.focused === element))
	                return;
	        
	            var focused = this.layer.window.focused;
	      
	            if(focused && focused != element){
	                var jtarget = $(focused);
	        
	                if(focused.focusring !== false)
	                    jtarget.removeClass("focused");
	            }
	    
	            set(this.layer.window, 'focused', element);
	    
	            if(element && element.focusring !== false)
	                $(element).addClass("focused");
	            
	            return this;
	        },

	        pushFocused:function(element){
	            var layer = Hypertag.GUI.focus.layer;
	    
	            //set focus will wipe out this, so save it to send afterward.
	            var lastFocus = false;
	            if(layer && layer.window && layer.window.focused)
	                lastFocus = layer.window.focused;
	    
	            if(Hypertag.GUI.focus.layer && Hypertag.GUI.focus.layer.window != element){
	                Hypertag.GUI.focus.setFocused(element); 
	                Hypertag.GUI.focus._lastFocus = lastFocus;
	            }
	            
	            return this;
	        },

	        popFocused:function(){
	            var layer = Hypertag.GUI.focus.layer;
	        
	            if(Hypertag.GUI.focus._lastFocus)
	                Hypertag.GUI.focus.setFocused(Hypertag.GUI.focus._lastFocus);
	        
	            else if(layer && layer.window)
	                layer.window.focused = false;
	    
	            Hypertag.GUI.focus._lastFocus = false;
	            
	            return this;
	        },

	        blurInputMethod:function(e){
	            Hypertag.GUI.focus.setFocused(false);
	            
	            return this;
	        },

	        focusInputMethod:function(e){
	            Hypertag.GUI.focus.setFocused(this);
	            
	            return this;
	        }

	        /* the focused window and focused element are available directly under the names focus.window, focus.window.focused */
	    },

	    setupGUIEvents:function(){
	        /* some central mouse control */

	        /* Record the last event to be made when the mouse moved, for use throughout the environment*/
	        $(window).mousemove(function(e){
	            Hypertag.GUI.mousemove = e;
	            Hypertag.GUI.mousemove.x = (e.offsetX != null) ? e.offsetX : e.originalEvent.layerX;
	            Hypertag.GUI.mousemove.y = (e.offsetY != null) ? e.offsetY : e.originalEvent.layerY;

	            setTimeout(function(){
	                Hypertag.GUI.mousexy = [Number(Hypertag.GUI.mousemove.x), Number(Hypertag.GUI.mousemove.y)];
	            }, 5);

	            Hypertag.GUI.lastmousexy = Hypertag.GUI.mousexy;

	            return true;
	        });

	        /* we need this as a catch all to turn off dragging if nothing else caught mouseup */
	        $(window).mouseup(function(e){
	            Hypertag.GUI.mousedown = false;
	            Hypertag.GUI.cancelDragIfOccuring();
	            return true;
	        });

	        /* some central keyboard control: */

	        $(window).keyup(function(e){ 
	            GLOBAL.isAltPressed = e.altKey;    
	            GLOBAL.isCrtlPressed= e.crtlKey;
	            GLOBAL.isMetaPressed = e.metaKey;
	            GLOBAL.isShiftPressed = e.shiftKey !== undefined ? e.shiftKey : GLOBAL.isShiftPressed;
	            GLOBAL.isCommandPressed = GLOBAL.isAltPressed;

	            return true;
	        });

	        /* THIS gets rid of a known bug making alt stick. by forcing alt off on focus, we dont "miss" alt up
	           when focus changes accidentally, etc */
	        $(window).focus(function(e){ 
	            GLOBAL.isAltPressed = GLOBAL.isCommandPressed = false;
	            return true;
	        });

	        $(window).blur(function(e){ 
	            GLOBAL.isAltPressed = GLOBAL.isCommandPressed = false;
	            return true;
	        });

	        /* we look at every key press, checking for system- and application-shortcuts, as well as other shortcuts
	           like window move and resize, reveal, go to previous window, etc. */
	        $(window).keydown(function(e){
	            try{
	                var retval;

	                /* the if tests merely ensure that the key is not marked as pressed if it's a combination. 
	                   this makes dealing with other system hotkeys easier */
	                GLOBAL.isAltPressed = GLOBAL.isCommandPressed = e.altKey;
	                GLOBAL.isCrtlPressed = e.crtlKey;
	                GLOBAL.isMetaPressed = e.metaKey;
	                GLOBAL.isShiftPressed = e.shiftKey !== undefined ? e.shiftKey : GLOBAL.isShiftPressed;

	                /* we do nothing with meta - that's reserved for os functions (apple centric need to test win) */
	                if(e.metaKey)
	                    return true;

	                /* if there is a focused window get a pointer to it */
	                var self = Hypertag.GUI.focus.layer ? 
	                    Hypertag.GUI.focus.layer.window : false;
	    
	                /* we really dont want backspace being handed to the GUI if an input is focused - we're typing.  */
	                if(e.keyCode == 8 && self.focused && ['input', 'textarea'].intersect(self.focused.tagName.toLowerCase()))
	                    return true;

	                if(Hypertag.GUI.showKeyCode)
	                    Hypertag.Debugger.comment("e.keyCode", e.keyCode);

	                if(!self)
	                    return true;
	    
	                // ------------------------------------
	                // EVERYTHING PAST THIS DEPENDS ON A FOCUSED WINDOW/ELEMENT (I.E. SELF IS AN OBJECT, NOT FALSE)
	                // ------------------------------------

	                /* enter event is different than the rest here, in that if we find it,
	                   we'll still let it get to others, i.mousemove. this AND anything else listening
	                   will fire. */
	                if(e.keyCode == 13)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__enter__');

	                /* if self is keyselectable then listen for those events */
	                else if(e.keyCode == 32){
	                    if(self.tagName == "input" && self.getAttribute('type') == 'button'){
	                        $(self).trigger('click');
	                        retval = false;
	                    }
	        
	                    else
	                        retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__space__');
	                }

	                else if(e.keyCode == 8){
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__backspace__');

	                    if(self.focused && self.focused['__backspace__'])
	                        return false;  
	                }

	                /* send uparrow to the last list that gained selection. crude? we'll see. */
	                else if(e.keyCode == 38)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__uparrow__');

	                /* send downarrow to the last list that gained selection. */
	                else if(e.keyCode == 40)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__downarrow__');

	                /* send uparrow to the last list that gained selection. crude? we'll see. */
	                else if(e.keyCode == 37)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__leftarrow__');

	                /* send downarrow to the last list that gained selection. */
	                else if(e.keyCode == 39)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__rightarrow__'); 

	                /* send downarrow to the last list that gained selection. */
	                else if(e.keyCode == 27)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__escape__');  

	                else if(e.keyCode == 9)
	                    retval = Hypertag.GUI.conditionalFocusFireForApp(self, e, '__tab__');           

	                /* ...END OF IF-ELSE CHAIN */

	                /* we check for a matching menu entry on the focused window last - there are takers (retval !== undefined), it will stop further processing. */
	                /* Check for menu shortcut keys on keydown, so we can stop other things (like editors) from getting them */

	                /* dont process any menu shortcuts when we are full screened, as any full screen (and/or exported) app doesn't have a  
	                   a menu - that's specific to the GUI portion */
	                if(retval !== false && GLOBAL.isCommandPressed) /* !self.fullscreen &&  */{
	                    retval = conditionalSend(self, 'shortcutKey', function(method, context){
	                        return method.call(context ? context : self, e.keyCode, String.fromCharCode(e.keyCode), e);
	                    });
	                }

	                /* this is last because we only wish to have the keypress handler work if nothing else 
	                   caught it above. this will pass this key to the focused item */
	                if(retval !== false){
	                    /* this will call all events... if any return false, than retval will be set to false and stay that way. */
	                    conditionalSend(self, '__keypress__', function(method, context){
	                        var val = method.call(context, e);
	                        if(retval !== false)
	                            retval = val;
	                        return true; /* perform all handlers regardless of retval */
	                    });

	                    if(self.focused && self.focused.__keypress__){
	                        retval = self.focused.__keypress__(e) || false;
	                        self.focused.send('__keypress__', e);
	                    }
	                }

	                /* never pass on alt key combos we are using them to go up/down windows in the launcher */
	                if(GLOBAL.isAltPressed && (e.keyCode == 38 || e.keyCode == 40 || e.keyCode == 82) )  /*  && e.keyCode < 37 && e.keyCode > 40 */
	                    return false;

	                if(e.keyCode == 8 && self.focused)
	                    return false;
	    
	                /* retval says whether or not we should continue to process the key; undefined is same as true */
	                return retval === undefined ? true : retval;
	            }

	            catch(e){
	                var msg = "Error handling a keydown event. Key was "+e.keyCode+", Target is: "+String(e.target)+"\n\nError is: "+e;
	                Hypertag.Debugger.error(msg);
	                return false;
	            }  
	        });
	    },

	     /* this abstraction lets __enter__, __space__, etc. be received by the app, api, and focused item with 
	        each method and listeners of the method can cancel the event as it reaches each level of focus (again,
	        app, api, focused item) */
	    conditionalFocusFireForApp:function(self, e, eventname){
	        var retval;

	        /* this will call all events... if any return false, than retval will be set to false and stay that way. */
	        conditionalSend(self, eventname, function(method, context){
	            var val = method.call(context, e);
	            if(retval !== false && retval !== undefined)
	                retval = val;

	            return true; /* perform all handlers regardless of retval */
	        });

	        if(retval !== false && self.api && self.api[eventname]){
	            retval = self.api[eventname](e) || false;
	            conditionalSend(self.api, eventname, function(method, context){
	                var val = method.call(context, e);
	                if(retval !== false)
	                    retval = val;
	                return true; /* perform all handlers regardless of retval */
	            });
	        }

	        if(retval !== false && self.focused && self.focused[eventname]){
	            retval = self.focused[eventname](e) || false;
	            conditionalSend(self.focused, eventname, function(method, context){
	                var val = method.call(context, e);
	                if(retval !== false)
	                    retval = val;
	                return true; /* perform all handlers regardless of retval */
	            });    
	        }

	        return retval;
	    }
	};

	////////////////////////////////////////////////////////////////////////////////
	// The "Hypertag" class is associated with every node in the DOM with class "hypertag"
	// and is the basic unit of organization in a hypertag program. Other attributes are 
	// copied onto the element, for convenience.
	// Note that recursion is managed by the HypertagClass.prototype.ExpandHypertags method, 
	// called during the process of initializing a hypertag (_initHypertag), to let the hypertags defined
	// in a template yet again produce more hypertags, until the DOM is initialized. 
	////////////////////////////////////////////////////////////////////////////////

	GLOBAL.HypertagClass = function(element, text_of_tag){
	    //if they give no element, presume they just want access to methods like CreateHypertag.
	    if(element === undefined)
	        return this;    

	    /* otherwise copy all from ourselves, the new instance, onto the element. by this 
	       means a hypertag gets it API */
	    for(var key in this)
	        element[key] = this[key];
	    
	    /* for use in this initalizer method  */
	    var $element = $(element);

	    //this is a flag just to indicate this element is a hypertag, which can be useful i.e if(element.isHypertag)
	    element.isHypertag = element;

	    //this is only set when methods with a 'super' are running
	    element.__super__ = false;

	    //dealing with basic hypertag parameters
	    element.initialized = false;         //a boolean indicating if this hypertag has be loaded for the first time (which happens after init, or when reload is first called when autoinit=false)
	    element.isReset = true;              //a flag letting us avoid resetting unecessarily on reload

	    element.template = false;              //this will tell the instance which hypertag template to use.
	    element.inner_template = false;        //the name of any inner_template associated with this hypertag, as inserted by a processsor in template tags.
	    element.use_inner_template = true;     //if this is true, inner templates will be used as defined. If false, the variable "inner_template" will still hold a template name, but it wont be painted (in expectation of the user doing it manually)
	    element.traits = [];                 //either a list or comma sep names of templates to apply atop of this one.
	    element.extend = "";                 //this template can extend another -- as if this template was called as trait on the template given here -- to extend it's functionality.
	    element.autoload = true;             //will element list load when created?
	    element.autoreload = true;           //will reload when the list of obj/attr you pass for fires, but doesn't affect first load.

	    //dealing with references to hypertag children WITH A NAME they create on us to facilitate traversal.
	    element.children = {};

	    //dealing with lists and lists w/ url
	    element.list = false;                //the url, data structure, or method returning either to be used when replicating
	    element.filelist = false;            //these help us make lists that sync to files, folders
	    element.filekind = false;      //these help us make lists that sync to files, folders
	    element.filetype = false;            //these help us make lists that sync to files, folders
	    element.evaluated_list = [];         //the actual data structure the list resolved to, whether list was url or method - also where to look for a "gathered" list.
	    element.query = {};                  //when a remote json list is used, what query to post to the server
	    element.__filter__ = false;          //if a function that controls presence of nodes from the list of a template where if passed to this, should return true.

	    element.optimized = false;           //Optimized takes three params (processed by stringToList): element.optimized = [dimension, size, overlap]   
	    element.optimizedreload = false;     //if true, reload will not cause container to scroll and if an item is selected 
	    element.optimizeditems = false;      //if true, items no longer in the scroll pane will be retired - but their selection and .data will survive!
	    element.lazy = false;                //lazy loaded indicates items will be made as the scrollwindow reaches the bottom.
	    element._use_shadow_items = false;   //if this is true various machinery is instructed to create shadow items, not real ones, in persuit of optimized/lazys

	    //dealing with seelction and selectables and changing items
	    element.selectable = false;          // both a flag applying selection methods, and the comma-sep, or array, of effects for hover, selected (css classes)
	    element.selectfirst = false;         // whether to select the first element on reload or not
	    element.selectedItems = [];          // a list of references to currently selected items.
	    element.selection = false;           // a reference to the currently selected item if only 1 is selected.
	    element.multiselectable = true;      // a boolean indicating if multiselectableion is allowed.        
	    element.linearselectable = true;     // can the list be shift-clicked or key up/down? (i.e. assume some linear layout to make that make sense?)
	    element.keyselectable = false;       // only for use when writing apps for hypertrust use. will allow __uparrow__ and __downarrow__ to go to the last selected list that had this set to true. 
	        element.keyremovable = false;        // if this is true, backspace will remove selected items
	        element.keyremovableconfirm = false; // if this is true, alt must be pressed with backspace to remove selected items
	        element.verticalarrowkeys = true;    // should the left-right keys be used for selection (default no)?
	        element.horizontalarrowkeys = false; // should the left-right keys be used for selection (default no)?
	        element.reversearrowkeys = false;    // make up arrow go down/right arrow go left vice versa - useful for rotated environments
	        element.autofocus = false;          // this can actually be used on any type of hypertag, and serves to give that hypertag focus when it is finished (i.e. on __finished__)
	    element.mouseselectable = true;      // whether or not a selectable list will process mouse events
	    element.stickyselected = false;      // whether we want the selection (not selected) to survive reload via a simple (data must be unique for all!) match method to find the previous node in the new list.
	    element.reselectable = false;         // whether we can send selection to an item over and over, or only if it's not already selected.
	    element.unselectable = true;         // is it possible to unselect an item once selected
	    element.textselectable = false;      // whether the class 'unselectable' is applied to a list whne it is made  
	    element.hoverselectable = false;     // if true then a child can be selected by a hover while dragging
	    element.dragselectable = false;      // if true then a child can be selected by holding down alt-key on mouseover
	    element.toggleselect = false;        // whether items will toggle when you click them, as opposed to staying selected
	    element.unsetselection = true;       // if this is false, unselection events will not occur when setSelection (only!) is called. this is useful when you know you will go from one selection to the next in a reload-pattern and so resetting is extra work, but still want unselection when the selection is zero or more than one. this is an optimization.
	    element.autoscrollable = false;      // if this is true, then selection will cause the item to be centered in the view vertically, if it's not on the screen (otherwise nothing happens)
	    element.loopscrollable = true;       // if we are autoscrollable, and this is true then the arrow keys loop around the first and last items.
	                                        
	    //dealing with the drag and drop system
	    element.drag = false;                //a comma-sep 2 index arr. of types being drug
	    element.dragtemplate = false;        //a template name to invoke with the items being dragged in data.items instead of just copying the dom of the drug items, as normal.
	    element.drop = false;                //this will indicate what type can drop on us
	    element.droponchild = false;         //this is a flag indicating if the element, or also all the elements itesm, should be drop. If true, __drop__ will also get the child dropped on (or false for dropped last)
	    element.droponothers = true;         //whether or not a drag op. from this hypertag can drop on other containers.
	    element.droponself = false;          //can we drop on ourselves?
	    element.selectondrag = true;         //flag to indicate if dragging an object automatically selects it, too.
	    element.droponcontainer = false;     //ONLY ON if 'droponchild == true'! If this is true, BOTH the container and the children can be droppable Normally it's either the container (normal) or the children (droponchild true). If dropped on the container, the child parameter will be equal to element */
	    element.dragdataonly = false;        //ONLY if true, do we refrain from providing the actual items during a drop op; we provide copies of each item's data instead. this lets drag/drop survive the destroy of the source while maintaining good memory managment.
	    element.onlyaltselectable = false;   //Alt MUST be pressed to select/drag elements. this hack lets lists host complex event handlers that otherwise dont chain (like drag/drop handlers and input fields conflicting). By requiring alt, fields work normally but list operations are still possible.

	    //misc; filtering, headers, local storgage
	    element.autosized = true;            //a flag instructing the hypertag to listen to change events, or not. Only works on structural hypertags, not items.
	    element.autoanimated = false;        //do we, when one of our top/left/width/height changes, merely set, or animate to, the given size?
	    element._autohitches = [];           //a store kept by element.scanAttributes that lets us easily run hitches on ourselves that need initialization on reload, instead of waiting for the target to emit an event, efficienty.
	    element._hitchestext = {};           //text of any %% hitches detected, so we can reassign and reprocess them if needed.
	    element._traitsFromProperties = [];     //setup any attributes on ourselves we get from traits.
	    element._selectorsToResolve = {};     //setup any jquery objects requested on ourselves we get from properties

	    element.focusring = true;           //should the focus system draw an outline to indicate it's a target of events? default true.

	    //returns a triplet of references found by looking upward. central to the model.
	    var references = element._resolveParentReferences();

	    //The 'parentview' attr works by finding the first tag with a .isHypertag attribute 
	    //above this tag (one of the reasons the attribute is there)
	    //we also alias it with parent. there is no .parent in the W3C dom (it's .parentNode) so this is legit.
	    element.parentview = element.parent = references[0];

	    //The root is analogous to a top of some hypertag defintion/instance. when you make a 
	    //hypertag, it must have a name. anonymous views inside it have have no template attribute
	    //so if we go up to the first tag with a template attribute we can skip upwards effectively.
	    //we also alias it with root. it comes up a lot.
	    element.templateroot = element.root = references[1]

	    //The 'itemroot' works by finding the first node above it with an .itemlist attribute
	    //and lets us skip to the 'top' of an item made by a hypertag list
	    element.itemroot = references[2];

	    //this only has meaning in Hypertrust apps but is best expressed in the runtime. The only exception, in fact.
	    element.directory = references[3];

	    //if this hypertag has a name - and if we have a parent - place a reference to this node 
	    //on the parent's children attr. Therefore we can say self.children.foo to get a hypertag named foo
	    //inside of us. This renders the use of the child() function unneeded when dealing with the hypertag 
	    //"view tree".
	    var elem_name = element.getAttribute('name');
	    if(elem_name && element.parent)
	        element.parent.children[elem_name] = element;
	   
	    //we bring in the attributes from the tag as options, but they will NOT overwrite anything in a codeblock including traits.
	    //this is because other floatsam on tags needed for html could interfere with proper function.
	    var attr_dict = {};
	    for(var i = 0, attr; (attr = element.attributes[i]) ; i ++)
	        attr_dict[attr.nodeName] = attr.nodeValue;

	    elementcopy(element.scanAttributes(attr_dict, element, undefined, undefined, true), element);

	    //if we dont have a .data attribute (for stuff passed into the hypertag) make one
	    if(element.data)
	        elementcopy(element.data, element);

	    //INTENT: If a template is given and it's not a list type template, apply all the values from the 
	    //        CompiledTemplateOptionsCache to element, as they will be options we want applied. Note
	    //        that when it's a list type template this operation doesn't apply -- we DONT want the values
	    //        from a list *element* mapped onto the *list itself* (aka the hypertag where the items will be painted)
	    if(element.template){ 
	        //if the template hasn't been cached, do so!
	        if(!Hypertag.Runtime.CompiledTemplateCache[element.template])
	            Hypertag.Runtime.TemplateCache(element.template);

	        //apply the defaults for the template on both self and the element (the "this" in the code)
	        var tmpl_options = Hypertag.Runtime.CompiledTemplateOptionsCache[element.template].call(element, element);

	        //if we have options...
	        if(tmpl_options){
	            //map all options onto self and element
	            element.mergespace(tmpl_options);

	            //this processes all strings through element.scanAttributes, for %{} and %%{} types
	            var strings_to_process = {};
	            for(var key in tmpl_options){
	                var isString = typed(tmpl_options[key], String);
	                if(key.slice(-1) == "$" || isString || (isString && key[0] == "$"))
	                    strings_to_process[key] = tmpl_options[key];
	            }
	                
	            copy(element.scanAttributes(strings_to_process, element), element);
	        }
	    
	        tmpl_options = null;
	    }

	    //if there is codeblock, treat it like a text-dict-to-be-evald that merges with the options passed in 
	    //from the actual options.
	    //Turn options['codeblock'] into a dict (i.e. "x" -> "{x}", with any trailing comma of x removed)
	    var codeblock = text_of_tag.trim();
	    if(codeblock.slice(-1) == ",")
	        codeblock = codeblock.slice(0, codeblock.length-1);
	    codeblock = "{" + codeblock + "}";

	    //check the code for errors -- sourcetext in this case will already be a dict!
	    if(Hypertag.Runtime.debug){
	        var result = checkDictionaryForErrors(codeblock);
	        if(result)
	            throw "SYNTAX ERROR: "+result + '\n\nCode is:\n\n' + Hypertag.Runtime.addLineNumbers(codeblock);
	    }

	    var codeblock_function;

	    //note we make a function from text here because we'll want to reevaluate this every reload, but want to only parse it once!
	    try{
	        eval("codeblock_function = function(self){return "+codeblock+';};');
	    }catch(err){
	        err.message = "\nIn the context of the code:\n\n"+codeblock+"\n\n...\n\n"+err.message;
	        throw err;
	    }

	    //actually run it, getting our config parameters for the first time, and merge that into our options.
	    //(the source text will be used to establish key/values on the same dict it is in, in other words.)
	    var codeblock_dict = codeblock_function.call(element, element);

	    codeblock_function = null;

	    element.mergespace(codeblock_dict);

	    //this processes all strings through element.scanAttributes, for %{} and %%{} types
	    var strings_to_process = {};
	    for(var key in codeblock_dict){
	        var isString = typed(codeblock_dict[key], String);
	        if(key.slice(-1) == "$" || isString || (isString && key[0] == "$"))
	            strings_to_process[key] = codeblock_dict[key];
	    }
	        
	    copy(element.scanAttributes(strings_to_process, element), element);

	    codeblock_dict = null;

	    //finally, we need to overwrite data, which we made available to the
	    //codeblocks running above by setting early, and we wish to force
	    //overwrite of now.
	    if(element.data)
	        elementcopy(element.data, element);
	    
	    //constructing is called after the namespaces have been figured out, but before options 
	    //have been considered. the next state, "constructed", is useful because it fires regardless of autoload
	    //but unlike this, is too late to change things on the tag 

	    var continue_init = element.fire("__constructing__", element);
	    if(continue_init === false){
	        element.forceremove();
	        return false;
	    }

	    //setup any attributes on ourselves we get from traits. NOTE that 
	    //_reevaluateOptions does NOT call this when we are uninitialized, 
	    //so as to avoid calling this twice, here and on the first reload.
	    element._applyTraits();

	    //if either optimized or lazy is true, we'll use shadow items, not real ones, throughout the item creation process
	    //and we will not 
	    if(element.optimized)
	        element._use_shadow_items = true;

	    else if(element.lazy){
	        element.loopscrollable = false;
	        element._use_shadow_items = true;
	    }

	    //---------- varibles resolved at this point on.

	    //the drop option will add drag methods to our hypertag (another method, _dropChild, is called on children)
	    element.drop && element._drop();

	    /* if the element is marked as being autosized, setup the listens and other methods needed to achieve it */
	    if(element.autosized)
	        element._autosizingSetup();
	  
	    //do we want to apply a filelist to this? THIS WILL ADD A .list parameter to this hypertag (processed next)
	    if(element._filelists && element.filelist)
	        element._filelists();  

	    //INTENT: if it's a list type template set a flag and choose the right reload method to run.
	    //this also sets a flag so that other parts of the framework can choose to function, depending on if it's list or singleton
	    element.reload = element['list'] ? 
	        element._reloadAsList :
	        element._reloadAsTemplate;
	    
	    if(element.list){
	        //all the items assocaited with the list. (with a 'uses' template that number is always 1)
	        element.items = [];                  
	    
	        //if they specify drag, but no selectable, make selectable with default of none, none
	        if(element.drag && !element.selectable)
	            element.selectable = [false, 'none'];
	        
	        //note that optimized and lazy are exclusive
	    
	        //optimized is for fixed-size objects, jumping anywhere
	        if(element.list && element.optimized)
	            element._optimized();
	        
	        //lazy is for variable sized objects, creating (via scrolling) from top to bottom only
	        else if(element.list && element.lazy)
	            element._lazy();
	        
	        /* routines necessary to turn up/down arrows into general list selection changes. */
	        if(element.selectable){
	        
	            /* if we are selectable or draggable, we are going to need extra methods on ourself to handle click logic: */
	            var ClickingMethods = Hypertag.Methods.Clicking;
	            for(var key in ClickingMethods)
	                element[key] = ClickingMethods[key];
	        
	            if(typed(element.selectable, String))
	                element.selectable = stringToList(element.selectable);
	            
	            if(element.autoscrollable)
	                element._autoscrollable();

	            if(element.keyselectable)
	                element._keyselectable();

	            //implement the hoverselectable option    
	            if(element.hoverselectable)
	                element._hoverselectable();

	            //implement the dragselect1
	            if(element.dragselectable)
	                element._dragselectable();
	        }
	    
	        //INTENT: if the filter changes, reevaluate items. as an event rather then method call, other things may react as well.
	        listen(element, '__filter__', function(){
	            element._evaluateFilter();
	        });       
	    }

	    //also, we add any extra classes (as defined by the classes option) onto the tag before we're done.
	    if(element.classes){
	        var classes = stringToList(element.classes);
	        for(var i = 0; i < classes.length ; i ++)
	            $element.addClass(classes[i]);
	    }

	    //INTENT: if autoload is a two element list it is telling us to autoload using the list from the evaluation of
	    //the given context/attribute tuple immmediately, and whenever the pair is set()! So very useful and clear 
	    //when data global to an application needs to be painted but stay in sync (as well as not needing to load a url repeatedly!)
	    if(element.autoload && element.autoload !== true){
	        var isHypertagEventMethod; 
	    
	        if(typed(element.autoload, Function))
	            element.autoload = element.autoload();
	    
	        if(!(element.autoload instanceof Array))
	            element.autoload = [element.autoload, '__loaded__'];
	        
	        //if i am true, the method we are listening to is a hypertag event method and "false" should not eq. reset.
	        if(element.autoload[1].startsendswith("__"))
	            isHypertagEventMethod = true;

	        listen(element.autoload[0], element.autoload[1], function(val){
	            /* this is rather cool. instead of just reloading on change, if the target is true reload,
	               and when the (if the) target goes false, and we are not reset, reset. this makes 
	               certain types of view state machines quite nice. */
	            if(val || isHypertagEventMethod)
	                element.reload();
	            else
	                element.reset();
	        });
	    }

	    //if autoload is anything other than 'true', perform autohitches now
	    //By passing "true", we'll retain all the autohitches instead of popping 
	    //them - because for an autoload:false view, we'll want to keep them 
	    //for running on the the first reload as well.
	    if(element.autoload !== true)
	        element._performAutohitches(true);

	    //INTENT: put in a __setup__ event for this hypertag, such that it fires regardless of whether autoload is true or false.
	    //note this only applies to hypertags, not hypertag items. 
	    Hypertag.Runtime.SetupTagEvents.push(element);

	    //make sure our element has the class we've given it, since we are singleton template
	    if(element.template)
	        $element.addClass(element.template);

	    //INTENT: Load the list or wait for a manual or event-based reload() call?
	    //NOTE that .reload() has been assigned one of two methods depending on list of structural 
	    //template to be invoked!
	    if(element.autoload === true || element.autoload === undefined)
	        Hypertag.Runtime.FirstLoadEvents.push(element);

	    //INTENT: same thing as autoload, but will allow the tag to load the first time; this is triggered only after that.
	    if(element.autoreload && element.autoreload !== true){
	        var isHypertagEventMethod; 
	    
	        if(typed(element.autoreload, Function))
	            element.autoreload = element.autoreload();
	    
	        if(!(element.autoreload instanceof Array))
	            element.autoreload = [element.autoreload, '__loaded__'];
	        
	        //if i am true, the method we are listening to is a hypertag event method and "false" should not eq. reset.
	        if(element.autoreload[1].startsendswith("__"))
	            isHypertagEventMethod = true;

	        listen(element.autoreload[0], element.autoreload[1], function(val){
	            /* this is rather cool. instead of just reloading on change, if the target is true reload,
	               and when the (if the) target goes false, and we are not reset, reset. this makes 
	               certain types of view state machines quite nice. */
	            if(val || isHypertagEventMethod)
	                element.reload();
	            else if(!element.isReset)
	                element.reset();
	        });
	    }

	    /* debug feature: setup a little note that we can see in the debugger that helps us
	       equate a dom node with a .tag or .app file, visible in the developer console when
	       browsing the document structure. */
	    if(Hypertag.Runtime.debug){
	        if(element.template){
	            if(Hypertag.Runtime.TemplateReverseAliases && Hypertag.Runtime.TemplateReverseAliases[element.template])
	                element.setAttribute("debug_template_path", Hypertag.Runtime.TemplateReverseAliases[element.template]);
	            else
	                element.setAttribute("debug_template_path", element.template);
	        }
	    
	        if(element.inner_template)
	            if(Hypertag.Runtime.TemplateReverseAliases && Hypertag.Runtime.TemplateReverseAliases[element.inner_template])
	                element.setAttribute("debug_inner_template_path", Hypertag.Runtime.TemplateReverseAliases[element.inner_template]);
	    }

	    /* a final event - construct - runs before __init__ and isn't affected by autoload - that's the point */
	    element.fire("__constructed__", element);

	    //apply size on construct so that autoload false, etc containers get their size set, if explicitly given, before we move on.
	    /* note we skip ALL hitches by not doing it if the firsr char is % */
	    if(element.width && String(element.width)[0] != "%")
	        $element.width(element.width);
	    if(element.height && String(element.height)[0] != "%")
	        $element.css('height', element.height);
	    if(element.top && String(element.top)[0] != "%")
	        $element.top(element.top);
	    if(element.bottom && String(element.bottom)[0] != "%")
	        $element.bottom(element.bottom);
	    if(element.left && String(element.left)[0] != "%")
	        $element.left(element.left);
	    if(element.right && String(element.right)[0] != "%")
	        $element.right(element.right);

	    element.mergespace({
	        __after__:element._to_do_on_reload,
	        __finally__:element._to_do_on_reload
	    });

	    //finally, we enable four very convienent events (that work well with list-events)
	    //for click, doubleclick, keyup and keydown

	    (element.__click__ || element.__dblclick__) && $element.singleclick(element._on_click, element._on_dblclick);
	    element.__mousedown__ && $element.mousedown(element._on_mousedown);
	    element.__mouseup__ && $element.mouseup(element._on_mouseup);

	    //if there is a hover directive and we are not an item of a selectable list (which would do it for us if 
	    //mouseselectable is true, otherwise the presence of __hover__ will cause an explict $.hover() event to be added now)

	    element.__hover__ &&
	        $element.hover(
	            element._on_hover_over,
	            element._on_hover_out
	        );

	    element.__keyup__ && 
	        $element.keyup(element._on_keyup);
	    
	    element.__keydown__ && 
	        $element.keydown(element._on_keydown);
	    
	    element.__change__ && 
	        $element.change(element._on_change);

	    element.autofocus &&
	        element.mergespace({
	            __finished__:element._on_autofocus
	        });

	    return element;
	};

	/* i like that these are static, for speed sake, instead of being declared inline above. */
	HypertagClass.prototype._on_autofocus = function(e){
	    Hypertag.GUI.focus.setFocused(this);
	};

	/* i like that these are static, for speed sake, instead of being declared inline above. */
	HypertagClass.prototype._on_mousedown = function(e){
	    var self = this;
	    return fire(this, '__mousedown__', e) || false;
	};

	/* i like that these are static, for speed sake, instead of being declared inline above. */
	HypertagClass.prototype._on_mouseup = function(e){
	    var self = this;
	    return fire(this, '__mouseup__', e) || false;
	};

	HypertagClass.prototype._on_click = function(e){
	    var self = this;
	    return fire(this, '__click__', e) || false;
	};

	HypertagClass.prototype._on_dblclick = function(e){
	    var self = this;
	    return fire(this, '__dblclick__', e) || false;
	};

	HypertagClass.prototype._on_hover_over = function(e){
	    var self = this;
	    return fire(this, '__hover__', true, e) || false;
	};

	HypertagClass.prototype._on_hover_out = function(e){
	    var self = this;
	    return fire(this, '__hover__', false, e) || false;
	};

	HypertagClass.prototype._on_change = function(e){
	    var self = this;
	    return fire(this, '__change__', e) || false;
	};

	HypertagClass.prototype._on_keydown = function(e){
	    var self = this;
	    return fire(this, '__keydown__', e) || false;
	};

	HypertagClass.prototype._on_keyup = function(e){
	    var self = this;
	    return fire(this, '__keyup__', e) || false;
	};

	/* this code sets selection on us if selectfirst is set, that's all */

	/* we want to run _updateAttributes on both __after__ and __finally__, however, note it 
	  has local state to help it skip the first __after__, such that sending events occurs
	  on __finally__ and every __after__ there after. */
	HypertagClass.prototype._to_do_on_reload = function(){
	    var self = this;

	    /* skip the first after - we should run on the first finally, and then the afters after that */
	    if(!self._firstAfterOccured){
	        self._firstAfterOccured = true;
	        return;
	    }

	    /* if we are supposed to, select the first self on after */ 
	    if((!self.initialized || !self.stickyselected) && self.list && self.selectfirst && self.items.length)
	        self.items[0].setSelection();
	};

	/* Namespace merging: */

	/* This method is, on it's own, the means by which sources of methods being compiled onto an element 
	may be applied without overwriting each other. */

	/* The very idea of a 'trait', or orthogonal behavior, is running many function for the same event, but some 
	sweeter features have been included. if the function starts/ends with "__" then it is chained,
	otherwise, if it's a method, then it is overwritten but has a .super attr available, and all else
	it will merely overwrite it as normal. */

	/* This is a "runtime" inheritance system, in the sense that live composition prepares each
	element as it is created (or applied to another element) */
	HypertagClass.prototype.mergespace = function(source, element, forcechain){ /* forcechain will chain all methods, regardless if they start with __ or not */

	    /* THIS is where "self" actually comes from when merging spaces, FWIW! */
	    var self = this;
	    element = element || self;

	    //if there is an exception, this puts a nicely printed statement into Hypertag.Debugger.exceptions, which, if it exists, 
	    //if then further pretty printed into the debugger/console.
	    var generateError = function(context, key, new_entry, err){
	    
	        if(err == "SEE PREVIOUS ERROR TRACE"){
	            Hypertag.Debugger.exceptions.push("CALLED FROM "+key+"\n----------------------\n" + Hypertag.Runtime.addLineNumbers(String(new_entry)));
	            var final_err_msg = "";
	            for(var i = 0; i < Hypertag.Debugger.exceptions.length ; i ++)
	                final_err_msg += Hypertag.Debugger.exceptions[i] + "\n";
	            Hypertag.Debugger.comment(final_err_msg);
	            Hypertag.Debugger.exceptions = [];
	            return;
	        }
	    
	        if(!(Hypertag.Debugger.exceptions instanceof Array))
	            return;
	        
	        if(!Hypertag.Debugger.exceptions.length){
	            var roots = [];
	            var root = context.template ? context : context.root;
	        
	            while(root){
	                var loc = root.template;
	                if(root.directory)
	                    loc += " at "+root.directory;
	                roots.push(loc);
	                root = root.root;
	            }
	        
	            roots.reverse();
	            Hypertag.Debugger.exceptions.push(String(err) + "\n\nROOTPATH: "+roots.join(' :: ')+"\n\nIN METHOD "+key+"\n----------------------\n" + Hypertag.Runtime.addLineNumbers(String(new_entry)));
	        }
	        
	        else
	            Hypertag.Debugger.exceptions.push("CALLED FROM "+key+"\n----------------------\n" + Hypertag.Runtime.addLineNumbers(String(new_entry)));
	    

	        //if we are not expanding fire it immediately
	        if(!Hypertag.Runtime.Expanding){
	            var final_err_msg = "";
	            for(var i = 0; i < Hypertag.Debugger.exceptions.length ; i ++)
	                final_err_msg += Hypertag.Debugger.exceptions[i] + "\n";
	            Hypertag.Debugger.error(final_err_msg);
	            Hypertag.Debugger.exceptions = [];
	        }
	    };

	    for(var key in source){
	        var new_entry = source[key];
	        var existing_entry = element[key];

	        /* VERY IMPORTANT: only merge methods if are still uninited. this works together
	           with the reload mechanism to reset state of attributes each reload, 
	           but not reapply methods when already applied. */
	        if(!element.initialized || forcechain){
	            if(typed(new_entry, Function)){

	                /* if the option from the trait starts and ends with '__' then chain it */
	                if((key.slice(0, 2) == "__" && key.slice(-2) == "__") || forcechain){
	                    /* Yay closures. this new method will call the existing method. Chaining. */
	                    new_entry = function(existing_entry, new_entry, key){
	                        return function(){
	                            var retval1 = undefined, retval2 = undefined;
	                            if(existing_entry)
	                                retval1 = existing_entry.apply(self, arguments);
	                            
	                            try{
	                                retval2 = new_entry.apply(self, arguments);
	                            }catch(err){
	                                generateError(self, key, new_entry, err);
	                                if(!Hypertag.Runtime.Expanding)
	                                    throw "SEE PREVIOUS ERROR TRACE";
	                                else
	                                    throw err;
	                            }
	                        
	                            return retval1 !== undefined ? retval1 : retval2;
	                        };
	                    }(existing_entry, new_entry, key);
	                }

	                /* if it DOESNT start with __ then we overwrite the old with the new method, 
	                and the method can now call element.__super__(args) to run the method it 
	                overwrote. */
	                else{
	                    new_entry = function(existing_entry, new_entry, key){
	                        return function(){  
	                            try{
	                                self.__super__ = existing_entry ? existing_entry : false;
	                                var ret = new_entry.apply(self, arguments);
	                                self.__super__ = false;
	                                return ret;
	                            }catch(err){
	                                generateError(self, key, new_entry, err);
	                                if(!Hypertag.Runtime.Expanding)
	                                    throw "SEE PREVIOUS ERROR TRACE";
	                                else
	                                    throw err;
	                            }  
	                        };
	                    }(existing_entry, new_entry, key);
	                } 
	            }

	            /* overwrite the existing value if any, now that a method has been made to perform chaining or inheritng (above) if needed. */
	            element[key] = new_entry;
	        }

	        /* else if it's after init, if we can't chain it or super it, then don't
	           write it if it already exists. Intelligent! */
	        else if(!typed(new_entry, Function) && !element[key])
	            element[key] = new_entry;
	        
	        new_entry = null;
	        existing_entry = null;
	    }

	    element = null;
	};

	/* a data structure is kept of what targets/attributes/hitches we have set up
	   at init, we will use this information to run these hitches as if
	   the target fired, but with the value the target has being applied to this node only, for efficiency. 
	   the concept is that some attributes are special (Hypertag.Runtime.attributes_to_autohitch).
	   It would be required to set up hitches whose default values were the value of the target as boiler plate,
	   so that new nodes appeared at the right position witout the target knowing about them, and i also believe the 
	   "special set" of width, height, top, left, opacity is basic and easily explainable. For background, "normal" hitches 
	   do not evaluate until the  target fires for the first time but you can give a default value.
	   Its not crucial to the more common hitch state machines I used, so I limited the behavior to attributes_to_autohitch,
	   again, for efficiency and brevity in setup. */
	HypertagClass.prototype._performAutohitches = function(retain_hitches){
	    var self = this;
	    var $self = $(self);

	    var hitches = retain_hitches ? copy(self._autohitches) : self._autohitches;

	    //for(var i = 0; i != self._autohitches.length; i ++){
	    while(hitches.length){
	        var item = hitches.pop();
	        var obj = item[0], 
	            attr = item[1], 
	            hitch = item[2];
	    
	        /* run the hitch. it has the ability to set self, by itself, without us using the return value here */
	        try{
	            hitch.call(self, obj[attr]);
	        }catch(e){
	            Hypertag.Debugger.error("Hypertag Engine --------------------------\nHitch Error ------------\n    "+String(e)+"\n\nTarget was: "+item[3]+"\n\nXML of node is"+PrintXML(self));
	        }   
	    }
	};

	/* INTENT: this will listen to changes in dimension, allowing us to use JQuery 
	   to perform the actual sizing. Dynamic size is a basic feature esp. in regard
	   to hitches, and so is deemed important enough to have on by default. 
	   the existance of the variable 'autosized' == false will prevent this, if some algo
	   will run faster that way and as needed. */


	HypertagClass.prototype._autosizingSetup = function(){
	    var self = this;
	    var $self = $(self);

	    var autoanimated = self.autoanimated;

	    /* do we animate any of these attributes? if yes, then do we do them all? or just some? so autoanimated can eq. false, true, or a list or comma-sep string of dimensions to animate. */
	    self._autoanimated = false;

	    if(autoanimated === true || autoanimated == 'true')
	        self._autoanimated = copy(Hypertag.Runtime.attributes_to_autohitch);
	    
	    else if(autoanimated){
	        self._autoanimated = {};
	        var attrs = stringToList(autoanimated);
	        for(var i = 0; i != attrs.length; i ++)
	            self._autoanimated[attrs[i]] = true;
	    }

	    ///// TOP

	    listen(self, 'top', function(val){
	        if(String(val)[0] == '%') return;
	        if("px%".indexOf(String(val).slice(-2)) === -1)
	            val += 'px';

	         self._autoanimated.top && !Hypertag.WindowResizing ? 
	            animate(self, {top:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('top', val);
	    });

	    listen(self, 'bottom', function(val){
	        if(String(val)[0] == '%') return;
	        if("px%".indexOf(String(val).slice(-2)) === -1)
	            val += 'px';

	        self._autoanimated.bottom && !Hypertag.WindowResizing ? 
	            animate(self, {bottom:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('bottom', val);
	    });

	    listen(self, 'left', function(val){
	        if(String(val)[0] == '%') return;
	        if("px%".indexOf(String(val).slice(-2)) === -1)
	            val += 'px';

	        self._autoanimated.left && !Hypertag.WindowResizing ? 
	            animate(self, {left:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('left', val);
	    });

	    listen(self, 'right', function(val){
	        if(String(val)[0] == '%') return;
	        if("px%".indexOf(String(val).slice(-2)) === -1)
	            val += 'px';

	        self._autoanimated.right && !Hypertag.WindowResizing ? 
	            animate(self, {right:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('right', val);
	    });

	    listen(self, 'height', function(val){
	        if(String(val)[0] == '%') return;
	        if("px%".indexOf(String(val).slice(-2)) === -1)
	            val += 'px';

	        self._autoanimated.height && !Hypertag.WindowResizing ? 
	            animate(self, {height:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('height', val);
	    });

	    listen(self, 'width', function(val){
	        if(String(val)[0] == '%') return;
	        if("px%".indexOf(String(val).slice(-2)) === -1)
	            val += 'px';

	        self._autoanimated.width && !Hypertag.WindowResizing ? 
	            animate(self, {width:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('width', val);            
	    });

	    listen(self, 'opacity', function(val){
	        if(String(val)[0] == '%') return;

	        self._autoanimated.opacity ? 
	            animate(self, {opacity:val}, parseInt(self.autoduration) || Hypertag.GUI.duration) :
	            $self.css('opacity', val);
	    });       
	};

	/* We say shuffle instead of bringToFront because this doesn't use css z-order, but actually shuffles the child to front  */
	HypertagClass.prototype.shuffleToFront = function(child){
	    if(child)
	        this.appendChild(child); //well that was easy

	    //if we call w/no params assume we meant to shuffle OURSELVES back.
	    else
	        $(this).parent()[0].appendChild(this);
	};

	/* We say shuffle instead of bringToFront because this doesn't use css z-order, but actually shuffles the child to front  */
	HypertagClass.prototype.shuffleToBack = function(child){
	    if(child && this.firstChild != child)
	        this.insertBefore(child, this.firstChild); //well that was easy too

	    //if we call w/no params assume we meant to shuffle OURSELVES back.
	    else{
	        var parent = $(this).parent()[0];
	        parent.insertBefore(this, parent.firstChild)
	    }
	};

	/* We say shuffle instead of bringToFront because this doesn't use css z-order, but actually shuffles the child to front  */
	HypertagClass.prototype.shuffleItemBehind = function(child, behind){
	    this.insertBefore(child, behind); //well that was easy too
	};

	//given an html element (a "node"), find the first parent with an "obj" attribute.
	//in the Hypertag architecture, this will always be the template instance parent to 
	//the node passed as being where to start ("here").
	HypertagClass.prototype.getParentItem = function(){
	    var node = $(this);

	    //go up until we find what we want
	    while(node = node.parent()){    
	    
	        //which is a element with a .isHypertag reference
	        if(node[0].itemlist)
	            return node[0];    
	    
	        //or none, if we run out of dom above us to check
	        else if(node[0] === undefined)
	            return false;        
	    }
	};

	//I will find the first thing above me with the attr name given, 
	//optionally of the first such attr to be eq. to value, as we go up
	HypertagClass.prototype.lookup = function(attr, testfunc){

	    /* promote the expression string to a real function */
	    if(testfunc && !typed(testfunc, Function))
	        eval("testfunc = function(self){return "+testfunc+"};");

	    //we specifically DO want to find something on ourselves before we look to parent, in this algo.
	    var scope = this;

	    while(scope){
	        if(scope[attr] && (testfunc === undefined || testfunc.call(scope, scope)))
	            return scope[attr];
	        else
	            scope = scope.parentview;
	    }
	       
	    return false;
	};

	//I will return the first hypertag above me to have the given attribute (i dont return the attribute as lookup itself does.)
	//NOTE that unlike lookup, the scope for this operation starts on the first parent, not itself (as do all the lookup* other methods other than lookup() itself);
	HypertagClass.prototype.lookupview = function(attr, testfunc){
	    /* promote the expression string to a real function */
	    if(testfunc && !typed(testfunc, Function))
	        eval("testfunc = function(self){return "+testfunc+"};");

	    //we specifically DO want to find something on ourselves before we look to parent, in this algo.
	    var scope = this.parentview;

	    while(scope){
	        if(scope[attr] && (testfunc === undefined || testfunc.call(scope, scope)))
	            return scope;
	        else
	            scope = scope.parentview;
	    }
	       
	    return false;
	};

	//!: DEPRECATED in favor of lookupview
	HypertagClass.prototype.lookupobj = HypertagClass.prototype.lookupview;

	HypertagClass.prototype.lookupname = function(tag_name, testfunc){
	    /* promote the expression string to a real function */
	    if(testfunc && typed(testfunc, Function))
	        eval("testfunc = function(self){return "+testfunc+"};");

	    //we specifically DO want to find something on ourselves before we look to parent, in this algo.
	    var scope = this.parentview;

	    while(scope){
	        var name = scope.name;
	    
	        if(name == tag_name && (!testfunc || testfunc.call(scope, scope)))
	            return scope;
	        else
	            scope = scope.parentview;
	    }
	       
	    return false;
	};

	HypertagClass.prototype.lookuptemplate = function(tagname, testfunc){

	    /* promote the expression string to a real function */
	    if(testfunc && typed(testfunc, Function))
	        eval("testfunc = function(self){return "+testfunc+"};");

	    //we specifically DO want to find something on ourselves before we look to parent, in this algo.
	    var scope = this.parentview;

	    while(scope){
	        if(!scope.template)
	            scope = scope.parentview;
	        else{
	            if(scope.template && scope.template.toLowerCase() == tagname.toLowerCase() && (!testfunc || testfunc.call(scope, scope)))
	                return scope;
	            else
	                scope = scope.parentview;
	        }
	    }
	       
	    return false;
	};

	//!: DEPRECATED
	HypertagClass.prototype.lookuptag = HypertagClass.prototype.lookuptemplate;

	//like .lookup, except that you can pass a value (after the optional test function), that will
	//cause a set to occur on that scope by that attr with the value given.
	HypertagClass.prototype.lookupset = function(attr, testfuncOrValue, value){
	    var scope = this.parentview;

	    /* promote the expression string to a real function */
	    if(value !== undefined && !typed(testfuncOrValue, Function))
	        eval("testfuncOrValue = function(self){return "+testfuncOrValue+"};");

	    while(scope){
	        if(scope[attr] && 
	            ((testfuncOrValue !== undefined && value !== undefined && testfuncOrValue.call(scope, scope)) || (value === undefined))){
	            set(scope, attr, value !== undefined ? value : testfuncOrValue);
	            return scope;
	        }
	        
	        else
	            scope = scope.parentview;
	    }
	       
	    return false;
	};

	//like .lookup, except that you can pass a value (after the optional test function), that will
	//cause a listen to occur on that scope by that attr with the value given.
	HypertagClass.prototype.lookuplisten = function(attr, method, test_func){
	    var self = this;

	    /* promote the expression string to a real function */
	    if(test_func !== undefined && !typed(test_func, Function))
	        eval("testfuncOrValue = function(self){return "+test_func+"};");

	    var scope = this.parentview;

	    while(scope){
	        if(scope[attr] && 
	            (test_func === undefined || testfuncOrValue.call(scope, scope))){
	            self.listen(scope, attr, method);
	            return scope;
	        }
	        
	        else
	            scope = scope.parentview;
	    }
	       
	    return false;
	};

	//INTENT: root is the way we can share a common ancestor when writing templtes with
	//various internal components in a non-fragile way.
	//given an html template, find the first parent who has been marked as being generated by a template
	//and not anonymous template. Optimize by using the root above us, if present.
	HypertagClass.prototype._getTemplateroot = function(){
	    var node = $(this);

	    //go up until we find what we want
	    while(node = node.parent()){
	        if(node[0] === undefined)
	            return false;

	        var possible_hypertag_element = node[0]; 
	    
	        //which is a element with a .isHypertag reference
	        if(possible_hypertag_element.isHypertag){
	        
	            //which is the root if 'template' is defined
	            if(possible_hypertag_element.template)
	                return possible_hypertag_element;

	            //or has a good reference to the closest root, so why not just return it?
	            else if(possible_hypertag_element.root)
	                return possible_hypertag_element.root;
	        }
	    }
	};

	//INTENT: do the logic to find and apply all trait methods to the reloading object
	//(the XML will be applied later, in _initHypertag())
	HypertagClass.prototype._applyTraits = function(){
	    var self = this;
	    var $self = $(self);

	    //traits are just other template tags (classes) and so are nicely stored - if we have them, 
	    //we use their values stored so as to apply the trait piece by needed piece. A twist is that
	    //we support three types of application of trait: all methods starting with __ are chained,
	    //all other methods will overwrite each other but can access their predecssor by calling 'super()',
	    //and finally everything else just overwrites itself. this lets us do great things with traits,
	    //and we got the feature cheaply, below:

	    //if we have traits, reduce them to a list from comma sep. if not already that way
	    self.traits = stringToList(self.traits);

	    //the _applied_traits depend on self.traits, but also on the set of traits in ExtendsTemplateLookup...
	    self._applied_traits = [];

	    for(var i = 0; i < self.traits.length ; i ++)
	        self._applied_traits.pushUniquely(self.traits[i]);

	    for(var i = 0; i < self._traitsFromProperties.length ; i ++)
	        self._applied_traits.pushUniquely(self._traitsFromProperties[i]);

	    self._traitsFromProperties = [];

	    if(self.template){
	        //and, using ExtendsTemplateLookup if we are a template (and not anonymous), add 
	        //in what the ExtendsTemplateLookup says we should also use as traits..
	        var name_to_use = self.template;
	        var extend_by = Hypertag.Runtime.ExtendsTemplateLookup[name_to_use] || [];
	        for(var i = 0; i < extend_by.length ; i ++)
	            self._applied_traits.push(extend_by[i]);
	    }

	    //for each trait we are to apply:
	    for(var i = 0; i < self._applied_traits.length ; i ++){
	        var template_name = self._applied_traits[i];
	    
	        //if the trait class has not been loaded into the cache (and thus processed) do so now.
	        if(!Hypertag.Runtime.CompiledTemplateCache[template_name])
	            Hypertag.Runtime.TemplateCache(template_name);
	    
	        //make a little data structure with what we need to apply a trait
	        var properties = Hypertag.Runtime.CompiledTemplateOptionsCache[template_name] ? 
	            Hypertag.Runtime.CompiledTemplateOptionsCache[template_name].call(self, self) :
	            {};
	       
	        //The very idea of a trait is to chain initstage properties, so all of them run together... But some 
	        //sweeter features have been included. if the function starts with "__" then it is chained,
	        //otherwise if it's a method then it is overwritten but has a .super attr set that points to what
	        //it overwrote so that .super can be used inside that method(!), and all else merely overwrites.
	        //I call this a 'contextual' inheritance system, designed for runtime use in diff. "modes". 
	        self.mergespace(properties);   

	        //Aha, i had not applied this here as i should have, works now, per our "boiler plate" namespace merging algorithm
	        //this processes all strings through self.scanAttributes, for %{} and %%{} types
	        var strings_to_process = {};
	        for(var key in properties){
	            var isString = typed(properties[key], String);
	            if(isString || key.slice(-1) == "$" || isString && key[0] == "$")
	                strings_to_process[key] = properties[key];
	        }
	        
	        copy(self.scanAttributes(strings_to_process, self), self);

	        //now, have we found any more traits to apply?
	        for(var j = 0; j < self._traitsFromProperties.length ; j ++)
	            self._applied_traits.pushUniquely(self._traitsFromProperties[j]);

	        //zero traits for next run.
	        self._traitsFromProperties = [];
	    
	        //also, we add any extra classes (as defined by the classes option) onto the tag before we're done.
	        if(properties.classes){
	            var classes = stringToList(properties.classes);
	            for(var i = 0; i < classes.length ; i ++)
	                $self.addClass(classes[i]);
	        }
	    }

	    $self.addClass(self._applied_traits);
	};

	/* autoscrollable is way of causing an element that recieves selection to move itself into view
	   if not already. By using selection, it works automatically with key events, mouse, everything.  
	   there is one arg - an element that has a height we should use when calc'ing our viewport (vertically)
	*/
	HypertagClass.prototype._autoscrollable = function(){
	    var self = this;
	    self.mergespace({
	        __init__:function(){
	            $(self).addClass('rel');
	        },
	    
	        __selection__:function(elem){
	            self._pauseScrollUpdating = true;
	        
	            var $self = $(self.autoscrollable !== true ? self.autoscrollable : self);
	            var container_height = self.height || $self.height();
	            var elem_height = self.optimized ? self.optimized[1] : elem.height || $(elem).height();
	            var elem_offsetTop = self.optimized ? elem_height*elem.data.i : elem.offsetTop;

	            //make the column scroll to show an elem in the center if an elem with selection is outside the viewport.
	            if(self.scrollTop-elem_offsetTop > 0 || self.scrollTop+container_height-elem_height < elem_offsetTop){
	                if(elem_height >= container_height)
	                    var where_to = elem_offsetTop+5;
	                else
	                    var where_to = elem_offsetTop-(container_height/2)+(elem_height/2);
	            }
	            
	            animate(self, {scrollTop:where_to}, Hypertag.GUI.duration/2);

	            self._pauseScrollUpdating = false;
	        }
	    });
	};

	//INTENT: reload a template made once (via the new HypertagClass.prototype.ExpandHypertags method)
	//note that reloading also reevaluates the query given in the
	//inner text of the template, so that reloadng also refreshes.
	HypertagClass.prototype._reloadAsTemplate = function(data){
	    var self = this;
	    var $self = $(self);

	    //prepare the item into an object if not already an object
	    data = data || {};
	    if(!(data instanceof Object))
	        data = {item:data};
	    
	    /* THIS is how init gets called! it's out of order with all other events because it runs BEFORE 
	       the painting of XML, not deferred like all else. This allows __init__ to affect variables in [=x=] clauses */
	    if(!self.initialized)
	        data = self.fire('__init__', data || self.data) || data;
	    else    
	        data = self.fire('__reloading__', data || self.data) || data;

	    //if we have been made and are not already reset, then reset ourselves unconditionally (1starg=true)
	    if(self.initialized && !self.isReset) 
	        self.reset(true);
	        
	    //mark we are now dirty
	    self.set('isReset', false);

	    self._reevaluateOptions(data);
	  
	    data = self.fire('__preloading__', data || self.data) || data;   
	    data = self.fire('__loading__', data || self.data) || data;   

	    //update the values of the hypertag from the attrs via xml, the codeblock, etc. to set ourselves up for this run.
	    self._reevaluateOptions(data);
	    
	    //this always has the evaluated js array - since list may be 
	    //a string yet we want access to the evaluation not the list option itself
	    self.evaluated_list = [self];

	    try{
	        var new_item = _createHypertagContent(self, self, self)[0];
	    }catch(e){
	        throw "(an error occurred)\nTemplate Name: "+(self.template || self.inner_template)+"\n"+e+"\n\nHTML of target is: "+$("<div></div>").append(self.parent).html();
	    }

	    //make sure our element has the class we've given it, since we are singleton template
	    if(self.template)
	        $self.addClass(self.template);

	    //also, we add any extra classes (as defined by the classes option) onto the tag before we're done.
	    if(!self.initialized && self.autoload !== true && self.classes){
	        var classes = stringToList(self.classes);
	        for(var i = 0; i < classes.length ; i ++)
	            $self.addClass(classes[i]);
	    }
	    
	    //always initialize the hypertag, as a list, as well as the item that was made with it.
	    self._initHypertag();

	    return self;
	};

	//INTENT: reload the hypertag, from a list list either locally or remotely
	//the reload method will call the server and repaint the results. This 
	//can be delayed by setting autoload to false...
	HypertagClass.prototype._reloadAsList = function(data, overrideListData){
	    var self = this;

	    data && copy(data, self);

	    //if the list is a string, then use it as a url to fetch json
	    //supressing this reload, and allowing the asyncronous response
	    //to re-call reload with a second param overriding whatever
	    //might be on .list (but not overwriting the value on .list)
	    if(typed(self.list, String) && !overrideListData){                 
	        $.ajax({
	            url:self.list,
	            async:true,
	            complete:function(response){
	                try{
	                    var listobj = JSON.parse(response.responseText);    
	                }catch(err){
	                    Hypertag.Debugger.error("Parsing JSON from url '"+self.list+"' had a problem: "+String(err)+". The text was:\n\n"+response.responseText+"\n---- end bad json");
	                    return self;
	                }
	            
	                //if we got json back use it to paint our list for real
	                //by passing the data as the second arg to reload, 
	                //overriding the data used to paint the list without
	                //overwritting the list property.
	                listobj && self.reload(undefined, listobj);
	            }
	        });

	        return self;
	    }

	    if(!self.initialized){
	        //also, we add any extra classes (as defined by the classes option) onto the tag before we're done.
	        var classes = stringToList(self.classes);

	        if(self.autoload !== true && self.classes)
	            for(var i = 0; i < classes.length ; i ++)
	                $(self).addClass(classes[i]);
	    
	        data = self.fire('__init__', data) || data;   
	    }   

	    /* this will remain false if there was no selection, or the options dont call for remembering it (optimizedreload)
	       by remaining false, no action will be taken to restore selection below */
	    var was_selected = [];

	    /* we do not reset if we are uninitialized; nothing to reset. If we are initialized, then 
	       reload either in an optimized fashion, or the classic complete repaint one. */     
	    if(self.initialized){
	        data = self.fire('__reloading__', data) || data;

	        /* if there is a selection save it for restoration at the end of the reload below */
	        if(self.stickyselected && self.selectedItems.length)
	            for(var i = 0; i < self.selectedItems.length ; i ++)
	                was_selected.push(deepcopyitem(self.selectedItems[i].data, {}));
	        
	        /* if we are optimized reload slightly differenty - by not calling reset - which would have
	           destroyed the sizing div - and removed the items. This way not only does the scroll window
	           not change but any items removed go back to being shadow items. */
	        if(self.optimized && self.optimizedreload)
	            self._optimizedRemove();
	    
	        /* otherwise reset dumps all contents in our usual pattern. */
	        else if(!self.isReset)
	            self.reset(true);   
	    }

	    //mark we are now dirty
	    self.set('isReset', false);

	    if(this.selectedItems)
	        this.selectedItems = [];

	    self.items = new Array;

	    self._reevaluateOptions(data);

	    data = self.fire('__preloading__', data) || data;   
	    data = self.fire('__loading__', data) || data;   

	    //update the values of the hypertag from the attrs via xml, the codeblock, etc. to set ourselves up for this run.
	    self._reevaluateOptions(data);

	    //preprocess attributes (str to list, mostly)
	    if(typed(self.selectable, String))
	        self.selectable = stringToList(self.selectable);    

	    //if a template is being used (not inner_template) then process and cache it to have its defaults handy.
	    if(self.template)
	        Hypertag.Runtime.TemplateCache(self.template);
	    
	    //if we are passed data, use that as list! otherwise use self.list, or []...
	    //self.list = data ? data : (self.list ? self.list : []);    

	    //use list below for convenience                 
	    var list = overrideListData || self.list;

	    //if what they give is a method, run it. This is useful when you want a value to exist
	    //on first load, not on first parse [of the text inside of a tag]
	    if(typed(list, Function))
	        list = list.call(self, self);
	    
	    //if the new data is a single object change it to a list w/1 item
	    if(!(list instanceof Array))
	        list = [list];

	    //INTENT: if they pass a literal array, we'll be nice and cast it to [{item:value}, {item, value}, etc.]
	    //so it can be used in var replacment. So item and i are the listitem and the index. 
	    list = self._prepareListItems(list);

	    //use the list to create objects as indicated, init the list, and move on!
	    //self.list = list;

	    //this always has the evaluated js array - since list may be 
	    //a string yet we want access to the evaluation not the list option itself
	    self.evaluated_list = list;

	    //create the items - that is, templates - inside ourselves using the list
	    //of data provided. Note that attributes/methods on the template OTHER then
	    //the initstage methods will NOT
	    //be mapped onto the item, as list items merely use XML and none of the methods
	    self._createListItems(list);

	    //init ourselves
	    self._initHypertag();

	    /* if there was a selection, use the data from it 
	       to try and find it again, if it exists */
	    if(was_selected.length)
	        self._stickySelectedMethod(was_selected);

	    return self;      
	};

	//if there are any selectors to resolve, do so now.
	HypertagClass.prototype._resolveSelectorSyntax = function(){
	    var self = this;
	    var $self = $(self);

	    for(var propname in self._selectorsToResolve){
	        var selector_info = self._selectorsToResolve[propname];
	        var propvalue = selector_info[0];
	        var deref = selector_info[1];

	        try{
	            var ref = $self.find(propvalue);
	            self[propname] = deref ? ref[0] : ref;
	        }catch(err){
	            Hypertag.Debugger.error(
	                "Could not find the element given by the selector specified as "+propvalue+".\n\nError: "+err
	            );
	        }
	    }
	};

	//abstracts reselecting selected elements on reload - depends on code in reload to record selected 
	//items if stickyselected is true.
	HypertagClass.prototype._stickySelectedMethod = function(was_selected){
	    var self = this;

	    for(var i = 0; i < was_selected.length ; i ++){
	        /* only compare non-object items for equality */
	        for(var key in was_selected[i])
	            if(was_selected[i][key] instanceof Object)
	                delete was_selected[i][key];

	        /* (and skip 'i' too) */
	        if(was_selected[i].i !== undefined)
	            delete was_selected[i].i;

	        var item = self.findItem(was_selected[i]);
	        if(item)
	            item.uneventfulSelect();    
	    }
	};

	/* I will perform the operations needed to take the attributes and codeblock of a hypertag
	and set on it and it's element the nescessary values in the right order. */

	/* this looks more complex then it needs to be because it handles loading right away, loading after autoload was false,
	   and reloading, which taken as a system have some specific demands, to be able to call .reload() in such a carefree manner */
	HypertagClass.prototype._reevaluateOptions = function(data){
	    var self = this;

	    //if we dont have a .data attribute (for stuff passed into the hypertag) make one
	    if(!self.data)
	        self.data = {};
	    
	    //map all attributes of our target onto our options, but only on the first load.
	    //after than 
	    if(!self.initialized){
	        /* we will prevent ourselves from uselessly reevaluating these if we already set them on construct, 
	           however, attributes other than these with percent statements will continue to be evaluated then and now,
	           since we dont know what might have changed, even betwen construct and autoload (which are seperated by 
	           when they are made to when they are processed by the ExpandHypertag)*/
	        var skipAttrs = self.autoload && !self.initialized ? ['template', 'inner_template'] : [];
	    
	        var attr_dict = {};
	        for(var i = 0, attr; (attr = self.attributes[i]) ; i ++)
	            if(skipAttrs.indexOf(attr.nodeName) === -1)
	                attr_dict[attr.nodeName] = attr.nodeValue;
	        elementcopy(self.scanAttributes(attr_dict, self, false, undefined, true), self);
	    }

	    //if data is passed in, use it in place of our current data.
	    if(data){
	        elementcopy(data, self.data);
	        elementcopy(self.data, self);
	    }
	    
	    return self;
	};

	/* INTENT: initialize an item in a list by setting it's data, any built in traits, 
	and scheudling it's initstage methods -- before calling new Hypertag.Runtime.ExpandHypertags to recurse
	and complete the pattern that will create the final item. */
	HypertagClass.prototype._initListItem = function(item, obj, doNotAddToChildren){        
	    var self = this;

	    if(obj === undefined)
	        obj = {};
	    
	    if(!item)
	        throw "A template is empty - at least one node required. template:\n"+self.template;

	    //a reference to the hypertag managing this item
	    item.itemlist = self;

	    //a reference to the object used to create the item
	    item.data = obj;
	    item.data.self = self;
	    item.root = item.itemlist.root;
	    item.directory = item.itemlist.directory;
	    
	    //only need to do this if we're making items not touching up the item made for a singleton template
	    //add the item to the children of hypertag -- unless doNotAddToChildren is true
	    if(doNotAddToChildren === undefined)
	        self.items.push(item);
	    
	    /* this goes on all items, shadow or otherwise */
	    var DataMethods = Hypertag.Methods.Data;
	    for(var key in DataMethods)
	        item[key] = DataMethods[key];
	    
	    /* if we are initializing an actual element, apply behaviours (not shared with
	       optimized items like selection is) the element needs to work with lists. */
	    if(item.ELEMENT_NODE !== undefined){
	        //also, we add any extra classes (as defined by the classes option) onto the tag before we're done.
	        if(item.classes){
	            var classes = stringToList(item.classes);
	            for(var i = 0; i < classes.length ; i ++)
	                $(item).addClass(classes[i]);
	        }

	        //an extremely useful shortcut to find named items inside of ourselves (so useful i hard-bake it here);
	    
	        item.$child = self.$child;
	        item.$named = self.$named;
	        item.$sibling = self.$sibling;
	    
	        item.child = self.child;
	        item.named = self.named;
	        item.sibling = self.sibling;
	    
	        item.hasChild = self.hasChild;
	        item.hasNamed = self.hasNamed;
	        item.hasSibling = self.hasSibling;
	    
	        if(self.selectable)
	            self._selectableItem(item);

	        //the drag option will add drag methods to our hypertag - uniformly applied to children.
	        ///if(self.drag)
	        //   self._dragItem(item);

	        //droponchild means that not only will the container, but actually the children, be responsible for the click and 
	        //depends on event bubbling...
	        if(self.droponchild)
	            self._dropChild(item);
	        
	        //if a third selection state is available (the 'default' state, if one is even needed) apply right away
	        //as well as after hoverout and unselect
	        if(self.selectable[2])
	            $(item).addClass(self.selectable[2]);
	        
	        if(!self._use_shadow_items){
	            Hypertag.Runtime.LoadItemEvents.push([self, item]);
	            Hypertag.Runtime.LoadedItemEvents.push([self, item]);
	        }
	    
	        //the workhorse, here we allow any sub-hypertags to have their 15 milliseconds of fame, recursing to create
	        //itself as we have already done for this hypertag.
	        Hypertag.Runtime.ExpandHypertags(item);
	    }

	    //if we are initializing a _use_shadow_item node, and we're selectable, 
	    //give the item what it needs to participate in selection
	    //(_selectbleItem() did that, in the above block)
	    else if(self.selectable){
	        var SelectingMethods = Hypertag.Methods.Selecting;
	        for(var key in SelectingMethods)
	            item[key] = SelectingMethods[key];
	    }

	    return item;
	};

	//INTENT: create all the items in the list! The Basic Tag Algorithm!    
	//I draw the all the content for a list given a set of objs.
	//NOTE I exist (and am not factored into a 1 create per item) for efficiency,
	//making the list without unneeded method nesting - and allowing jquery templates to also create
	//in bulk (which may be alot faster, depending on how they did it)
	HypertagClass.prototype._createListItems = function(objs){
	    var self = this;
	                
	    /* make all the items in a list, using the set of returned new nodes as the set of nodes
	       to initialize via _initListItem() */
	    try{
	        var new_objs = [];
	        self.items = [];
	    
	        /* create the initial data for the list. provide a counter, i, as a courtesy */
	        for(var i = 0; i < objs.length; i ++){
	            var new_obj = copy(objs[i], {});
	            new_obj.i = i; /* 'i' is constantly overwritten/updated, providing a real counter; not an independent state variable. */
	        
	            if(!self._use_shadow_items){
	                if(self.__preloadingitem__)
	                    new_obj = self.__preloadingitem__(new_obj) || new_obj;
	                if(self.__loadingitem__)
	                    new_obj = self.__loadingitem__(new_obj) || new_obj;
	            }
	        
	            new_objs.push(new_obj);
	        }
	    
	        /* IF we are using shadow items, we ONLY make "shadow" entries that reflect the significant states of an 
	           element, as if it existed, residing in place of that element until the element is made, replacing it.
	           when the shadow entry is replaced by an element, the .data and .selected attributes are initialized from
	           the shadow entry, providing transparency for algos that rely only on placing item state inside .data, as we 
	           should and is convention */
	        if(self._use_shadow_items){
	            for(var i = 0; i < new_objs.length ; i ++){
	                var obj_to_use = {selected:false, itemlist:self};
	                new_objs[i].self = new_objs[i];
	                //new_objs[i].itemlist = self;
	                self._initListItem(obj_to_use, new_objs[i]);
	            }
	        }
	        
	        /* else we will make all the items now, and in doing so, have created something that looks the same as the optimized structure anyway. Success! */
	        else{
	            /* IMPORTANT: make all the xml for all templates in one go - the reason for two types of hypertags, ultimately! */
	            var new_items = _createHypertagContent(self, new_objs, self);
	            if(!new_items) return;

	            /* it's a bad error to have an unequal num of input and output nodes, always signifying bad logic */
	            if(new_items.length != new_objs.length)
	                throw "A list-hypertag whos template-to-use has more then one top level node has been found. Templates used in a list mode hypertag may only have one top level element, at template: "+self['template']+self['inner_template']+"\n\nDir of new_items"+dir(new_items);
	        
	            /* initalize (set up deferreds to be run later) every new item with it's data */
	            for(var i = 0 ; i < new_items.length ; i ++)
	                self._initListItem(new_items[i], new_objs[i]);
	        }
	    }

	    catch(err){
	        throw 'An error in a template ('+(self['template'] || "anonymous template")+' most likely), is: \n'+err+"\n\n whos html is:\n\n"+$("<div></div>").append(self).html();
	    }
	};

	//INTENT: do whatever is needed right after a hypertag is created.
	HypertagClass.prototype._initHypertag = function(){
	    var self = this;
	    var $self = $(self);

	    //NOTE: do these events on every reload
	    Hypertag.Runtime.PreloadTagEvents.push(self);
	    Hypertag.Runtime.LoadTagEvents.push(self);
	    Hypertag.Runtime.LoadedTagEvents.push(self);
	    Hypertag.Runtime.AfterTagEvents.push(self);

	    //make the string a list as needed to reference info
	    if(self.drop && typed(self.drop, String))
	        self.drop = stringToList(self.drop);
	    
	    if(self.drag && typed(self.drag, String))
	        self.drag = stringToList(self.drag);

	    if(!self.initialized){
	        //NOTE: do these events on the first load only
	        Hypertag.Runtime.ReadyTagEvents.push(self);
	        Hypertag.Runtime.FinallyTagEvents.push(self);
	        Hypertag.Runtime.FinishedTagEvents.push(self);
	        Hypertag.Runtime.PenultimatelyTagEvents.push(self);
	        Hypertag.Runtime.UltimatelyTagEvents.push(self);
	    
	        /* make hitched attributes get their first value by assigning _performAutohitches  */
	        self._performAutohitches();
	       
	        /* text areas and inputs need to be text-selectable by default */
	        if(['TEXTAREA', 'INPUT'].indexOf(self.tagName.toUpperCase()) !== -1)
	            $self.addClass("selectable");
	        
	        else if(self.selectable && self.textselectable === false)
	            $self.addClass("notselectable")
	        
	        else
	            $self.addClass("textselectable");
	    }

	    if(self.__filter__)
	        send(self, '__filter__');   

	    //IMPORTANT! This call ensure that any hypertags/handlers created as part of this nodes creation
	    //are themselves now processed. The Hypertag.Runtime.ExpandHypertags() call that first made us finds all nodes
	    //before it called any, so any new hypertags would have to be caught here, and so recursion continues on.
	    Hypertag.Runtime.ExpandHypertags(self);

	    //this indicates we have loaded for the first time. Tada!
	    self.initialized = true;
	};

	//INTENT: call remove such that it wont fire erase - just erase it all.
	HypertagClass.prototype.forceremove = function(){
	    this.remove(true);
	};

	HypertagClass.prototype.removeItems = function(elements){
	    if(!(elements instanceof Array))
	        elements = [elements];

	    /* lol. if we dont copy the list, then as items are removed 
	       from selectedItems (for instance, if passed in) they will
	       cause this loop to misfire.  */
	    elements = copy(elements, []);

	    for(var i = 0; i < elements.length ; i ++)
	        elements[i].remove(undefined, true);

	    this.fire('__subtracted__', [elements]);
	    this.fire('__changed__', [elements]);
	};

	//INTENT: this remove plays double duty, being used by both hypertags and items of hypertags
	//both. It is confusing in code here, perhaps, but it results in only a single API - .remove
	//whether a hypertag is a list item or not. (thus the test for .itemlist, which tells us if it's an item in a list)
	HypertagClass.prototype.remove = function(erase_unconditionally, uneventfully){
	    var self = this;

	    /* removeAllDescendantListensFrom will return false if the item we pass has a __removing__ method that returns false */
	    var result = removeAllDescendantListensFrom(self, erase_unconditionally);

	    /* if it returned false or we're not giving it a choice, perform list upkeep if it's a listitem, 
	       and remove it using jqery, finally sending __changed__ to the list (again only if it's a listitem) */
	    if(erase_unconditionally || result !== false){
	        //if what we are removing is a list item, perhaps in addition to being a hypertag, handled above
	        if(self.itemlist && self.itemlist != self){

	            //remove the item from selection, if it's selected..
	            if(self.selected)
	                self._removeFromSelected();

	            var items = [];

	            for(var i = 0; i < self.itemlist.items.length ; i ++)
	                if(self.itemlist.items[i] != self)
	                    items.push(self.itemlist.items[i]);

	            self.itemlist.items = items;
	            self.itemlist.renumberItems();
	        }   

	        //remove the item itself via jquery.
	        $(self).remove();

	        if(self.itemlist && self.itemlist != self && uneventfully !== true){
	            self.itemlist.fire('__subtracted__', [self]);
	            self.itemlist.fire('__changed__', [self]);
	        }   
	    }
	};

	/* NEXT METHODS APPLY GLOBAL EVENT METHODS TO HYPERTAGS */
	HypertagClass.prototype.set = function(attr){
	    var args = [this, attr];
	    for(var i = 1; i < arguments.length ; i ++)
	        args.push(arguments[i]);
	    
	    set.apply(this, args);
	};

	HypertagClass.prototype.ensure = function(attr, val){
	    return ensure(this, attr, val);
	};

	HypertagClass.prototype.toggle = function(attr){
	    return toggle(this, attr);
	};

	HypertagClass.prototype.is = function(attr){
	    return is(this, attr);
	};

	HypertagClass.prototype.isnt = function(attr){
	    return isnt(this, attr);
	};

	HypertagClass.prototype.unset = function(attr){
	    return unset(this, attr);
	};

	HypertagClass.prototype.send = function(attr, value){
	    var args = [this, attr];
	    for(var i = 1; i < arguments.length ; i ++)
	        args.push(arguments[i]);
	    
	    send.apply(this, args);
	};

	HypertagClass.prototype.fire = function(attr, value){
	    var args = [this, attr];
	    for(var i = 1; i < arguments.length ; i ++)
	        args.push(arguments[i]);
	    
	    return fire.apply(this, args);
	};

	//there is no 'get'. get is just reading the attribute normal style.

	//this just wraps the normal listen that makes passing the fourth argument (an object to bind 
	//listens to) implicitly, using the hypertag object as the boundobject, as makes sense [when reloading, to bind it to a hypertag].
	//the inclusion of the bound object, and the association of that object with the hypertag and listen,
	//was part of solving a very difficult problem of removing event handlers when assocoiated nodes,
	//possibly above the node with the registrations, were deleted. the solution is that when 
	//a node associated with a hypertag is reset(), the the registrations of all interior hypertags are released.
	//they remove the handlers they have created by having the obj, attr, and method stored when the registration 
	//was made. When reset() occurs, all set/listen events attached to all hypertags beneath the reset() call 
	//are unlinked! Too Cool, huh? Took me a full day to solve it after seeing unexplained linear slowdowns on reload().
	HypertagClass.prototype.listen = function(obj, attr, method, context){
	    /* if it's a fat obj (result of .cd()) */
	    if(GLOBAL.FATObject && obj instanceof FATObject)
	        fat.listen(obj.path(), attr, method, context ? context : this);

	    /* it's either an object, */
	    else if(obj instanceof Object)
	        listen(obj, attr, method, context, this);
	    
	    /* or it's a string */
	    else
	        fat.listen(obj, attr, method, context ? context : this);
	};

	//immediately evalutate the listened attribute, as well as in the future.
	//some patterns use this, so its here, although i haven't used it yet myself.
	HypertagClass.prototype.listenNow = function(obj, attr, method, context){
	    /* if it's a fat obj (result of .cd()) */
	    if(GLOBAL.FATObject && obj instanceof FATObject)
	        fat.listenNow(obj.path(), attr, method, context ? context : this);

	    /* it's either an object, */
	    else if(obj instanceof Object)
	        listenNow(obj, attr, method, context, this);
	    
	    /* or it's a string */
	    else
	        fat.listenNow(obj, attr, method, context ? context : this);
	};

	//INTENT: call reset such that it wont fire erase - just erase it all.
	HypertagClass.prototype.forcereset = function(){
	    this.reset(true);
	}

	//call the actual hypertag reset function which was first designed to be on the $ object.
	HypertagClass.prototype.reset = function(erase_unconditionally){
	    var self = this;
	    //and reset ALL registrations that have been paired with this hypertag, and all sub hypertags!
	    var result = removeAllDescendantListensFrom(self, erase_unconditionally, "__reset__");

	    //and remove all the contents in the jquery way.
	    if(result !== false){
	        $(self).empty();
	        self.set('isReset', true);
	    }
	}

	//INTENT: make it easy to remove registrations made previously when an item bound with hypertag is reset()
	//SUMMARY, YOU MUST use the $(item).reset() or the item.reset() method to remove items with hypertag and sub-hypertags, lest oddity occur.
	//good news is it looks much simpler when used, just use the .listen method of the hypertag associated with activity.

	//DETAIL: Since an optional bound object can be paired when making a registration
	//we can then call the _releaseListens() method of the boundobject to release all
	//registration so bound. In this way, registrations that target some scope (hypertag) can be delistened
	//smoothly when it or a parent reset(), solving the problem of having an ever growing number of event
	//handlers assigned resulting in a slowdown as they pile up into the hundreds... but this method
	//of binding the registrations to hypertags, and then removing registrations when those hypertags or a parent
	//hypertag reset(), is actually quite easy to use. Just self.listen(obj, attr, func) in almost all
	//cases! :)
	GLOBAL.removeAllDescendantListensFrom = function(target, erase_unconditionally, eventtype){
	    //default event type
	    if(eventtype === undefined)
	        eventtype = "__removing__";

	    var all_elems = [target]; //the list of all outstanding items to process
	    var item; //the current item being processed
	    while(item = all_elems.shift()){
	    
	        /* call the given __reset__ or __removing__ method on the first item and return if false  */
	        if(!erase_unconditionally && item[eventtype])
	            if(fire(item, eventtype, item) === false)
	                return false; 
	    
	        //add all children to the while loop for NEXT time around.
	        var children = $.makeArray(item.childNodes);
	        for(var i = 0, node ; (node = children[i]) ; i ++)
	            if(node.nodeType == 1)
	                all_elems.unshift(node);

	        if(eventtype == "__removing__")
	            fire(item, '__remove__', item);

	        /* if the item we're traversing (now sure to go away) has a release, or a hitchBinding , release it.  */
	        if(item.release)
	            item.release();

	        //this DOESNT fire if we are resetting at the top level (all deeper are __removing__)
	        if(eventtype == '__removing__' && item._hitchBindings && item._hitchBindings.release)
	            item._hitchBindings.release();

	        //MEMORY MANAGEMENT - we remove references to other dom nodes, etc
	        if(eventtype != "__reset__"){
	        
	            if(item.__listeners__)
	                for(var key in item.__listeners__)
	                    item.__listeners__[key] = null;
	            
	            if(item.__listening__)
	                for(var key in item.__listening__)
	                    item.__listening__[key] = null;
	            
	            //remove anything in data and data itself (which would have self refs if nothing elser)
	            if(item.data){
	                for(var key in item.data)
	                    item.data = null;
	                item.data = null;
	            }
	        
	            if(item.isHypertag){
	                var name = item.getAttribute('name');
	                if(name && item.parent && item.parent.children && item.parent.children[name]) 
	                    delete item.parent.children[name];
	            
	                //I am going to leave this in. 
	                //I would LOVE to chat about whether this has 
	                //any effect (trying to free 'self' from closures, see
	                //_deleteSelf), it's hard to tell in the debugger if it
	                //does make a difference. perhaps it lets self be collected
	                //quicker? In any case it does not hurt anything until i review
	                //it externally.
	                HypertagClass.prototype.mergespace({
	                    __deleteSelf__:_deleteSelf
	                }, item, true);
	            
	                item.__deleteSelf__();
	                
	                //remove all pointers to the chain we use to skip around
	                item.parent = item.parentview = null;
	                item.templateroot = item.root = null;
	                item.itemroot = null;
	                item.directory = null;
	            
	                item.items = [];

	                //remove all delegate methods
	                for(var key in item)
	                    if(key.startsendswith("__"))
	                        item[key] = false;
	            
	                item.isHypertag = null;
	            }
	        }

	        //wheher or not we were first asked to reset or remove we will removing everything non-conditionally 
	        //on everything beneath the first node.
	        eventtype = "__removing__";
	        erase_unconditionally = true;
	        item = null;
	    }

	    return true;
	}

	//this is part of the remove system, called to free "self" (make
	//it equal null) via the same closure system the rest of the namespace
	//methods use to get access to self. If i am correct, running this as 
	//part of the teardown will disassociate the element from all the closures.
	GLOBAL._deleteSelf = function(){
	    self = null;
	};

	//given an html element (a "node"), find the first parent with an "obj" attribute.
	//in the Hypertag architecture, this will always be the template instance parent to 
	//the node passed as being where to start ("here").
	HypertagClass.prototype._resolveParentReferences = function(){
	    var node = this, self = this;

	    //the four refs we want to find
	    var root, itemroot, parentview, directory;

	    //if we are already a list item, do not find a itemroot. you can think of 
	    //it as out of scope - if you wanted the itemroot of an item, you'd say
	    //self.itemlist.itemroot.
	    if(self.itemlist)
	        itemroot = false;

	    //go up until we find what we want

	    var nodesontheway = [];

	    while(1){    
	        node = node.parentNode;
	        nodesontheway.push(node);
	    
	        //if undefined there were no parents
	        if(!node || (root !== undefined && itemroot !== undefined && parentview !== undefined))
	            return [parentview, root, itemroot, directory];
	        
	        if(itemroot === undefined && node.itemlist)
	            itemroot = node;
	    
	        //if this current has hypertag, it's a parentview, break;
	        if(parentview === undefined && node.isHypertag){
	            parentview = node;
	            directory = node.directory;
	        }
	        
	        //which is a element with a .isHypertag reference
	        if(root === undefined && node.isHypertag){
	            //which is the root if 'template' is defined
	            if(node.template)
	                root = node;

	            //or has a good reference to the closest root, so why not just return it?
	            else if(node.root)
	                root =  node.root;
	        }
	    }
	}

	//INTENT: I merely run a selector to find a node beneath self with the given name, a very handy and oft-used shortcut.
	HypertagClass.prototype.child = function(names){
	    return $(this).child(names);
	};

	//INTENT: I merely run a selector to find a node beneath self with the given name, a very handy and oft-used shortcut.
	HypertagClass.prototype.named = function(names){
	    return $(this).named(names);
	};

	/* use this to make some view come front, making all else go back one.  */
	HypertagClass.prototype.sibling = function(names){
	    return $(this).sibling(names);
	};

	//INTENT: I merely run a selector to find a node beneath self with the given name, a very handy and oft-used shortcut.
	HypertagClass.prototype.$child = function(names, tagtype){
	    return $(this).$child(names);
	};

	//INTENT: I merely run a selector to find a node beneath self with the given name, a very handy and oft-used shortcut.
	HypertagClass.prototype.$named = function(names){
	    return $(this).$named(names);
	};

	/* use this to make some view come front, making all else go back one.  */
	HypertagClass.prototype.$sibling = function(names, tagtype){
	    return $(this).$sibling(names);
	};

	//INTENT: find the index of a child in the list
	HypertagClass.prototype.indexOf = function(elem){
	    return this.items.indexOf(elem);
	};

	//INTENT: I merely run a selector to find a node beneath self with the given name, a very handy and oft-used shortcut.
	HypertagClass.prototype.hasChild = function(names, tagtype){
	    return $(this).hasChild(names);
	};

	//INTENT: I merely run a selector to find a node beneath self with the given name, a very handy and oft-used shortcut.
	HypertagClass.prototype.hasNamed = function(names){
	    return $(this).hasNamed(names);
	};

	/* use this to make some view come front, making all else go back one.  */
	HypertagClass.prototype.hasSibling = function(names, tagtype){
	    return $(this).hasSibling(names);
	};

	//INTENT: given a dictionary, return all children that have values to match all key/attrs in the dict.
	//like findItems({item:'bob'})
	HypertagClass.prototype.findItems = function(testdict, oneach, breakOnFirstFlag){
	    if(!this.list)
	        throw "findItems is being called on a non-list hypertag.";

	    var found_items = [];
	    for(var i = 0; i < this.items.length ; i ++){
	    
	        var found = true;
	        for(var key in testdict){
	            if(testdict[key] === undefined)
	                continue;
	            
	            if(this.items[i].data[key] != testdict[key]){
	                found = false;
	                break;
	            }
	        }       
	    
	        /* if found save both the item and the index we found it at for passing to the user-function*/
	        if(found){
	            found_items.push([this.items[i], i]);
	            if(breakOnFirstFlag)
	                break;
	        }
	        
	    }   

	    /* if they gave us a oneach method, run it on each item with the hypertag as scope. */
	    if(oneach)
	        for(var i = 0; i < found_items.length ; i ++)
	            oneach.call(self, found_items[i][0], found_items[i][1]);

	    /* strip the index back out to return a list of just the found items */
	    var output = [];
	    for(var i = 0; i < found_items.length ; i ++)
	        output.push(found_items[i][0]);
	    
	    return output;
	}

	HypertagClass.prototype.findItem = function(testdict, oneach){
	    var result = this.findItems(testdict, oneach, true);
	    return result.length ? result[0] : false;
	}

	//INTENT: return a list of dictionaries stored in this hypertag
	HypertagClass.prototype.dataFromItems = function(filterkeys){
	    var data = [];

	    if(filterkeys !== undefined)
	        filterkeys = stringToList(filterkeys);

	    var items = this.items;

	    for(var i = 0; i < items.length; i ++){
	        var json_item = copy(items[i].data, {});
	    
	        if(json_item.self)
	            delete json_item.self; /* self is put in, it must be removed */
	        
	        if(json_item.itemlist)
	            delete json_item.itemlist; /* self is put in, it must be removed */
	        
	        /* if there's a filter  */
	        if(filterkeys !== undefined){
	            for(var key in json_item)
	                if(filterkeys.indexOf(key) === -1)
	                    delete json_item[key];
	        }
	        
	        data.push(json_item);
	    }
	    
	    return data;
	};

	//INTENT: return a list of selected dictionaries stored in this hypertag
	HypertagClass.prototype.dataFromSelected = function(filterkeys){
	    var data = [];

	    filterkeys = stringToList(filterkeys);

	    var items = this.selectedItems;

	    for(var i = 0; i < items.length; i ++){
	        var json_item = copy(items[i].data, {});
	    
	        if(json_item.self)
	            delete json_item.self; /* self is put in, it must be removed */
	        
	        if(json_item.itemlist)
	            delete json_item.itemlist; /* self is put in, it must be removed */
	        
	        /* if there's a filter  */
	        if(filterkeys !== undefined){
	            var to_push = {};
	            for(var i = 0; i < filterkeys.length ; i ++)
	                to_push[filterkeys[i]] = json_item[filterkeys[i]];
	        }
	        
	        data.push(json_item);
	    }
	    
	    return data;
	};

	//INTENT: renumber the items managed by the hypertag, and for efficiency sake,
	//start renumbering at the number passed, to the end, since the operations
	//only displace single items starting at a given point, when they do.
	HypertagClass.prototype.renumberItems = function(rangenum){

	    /* if undefined renumber everything */
	    if(rangenum === undefined)
	        var start = 0;
	    else
	        var start = rangenum;
	    
	    var end = this.items.length;

	    /* actually do the renumbering */
	    for(var i = start; i < end; i ++){
	        if(this.items[i] === undefined)
	            continue;

	        this.items[i].i = i;
	        this.items[i].data.i = i;
	    }        
	};

	//INTENT: create and append a hypertag on ourselves, using the given template,
	//and on an optional target, such that calling it
	//with only a template_name creates a template from the global store with
	//this hypertags' element as the target.
	HypertagClass.prototype.create = function(template_name, data, inner_template_flag){
	    return create(this, template_name, data, inner_template_flag);
	};

	//INTENT: This differs from create in that it will treat the given templatetag as 
	//an item of this hypertag, with all that it implies for init events, etc.
	HypertagClass.prototype.createItem = function(template_name, data){
	    return createItem(this, template_name, data);
	};

	//INTENT: This differs from create in that it will treat the given templatetag as 
	//an item of this hypertag, with all that it implies for init events, etc.
	HypertagClass.prototype.createUnaddedItem = function(template_name, data){
	    return createItem(this, template_name, data, true); /* true supresses adding new item to the self.items array */
	};

	//INTENT: return a dict with each key derived from the name of 
	//an input (that has a name) and it's value, for sending back 
	//to the server. 
	HypertagClass.prototype.dataFromInputs = function(){
	    var self = this;
	    var $self = $(self);
	    var objs = {};

	    $self.find('input[type=field]').each(function(){
	        if(this['name'])
	            objs[this.name] = $(this).val();
	    });

	    $self.find('input[type=password]').each(function(){
	        if(this['name'])
	            objs[this.name] = $(this).val();
	    });

	    $self.find('select').each(function(){
	        if(this['name'])
	            objs[this.name] = $(this).val();
	    });

	    return objs;
	}

	//INTENT: on items, this allows the data on the item to automatically mapped onto
	//nodes of matching name, if any. 
	HypertagClass.prototype.dataToInputs = function(data){
	    var self = this;

	    if(!data)
	        data = self.data;
	    
	    for(var key in data){
	        var items = $(self).find("[name="+key+"]");
	        for(var i = 0; i != items.length ; i ++){
	            if(items[i].getAttribute("type") == 'field')
	                $(items[i]).val(data[key]);
	            else
	                $(items[i]).text(data[key]);
	        }
	    }
	}

	//Loop through the children, securemethod any that don't match the filter criteria. (all nodes are always inited, just hidden on no-match)
	//this is bound to the 'filter' attribute. setting that on this hypertag (to none or to a function meant to evaluate) causes this run.
	HypertagClass.prototype._evaluateFilter = function(){
	    var self = this;

	    //if filter is an empty string or false or undefined, accept all.
	    if(!self.__filter__)
	        self.__filter__ = function(x){return true};

	    //cycle through children, marking things that don't pass the filter as hidden or vice versa.    
	    for(var i = 0; i < self.items.length ; i ++){
	        if(!self.__filter__(self.items[i])){
	            if(self.items[i].selected) 
	                self.items[i].unselect();
	            $(self.items[i]).addClass('hidden');
	        }else{
	            $(self.items[i]).removeClass('hidden');        
	        }
	    }       
	}

	//////////////////////////////////////////////////////////////////////////////
	//Behaviors that are applied in layers to the list to accenutate it;
	//these will be put in seperate files shortly.
	//////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////
	//mixin methods that manage, save/send, reorganize, etc items in a Hypertag.
	//////////////////////////////////////////////////////////////////////////////

	/* this will ensure anything passed as fodder for a list conforms i.e. nothing to object
	   non-object to object, object to list, such that, when done, all entries are objects
	   in a list (note a non object 'val' is turned into {item:val} for processing)*/
	HypertagClass.prototype._prepareListItems = function(initial_values){
	    /* if no initial values we give a list with a single empty dict */

	    if(initial_values===undefined)
	        initial_values = [{}];
	    
	    /* if they pass a single item, promote it to a list */
	    else if(!(initial_values instanceof Array))
	        initial_values = [initial_values];

	    else
	        initial_values = copy(initial_values);
	    
	    /* this will cast non objects into a standard item:val format,
	       or turn a sequence of list items into their .data items.. */
	    for(var i = 0; i < initial_values.length ; i ++){
	        if(initial_values[i] && initial_values[i].itemlist)
	            initial_values[i] = initial_values[i].data;

	        else if(!initial_values[i] || initial_values[i].constructor !== Object)
	            initial_values[i] = {item:initial_values[i]};
	    }

	    return initial_values;
	}

	//INTENT: add a new child to a list
	//add a new obj to the list. If no url is given, create an obj using the initial_values
	//to make the new obj. That is why there are two patterns in the add method.
	HypertagClass.prototype.appendItems = HypertagClass.prototype.addItems = function(initial_values, uneventfully){
	    var self = this;
	    var new_item;

	    var output_items = [];

	    initial_values = self._prepareListItems(initial_values);
	    
	    for(var i = 0; i < initial_values.length ; i ++){
	  
	        //apply defaults to object!
	        var new_obj = {}; 

	        var data_from_entry = initial_values[i];
	        copy(data_from_entry, new_obj);

	        new_obj.i = self.items.length;

	        if(self._use_shadow_items && self.lazyreversed && !self._lazyreversedLoaded){
	            var new_item = {
	                data:new_obj,
	                selected:false
	            };
	        }
	    
	        else if(self._use_shadow_items && !self.lazyreversed && self.items[self.items.length-1] && self.items[self.items.length-1].ELEMENT_NODE === undefined){
	            var new_item = {
	                data:new_obj,
	                selected:false
	            };
	        }
	    
	        else{
	            if(self.__preloadingitem__)
	                new_obj = self.__preloadingitem__(new_obj) || new_obj;

	            if(self.__loadingitem__)
	                new_obj = self.__loadingitem__(new_obj) || new_obj;
	            
	            //make the new obj usin the obj given
	            try{
	                var new_item = _createHypertagContent(self, new_obj, self)[0];
	                if(!new_item)
	                    var msg = "No template or anonymous template provided when loading a template from URL, at: "+$("<div></div>").append(self).html();

	            }catch(e){
	                throw "error in template: "+e+' in '+self.template+"\n\n(not having a template defined can cause this too)";
	            }                        
	        }
	    
	        output_items.push(new_item);
	        self._initListItem(new_item, new_obj);

	        //after adding something to the bottom, show the bottom of the list 
	        if(self['selectable'] && self['selectnew']){
	            self.items[self.items.length-1].setSelection();
	            $(self['container']).scrollToBottom();
	        }
	    }

	    /* we only call changed once no matter how many added! */
	    if(uneventfully !== true){
	        self.fire('__added__', output_items);
	        self.fire('__changed__', output_items);
	    }

	    /* if it's one item, return the item. otherwise return a list of the items. */
	    /* Hypertag.Runtime.ExpandHypertags(self); */
	    return output_items.length > 1 ? output_items : output_items[0];
	};

	/* a convienence to add only items that are not already in the list */
	HypertagClass.prototype.appendItemsUniquely = HypertagClass.prototype.addItemsUniquely = function(initial_values, uneventfully){
	    var self = this;
	    initial_values = self._prepareListItems(initial_values);

	    var deduplicated_items_to_make = [];

	    for(var i = 0; i < initial_values.length ; i ++){    
	        /* use the items' .data if we are passed elements */
	        var item = initial_values[i].ELEMENT_NODE ? initial_values[i].data : initial_values[i];
	        var compare_item = deepcopyitem(item);
	    
	        /* only compare NON-object items for equality */
	        for(var key in compare_item)
	            if(compare_item[key] instanceof Object)
	                delete compare_item[key];

	        /* (and skip 'i' too) */
	        if(compare_item.i !== undefined)
	            delete compare_item.i;
	    
	        if(!self.findItem(compare_item))
	            deduplicated_items_to_make.push(item);
	    }
	    
	    return self.appendItems(deduplicated_items_to_make, uneventfully);
	}

	//INTENT: insert a new child to a list
	//Dervived from .appendItems
	HypertagClass.prototype.prependItems = function(initial_values, uneventfully){
	    var self = this;
	    var new_item;

	    var output_items = [];

	    initial_values = self._prepareListItems(initial_values);
	    
	    for(var i = 0; i < initial_values.length ; i ++){
	 
	        //apply defaults to object!
	        var new_obj = {}; 

	        var data_from_entry = initial_values[i];
	        copy(data_from_entry, new_obj);
	    
	        if(self._use_shadow_items && self.items[0] && self.items[0].ELEMENT_NODE === undefined){
	            var new_item = {
	                data:new_obj,
	                selected:false
	            };
	        }
	    
	        else{
	            if(self.__preloadingitem__)
	                new_obj = self.__preloadingitem__(new_obj) || new_obj;

	            if(self.__loadingitem__)
	                new_obj = self.__loadingitem__(new_obj) || new_obj;
	            
	            //make the new obj usin the obj given
	            try{
	                var new_item = _createHypertagContent(self, new_obj, self, false)[0];
	                if(!new_item)
	                    var msg = "No template or anonymous template provided when loading a template from URL, at: "+$("<div></div>").append(self).html();

	            }catch(e){
	                throw "error in template: "+e+' in '+self.template+"\n\n(not having a template defined can cause this too)";
	            }                        
	        }
	    
	        self.items.insert(new_item, 0);
	        self.renumberItems();
	        self._initListItem(new_item, new_obj, true); //dont add to children
	        output_items.push(new_item);
	    }

	    /* we only call changed once no matter how many added! */
	    if(uneventfully !== true){
	        self.fire('__added__', output_items);
	        self.fire('__changed__', output_items);
	    }

	    /* if it's one item, return the item. otherwise return a list of the items. */
	    /* Hypertag.Runtime.ExpandHypertags(self); */
	    return output_items.length > 1 ? output_items : output_items[0];
	};

	/* a convienence to add only items that are not already in the list */
	HypertagClass.prototype.prependItemsUniquely = function(initial_values, uneventfully){
	    var self = this;
	    initial_values = self._prepareListItems(initial_values);

	    var deduplicated_items_to_make = [];

	    for(var i = 0; i < initial_values.length ; i ++){    
	        /* use the items' .data if we are passed elements */
	        var item = initial_values[i].ELEMENT_NODE ? initial_values[i].data : initial_values[i];
	        var compare_item = deepcopyitem(item);
	    
	        /* only compare NON-object items for equality */
	        for(var key in compare_item)
	            if(compare_item[key] instanceof Object)
	                delete compare_item[key];

	        /* (and skip 'i' too) */
	        if(compare_item.i !== undefined)
	            delete compare_item.i;
	    
	        if(!self.findItem(compare_item))
	            deduplicated_items_to_make.push(item);
	    }
	    
	    return self.prependItems(deduplicated_items_to_make, uneventfully);
	}

	/* make a place for methods applied to items with the data api */
	Hypertag.Methods.Data = {};

	//INTENT: given a key name, repaint the list with the itens sorted by that key.
	Hypertag.Methods.Data.sortBy = function(key, direction){
	    //do what it takes to reset the hypertag for redrawing
	    if(self.selectable && self.selectedItems.length)
	        self.unselectAll();
	    
	    //If and ONLY if we are not already reset, i.e. if we have been made and 
	    //are not already reset, then reset ourselves unconditionally (1starg=true)
	    //ignoring __removing__ and __erase__ stanzas, since reload is yet a third logical
	    //pattern by being more of a update-in-place operation then a detruction...
	    if(self.initialized  && !self.isReset)
	        self.reset(true);

	    //mark we are now dirty
	    self.set('isReset', false);
	    
	    //since we are making all our child items from scratch, set this to a new array
	    self.items = new Array;

	    var sortedFields = new Array;

	    if(direction)
	        this._sort_direction = direction;

	    for(var i = 0; i < this.items.length; i ++)
	        sortedFields.push( [this.items[i].data[key], this.items[i].data] );
	    
	    sortedFields.sort();

	    //if "true" sort most to least, false least to most.
	    if(!this._sort_direction)
	        sortedFields.reverse();
	    
	    //strip out the objects in the sorted array (index 1) to reload the list with 
	    var newObjs = new Array;
	    for(var i = 0; i < sortedFields.length; i ++)
	        newObjs.push(sortedFields[i][1]);

	    //this is what actually re-lays out the list.
	    this._createListItems(newObjs);

	    //do the opposite in the next call (toggle)
	    this._sort_direction = !this._sort_direction;
	};

	//INTENT: the remove method for an item is literally the same as for a hypertag element -- the .remove function tests for type automatically,
	//since in the case that an item is also a hypertag, both procedures need to be performed...
	Hypertag.Methods.Data.remove = HypertagClass.prototype.remove;
	Hypertag.Methods.Data.forceremove = HypertagClass.prototype.forceremove;

	/* INTENT: this is differnt from insertItems or appendItems in that it 
	   does NOT make a new item, via passed data, for insertion. This 
	   requires the items and target be on the same view */
	HypertagClass.prototype.moveItems = function(items, child){
	    var self = this;

	    if(!(items instanceof Array))
	        items = [items];

	    /* what to do if we are NOT dropping on last child */
	    if(child && child != self.items[self.items.length-1]){
	        /* changing dom - children must be unique, so 
	           the browser handles moving the item (reordering)
	           it. */
	       
	        for(var i = 0; i != items.length ; i ++)
	            self.insertBefore(items[i], child);
	        
	        /* if we are a list-type hypertag, also mange the items list.  */
	        if(self.list){
	            /* remove all the items from self.items */
	            for(var i = 0; i != items.length ; i ++){
	                self.items.remove(self.items.indexOf(items[i]));  
	               
	                self.items.insert(
	                    items[i], 
	                    Math.min(self.items.indexOf(child), self.items.length-1)
	                );
	            }
	        }
	    }

	    /* what to do if we are dropping on last child */
	    else{
	        /* changing dom - children must be unique, so 
	           the browser handles moving the item (reordering)
	           it. */
	        for(var i = 0; i != items.length ; i ++)
	            self.appendChild(items[i]);
	    
	        /* if we are a list-type hypertag, also mange the items list.  */
	        if(self.list){
	            /* remove all the items from self.items */
	            for(var i = 0; i != items.length ; i ++){
	                self.items.remove(self.items.indexOf(items[i]));
	                self.items.push(items[i]);
	            }   
	        }
	    }

	    /* renumber the items, now that we've moved them. */
	    self.renumberItems();

	    /* deal with selecting the moved items if we are selectable */
	    //if(self.selectable){
	    //    /* set selection on item dropped, if only one is dragged,  */
	    //    if(items.length == 1)
	    //        items[0].setSelection();
	    //
	    //    /* otherwise do not cause selection, but cause all dragged to 
	    //       be selected. */
	    //    else{
	    //        self.unselectAll();
	    //        for(var i = 0; i != items.length ; i ++)
	    //            items[i].select();
	    //    } 
	    //}

	    self.fire('__changed__');
	}

	//INTENT: I insert a new item using an obj or objs, before the given item.
	//PLEASE NOTE this is overloaded. It is used both for inserting AND refreshing!
	HypertagClass.prototype.insertItems = function(objs, elem, uneventfully){
	    var output_items = [];
	    var self = this;
	    var firstidx;

	    //if they give us a number instead of an element, deal with that too
	    if(typed(elem, Number)){
	        firstidx = elem;
	        elem = self.items[elem];
	    }

	    else
	        firstidx = self.items.indexOf(elem);

	    objs = self._prepareListItems(objs);
	    
	    for(var i = 0; i < objs.length ; i ++){
	        //if there was a selection, save what it was before deselecting all.
	        var were_selected = self.selectedItems;
	        self.unselectAll();

	        //apply defaults to object!
	        var idx = firstidx+i;
	        var new_obj = {};

	        //merge in the obj passed onto the new obj
	        copy(objs[i], new_obj);

	        new_obj.i = idx;
	    
	        if(self._use_shadow_items && (!self._lazyreversedLoaded || !self.items[firstidx+i].ELEMENT_NODE)){
	            var new_item = {
	                data:new_obj,
	                selected:false
	            };
	        }
	    
	        else{
	            if(self.__preloadingitem__)
	                new_obj = self.__preloadingitem__(new_obj) || new_obj;

	            if(self.__loadingitem__)
	                new_obj = self.__loadingitem__(new_obj) || new_obj;
	        
	            //make the new obj usin the obj given
	            try{
	                var new_item = _createHypertagContent(self, new_obj, elem, true)[0];    
	                if(!new_item)
	                    throw "No template or anonymous template provided when inserting a template at: "+$("<div></div>").append(self).html();
	                

	            }catch(e){
	                throw "error in __template__: "+e+' in '+self.template+"\n\n(not having a template defined can cause this too)";
	            }                        
	        }
	        
	        output_items.push(new_item);
	        self._initListItem(new_item, new_obj, true); //true means don't add to .items when preparing
	        self.items.insert(new_item, firstidx+i);
	    }

	    /* rebuild child list. apparently insert did not work, above. to be revisited. */
	    //self.items = $.makeArray($(self).children());

	    /* renumber items */
	    self.renumberItems(firstidx);

	    /* send a change event once for all items inserted  */

	    if(uneventfully !== true){
	        self.fire('__added__', output_items);
	        self.fire('__changed__');
	    }

	    /* if it's one item, return the item. otherwise return a list of the items. */
	    return output_items.length > 1 ? output_items : output_items[0];
	}

	/* INTENT: unselect the item, fire the selection event (on nothing of course) */
	Hypertag.Methods.Data.getData = function(){
	    var self = this;
	    var data = copy(self.data);
	    delete data.i;
	    delete data.self;
	    return data;
	};

	//INTENT: I will sync the obj paired to an item - and I will recreate the template with the new
	//value, "refreshing" it.
	Hypertag.Methods.Data.refresh = function(data){

	    data && copy(data, this.data);

	    if(this._undergoingRefresh)
	        return false;
	    
	    this._undergoingRefresh = true;

	    /* if reloading is defined, we can call it to get a new data or modify the existing reference */

	    this.data = fire(this, '__reloading__', this.data) || this.data;

	    //if there was a selection, save what it was before deselecting all.
	    var was_selection = this.itemlist.selection == this;
	    var was_selected = this.selected ? true : false;

	    //if it was selected, remove it from the selected items knowing the 
	    //new one will take it's place, below.
	    if(was_selected)
	        this._removeFromSelected();
	        
	    //this method of updating destroys then re-adds the item in the same spot, resetting selection on the item if 
	    //it was previously selected.

	    //apply defaults to object!
	    var idx = this.itemlist.items.indexOf(this);

	    var new_obj = {i:idx};   
	    copy(this.data, new_obj);

	    if(!this.ELEMENT_NODE){
	        var new_item = {
	            data:new_obj,
	            selected:this.selected
	        };
	    }

	    else{
	    
	        if(this.itemlist.__preloadingitem__)
	            new_obj = this.itemlist.__preloadingitem__(new_obj) || new_obj;

	        if(this.itemlist.__loadingitem__)
	            new_obj = this.itemlist.__loadingitem__(new_obj) || new_obj;
	        
	        //make the new obj usin the obj given
	        try{
	            var new_item = _createHypertagContent(this.itemlist, new_obj, this, true)[0];    
	            if(!new_item)
	                throw "No template or anonymous template provided when inserting a template at: "+$("<div></div>").append(this.itemlist).html();
	        }catch(e){
	            throw "error in __template__: "+e+' in '+self.template+"\n\n(not having a template defined can cause this too)";
	        }       
	    
	        removeAllDescendantListensFrom(this, true);
	        $(this).remove();            
	    }

	    this.itemlist.items[idx] = this.itemlist._initListItem(new_item, new_obj, true); //true means don't add to .items when preparing 

	    if(was_selection)
	        new_item.uneventfulSelection();
	    else if(was_selected)
	        new_item.uneventfulSelect();
	    
	    //a refresh indicates a change
	    this.itemlist.fire('__changed__', [new_item]);

	    this._undergoingRefresh = false;

	    return new_item;         
	}

	//////////////////////////////////////////////////////////////////////////////
	/* 
	This is invoked on an element that has an option "optimized" or "lazy".

	here you'll find the nitty gritty of detecting what items can be seen from the scroll
	wheel api, and the other view hieracry needed to make it happen. Turns out you need
	a single div the height of your total list, and each item is subsequently absolutely
	positioned, to look as if it's filling up that space. an overlap allows for drawing
	slighly outside what one can see, making the illusion more complete.  

	You can also describe these as mixin methods that manage list optimization, because I 
	did originally write them on a template tag! I moved it in here since it was vital.. 
	This set of methods will accelerate normal lists by only drawing elements you can see; 
	elements you cant see are still there, represented by plain dicts that have .selected, etc,
	just like real items  so they can participate with selection and dragging. When an element
	undrawn scrolls into view, this code replaces the temp dict entry with the real one, applying
	selection, etc as needed to reflect the state that was in the object. self.items[x] then becomes
	equal to the new element which naturally supports the selection state we faked on the dict.
	Very good times. worked with almost -zero- alteration to existing code. NOT yet supremely optimized.
	But already so efficient I will release it.
	*/
	//////////////////////////////////////////////////////////////////////////////

	// Optimized means that it seems like the whole thing is displayed but 
	// items are made as the scroll-window moves on to them. It depends on 
	// items of a fixed size, i.e. whose size is known before they are rendered.
	// "LazyLoaded", on the other hand, means that the apparent size of the 
	// list is only as much as required to fit the initial scroll-window. As
	// the scroll window is changed, new items are created to fill the new
	// space, extending the total size of the list. Optimized lists are ideal 
	// for quickly navigating huge lists, while lazyloaded lists are ideal
	// for revealing information linearly as the user scrolls. Think facebook's
	// "news feed".
	HypertagClass.prototype._lazy = function(){
	    // we need to get the scroll window and start making 
	    // items derived from the shadow items until the scroll
	    // window is over-full. If/When the scroll-window is scrolled to 
	    // the bottom, continue creating items from the shadow-objects until 
	    // the list is again over-full (by some preset px. overlap, perhaps)

	    var self = this;

	    self.mergespace({
	        /* on update make us relative as well as parsing the lazy into form */
	        __init__:function(){        
	            self.lazy = self.lazy === true ? "height" : self.lazy;
	            self._atScrollBoundary = true;
	        
	            /* we need the container to be relatively positioned */
	            $(self).addClass('rel');        
	        
	            $(self).scroll(self.updateLazyItems);
	        
	            if(self.addEventListener)
	                /* self.addEventListener('DOMMouseScroll', self.updateVisibleItems, false); */
	                self.addEventListener('mousewheel', self.updateVisibleItems, false);
	        
	            else
	                self.onmousewheel = self.updateLazyItems;

	            /* when self.optimized[0] (ie. dimension, width, height) of our parent changes, reupdate what's visible */
	            listen(self, self.lazy, function(){
	                self.updateLazyItems(); 
	            });
	        },
	    
	        __load__:function(){
	            self._lazyIndex = self.lazyreversed ? self.items.length-1 : 0;          
	            self._lazyreversedLoaded = false;
	            self._atScrollBoundary = true;      
	        },
	    
	        __after__:function(){                
	            self.updateLazyItems();
	        },

	        /* update the visible items whenever anything changes, as well. */
	        __changed__:function(){
	            self.updateLazyItems();
	        },
	    
	        __subtracted__:function(){
	            self._lazyIndex = Math.max(self._lazyIndex-1, 0);
	        },
	    
	        //__added__:function(){
	        //    self._lazyIndex = Math.max(self._lazyIndex+1, 0);
	        //},

	        createLazyItem:function(){
	            /* the "old data" is the data we are creating ourselves from  */
	            var shadow_item = self.items[self._lazyIndex];
	        
	            if(shadow_item && shadow_item.ELEMENT_NODE === undefined){
	                /* if there are items to revive, notify the hypertag */      
	                var process_flag = self.fire('__lazyitem__', self._lazyIndex);
	            
	                if(process_flag !== false){
	                    var new_data = shadow_item.data;

	                    //since it's about to come into existance
	                    if(self.__preloadingitem__)
	                        shadow_item.data = self.__preloadingitem__(shadow_item.data) || shadow_item.data;

	                    if(self.__loadingitem__)
	                        shadow_item.data = self.__loadingitem__(shadow_item.data) || shadow_item.data;

	                    /* make a real item where before was only a dict with .data and .selected */
	                    var template = self.inner_template && self.use_inner_template ? self.inner_template : self.template;
	                    shadow_item.itemlist = self;
	                    shadow_item.data.self = self;

	                    var new_item = self.createUnaddedItem(template, shadow_item.data); 
	                
	                    self.items[self._lazyIndex] = new_item;
	                    var $new_item = $(new_item);

	                    //need to run events specific to the creation of the item.
	                    Hypertag.Runtime.LoadItemEvents.push([self, new_item]);
	                    Hypertag.Runtime.LoadedItemEvents.push([self, new_item]);
	                
	                    if(self.selection === shadow_item)
	                        self.selection = new_item;

	                    /* establish selection as indicated by the old data. */
	                    if(self.selectable && shadow_item.selected){
	                        new_item.selected = true;
	                        var selected_idx = self.selectedItems.indexOf(shadow_item);
	                        self.selectedItems[selected_idx] = new_item;
	                        $new_item.addClass(self.selectable[1]);
	                    }

	                    else if(self.selectable[2])
	                        $new_item.addClass(self.selectable[2]);
	                }
	            }
	        
	            if(self.lazyreversed){
	                self._lazyIndex -= 1;
	                if(self._lazyreversedLoaded)
	                    animate(self, {scrollTop: 5}, 0);
	            }

	            else
	                self._lazyIndex += 1;
	        
	            setTimeout(self.updateLazyItems);
	        },
	    
	        updateLazyItems:function(returnValueOnlyFlag){
	            if(self._pauseScrollUpdating)
	                return false;

	            //it's no fun to call ourselves while we're processing a scroll event, as may occur from
	            //events superceding setTimeouts issued from createLazyItem already in flight.
	            self._pauseScrollUpdating = true;
	            
	            if(self.lazyreversed){
	                //if needed, create an item (which schedules us to check again via setTimeout until none are left to create
	                //the timeout model makes sure that the height of new items have time to be fully calculated before each new item)
	            
	                //if the reload has happened, going to scrollTop zero makes more
	                if(self.lazy == "height" && self._lazyreversedLoaded && self.scrollTop == 0)
	                    self._lazyIndex != -1 ? 
	                        self.createLazyItem() : self.fire("__lazybegin__") || (self._lazyIndex != -1 && setTimeout(self.createLazyItem));
	            
	                else if(self.lazy == "height" && self.offsetHeight - self.scrollHeight >= 0)
	                    self._lazyIndex != -1 ? 
	                        self.createLazyItem() :  self.fire("__lazybegin__") || (self._lazyIndex != -1 && setTimeout(self.createLazyItem));

	                if(self.lazy == "width" && self._lazyreversedLoaded && self.scrollLeft == 0)
	                    self._lazyIndex != -1 ? 
	                        self.createLazyItem() : self.fire("__lazybegin__") || (self._lazyIndex != -1 && setTimeout(self.createLazyItem));

	                else if(self.lazy == "width" && self.offsetWidth - self.scrollWidth >= 0)
	                    self._lazyIndex != -1 ? 
	                        self.createLazyItem() :  self.fire("__lazybegin__") || (self._lazyIndex != -1 && setTimeout(self.createLazyItem));
	                
	                //on the last draw of a list not yet initialized, go to the bottom
	                else if(!self._lazyreversedLoaded){
	                    if(self.lazy == "height")
	                        animate(self, {scrollTop: $(self).prop("scrollHeight")}, 0);
	                
	                    else if(self.lazy == "width")
	                        animate(self, {scrollLeft: $(self).prop("scrollWidth")}, 0);
	                
	                    self._lazyreversedLoaded = true;
	                }   
	            }
	        
	            else{
	                //if needed, create an item (which schedules us to check again via setTimeout until none are left to create
	                //the timeout model makes sure that the height of new items have time to be fully calculated before each new item)
	                //console.log("self.scrollHeight-3 <= self.scrollTop + self.offsetHeight", self.scrollHeight, self.scrollTop, self.offsetHeight);
	                if(self.lazy == "height" && self.scrollHeight-3 <= self.scrollTop + self.offsetHeight)
	                    self._lazyIndex <= self.items.length-1 ? 
	                        self.createLazyItem() : 
	                        self.fire('__lazyend__') || (self._lazyIndex <= self.items.length-1 && setTimeout(self.createLazyItem));
	                

	                if(self.lazy == "width" && self.scrollWidth-3 <= self.scrollLeft + self.offsetWidth)
	                    self._lazyIndex <= self.items.length-1 ? 
	                        self.createLazyItem() : 
	                        self.fire('__lazyend__') || (self._lazyIndex <= self.items.length-1 && setTimeout(self.createLazyItem));
	            }
	        
	            //again allow ourselves to be called (see comment at top)
	            self._pauseScrollUpdating = false;
	            return true;
	        }
	    });
	};

	HypertagClass.prototype._optimized = function(){
	    var self = this;

	    /* all of these are mapped onto, in normal fashion via self.mergespace,
	       the element under consideration. You can consider the following as if it was written on 
	       the element. */
	    self.mergespace({
	        /* display for the first time, each time */
	        __after__:function(){
	            self.resize();
	            self.updateVisibleItems();
	        },

	        /* update the visible items whenever anything changes, as well. */
	        __changed__:function(){
	            self.resize();
	            self.updateVisibleItems();
	        },

	        /* on update make us relative as well as parsing the optimized list into form */
	        __init__:function(){        
	            /* we need the container to be relatively positioned */
	            $(self).addClass('rel');        
	            self.optimized = stringToList(self.optimized);
	            self.optimized[1] = parseInt(self.optimized[1], 10);
	            self.optimized[2] = self.optimized[2] ? parseInt(self.optimized[2], 10) : 10;
	        },

	        /* set up listeners (that survive reload) to update the visible items when we scroll */
	        __ready__:function(){    
	            $(self).scroll(self.updateVisibleItems);
	        
	            if(self.addEventListener){
	                /* self.addEventListener('DOMMouseScroll', self.updateVisibleItems, false); */
	                self.addEventListener('mousewheel', self.updateVisibleItems, false);
	            }
	        
	            else
	                self.onmousewheel = self.updateVisibleItems;

	            /* when self.optimized[0] (ie. dimension, width, height) of our parent changes, reupdate what's visible */
	            listen(self, self.optimized[0], function(){
	                self.updateVisibleItems(); 
	            });
	        },

	        /* create a single div to provide space for the number of items we would have if all existed
	           note that calling reset() (when optimizedreload is false anyway) will remove this so we check
	           to see if it's there every load to be sure and if not, make it. */
	        __loaded__:function(){ 
	            if(self._sizingdiv === undefined){
	                self._sizingdiv = self.create();
	                self._sizingdiv.OPTIMIZED_SIZING_DIV = true; /* a flag we can use to determine if a child is this or not, quickly. */
	                $(self._sizingdiv).addClass("rel");
	            }
	        },

	        /* this is how to remove all the items - and then repaint only the visible ones - without causing 
	           the scroll window to change. */
	        _optimizedRemove:function(){
	            var $self = $(self);

	            /* if we are optimized reload slightly differenty - by not calling reset - which would have
	               destroyed the sizing div. this method is equivalent to a "normal" reload, but for erasing it. */
	            var children = $.makeArray($self.children());

	            /* important: cut out any recursion (extra scroll updates that would otherwise occur when items are removed)
	              using this flag! */
	            self._pauseScrollUpdating = true;
	        
	            /* all items got __removing__ above, but we need to release listeners attached to our
	               own lifespan. reset does this automatically - but reset() also erases everything and we want the
	               sizing div to remain. */
	            removeAllDescendantListensFrom(self, true, "__reset__");

	            try{
	                /* remove everything that isn't the sizing div */
	                for(var i = children.length-1; i >= 0 ; i --){
	                    var item = children[i];

	                    if(item.ELEMENT_NODE && !item.OPTIMIZED_SIZING_DIV)
	                        $(item).remove();
	                }
	            }catch(err){
	                throw "Hypertag Engine\n    A Runtime error occurred when reloading optimized list (removing items):\n\n    "+String(err);
	            }

	            /* allow scroll events to occur again. now that all the items are removed (otherwise it would have fired for each as they left) */
	            self._pauseScrollUpdating = false;
	        
	        },

	        /* this is how to remove all the items - and then repaint only the visible ones - without causing 
	           the scroll window to change. */
	        _optimizedRemoveUnseen:function(start, stop){
	            var $self = $(self);
	            var children = $.makeArray($self.children());
	            self._pauseScrollUpdating = true;

	            try{
	                /* make the scroll window we use to remove items correspond to the overlap given as the 3rd arg */
	                var scrollTop = self.scrollTop-(self.optimized[1]*self.optimized[2]);
	                var self_height = $self.height()+(self.optimized[1]*self.optimized[2]);

	                /* remove everything that isn't the sizing div */
	                for(var i = children.length-1; i >= 0 ; i --){
	                    var item = children[i];

	                    if(!item.OPTIMIZED_SIZING_DIV && (item.data.i < start || item.data.i > stop))
	                        self._dehydrateOptimizedItem(item);
	                }
	            }catch(err){
	                throw "Hypertag Engine\n    A Runtime error occurred when reloading optimized list (removing items):\n\n    "+String(err);
	            }

	            /* allow scroll events to occur again. now that all the items are removed (otherwise it would have fired for each as they left) */
	            self._pauseScrollUpdating = false;
	        },

	        //for a given item in an optimized list, flip it from a real item to a shadow one.
	        _dehydrateOptimizedItem:function(item){
	            var shadow_item = {
	                data:copy(item.data), 
	                itemlist:self
	            };

	            /* save the self on the shadow_item's data just as a real item would have */
	            shadow_item.data.self = shadow_item;

	            if(self.selectable){
	                var SelectingMethods = Hypertag.Methods.Selecting;
	                for(var key in SelectingMethods)
	                    shadow_item[key] = SelectingMethods[key];
	            }

	            /* if the item has selection, we'll want to set selection to this shadow_item */
	            if(self.selection === item){
	                self.selection = shadow_item;
	                self.selectedItems = [item];
	            }

	            /* if the item is selected we have to insert the shadow_item and delete the item
	               from selectedItems for the selection trickery to work */
	            else if(item.selected){
	                shadow_item.selected = true;
	                var idx = self.selectedItems.indexOf(item);
	                self.selectedItems[idx] = shadow_item;
	            }

	            /* set the item to the shadow_item */
	            self.items[shadow_item.data.i] = shadow_item;

	            removeAllDescendantListensFrom(item, true);
	            $(item).remove();
	        },

	        //for a given direction of optimization and an item, change a shadow item into a real one.
	        _hydrateOptimizedItem:function(offsetDirection, idx){
	            /* the "old data" is the data we are creating ourselves from  */
	            var shadow_item = self.items[idx]
	            var new_data = self.items[idx].data;
	        
	            /* if it's an actual node, skip it! */
	            if(shadow_item.ELEMENT_NODE === undefined){
	                //since it's about to come into existance
	                if(self.__preloadingitem__)
	                    self.items[idx].data = self.__preloadingitem__(self.items[idx].data) || self.items[idx].data;

	                if(self.__loadingitem__)
	                    self.items[idx].data = self.__loadingitem__(self.items[idx].data) || self.items[idx].data;
	                
	                /* make a real item where before was only a dict with .data and .selected */
	                var template = self.inner_template && self.use_inner_template ? self.inner_template : self.template;
	                shadow_item.itemlist = self;
	                shadow_item.data.self = self;
	            
	                var new_item = self.createUnaddedItem(template, shadow_item.data); 
	                self.items[idx] = new_item;
	                var $new_item = $(new_item);

	                /* set the item to look right */
	                //$(new_item).addClass("absolute");
	                //$(new_item).css(self.optimized[0], self.optimized[1]+"px");   

	                if(self.selection === shadow_item){
	                    self.selection = new_item;
	                    self.selectedItems = [new_item];
	                }
	                
	                /* establish selection as indicated by the old data. */
	                else if(self.selectable && shadow_item.selected){
	                    new_item.selected = true;
	                    var selected_idx = self.selectedItems.indexOf(shadow_item);
	                    self.selectedItems[selected_idx] = new_item;
	                    $new_item.addClass(self.selectable[1]);
	                }
	            
	                else if(self.selectable[2])
	                    $new_item.addClass(self.selectable[2]);

	                $(self.items[idx]).css(offsetDirection, idx*self.optimized[1]+"px");

	                //since it did just come into existance. NOTE: with optimized lists
	                //these events will not naturally be produced.. it will wait till the actual 
	                //invocation. that does mean these __load*item__ delegates aren't "stateful",
	                //that is, you dont get exactly one call per item, but one call per time the item
	                //is made (i.e converted from shadow object when scrolled into view)
	                self.fire('__loaditem__', new_item);
	                self.fire('__loadeditem__', new_item);
	            }

	            else{
	                /* in any case, position the item that has been drawn - when things are removed, for instance,
	                all in view should be repositioned, this does that and inits newly minted non-shadow items, both. */
	                $(self.items[idx]).css(offsetDirection, idx*self.optimized[1]+"px");
	            }
	        },

	        /* given a stop and start index, update items at that range. */
	        updateRange:function(start, stop){ 
	            /* flag to prevent updateRange from being called too many times (?!?) */
	            if(self.isUpdating === true)
	                return false;

	            self.isUpdating = true;

	            var offsetDirection = self.optimized[0] == 'height' ? "top" : "left";   
	            var to_process = [];

	            /* if optimized remove is true, we should efficiently get rid of things no longer in view! */
	            if(self.optimizeditems)
	                self._optimizedRemoveUnseen(start, stop);

	            /* find items we can revive */
	            for(var i = Math.max(start, 0); i <= Math.min(stop, self.items.length-1) ; i++)
	                to_process.push(i);

	            /* if there are items to revive, notify the hypertag */      
	            if(to_process.length)
	                self.fire('__optimize__', to_process);

	            /* for each item to revive, create an item with the right
	               x or y to appear in place. */
	            while(to_process.length)
	                self._hydrateOptimizedItem(offsetDirection, to_process.shift());

	            self.isUpdating = false;
	        },

	        /* reset the self.optimized[0] of ourselves to accomodate having inserted or removed items */
	        resize:function(){
	            set(self._sizingdiv, self.optimized[0], self.optimized[1]*self.items.length);
	        },

	        /* whenever mouse moves, this little formula posts an event
	           using the num. of items in the list to tell us what
	           items are visible (presumes a fixed size item!) */
	        updateVisibleItems:function(returnValueOnlyFlag){
	            if(self._pauseScrollUpdating)
	                return false;

	            //it's no fun to call ourselves while we're processing a scroll event, as may occur from
	            //events superceding setTimeouts issued from createUnaddedItem calls already in flight.
	            self._pauseScrollUpdating = true;

	            var frame_start = self.scrollTop/self._sizingdiv[self.optimized[0]];
	            var frame_stop = (self.scrollTop+self.offsetHeight)/self._sizingdiv[self.optimized[0]];

	            /* the final step in turning our scroll state variables into a range
	               of items that are currently visible, given a vertical (or horizontal)
	               size of 'self.size' */
	            self.startrange = Math.max(0, Math.ceil(self.items.length*frame_start)-self.optimized[2]);
	            self.stoprange = Math.min(self.items.length , Math.ceil(self.items.length*frame_stop)+self.optimized[2]);

	            /* resize the div that will define how tall we are, i.e. even if
	               the items at that index haven't been painted, the scrollbar
	               will show the appropriate amount of space. */
	            self.resize();

	            /* what to do when the items visible change on us (provided by updateVisibleItems) */
	            self.updateRange(self.startrange, self.stoprange);
	        
	            self._pauseScrollUpdating = false;
	            Hypertag.GUI.focus.setFocused(self);
	            return true;
	        }
	    });
	};

	/* this will be applied per-item, and make that item select itself if
	   hovered over while dragging */
	HypertagClass.prototype._hoverselectable = function(item){    
	    var self = this;

	    var tagspace = {
	        __hoverover__:function(item, e){
	            self._waitingForHoverSelectable = true;
	        
	            if(Hypertag.Dragging.isDragging && !self.doubleTriggerGuard){
	                self.doubleTriggerGuard = true;
	            
	                setTimeout(function(){
	                    if(self._waitingForHoverSelectable && Hypertag.Dragging.isDragging)
	                        item.setSelection();
	                    self.doubleTriggerGuard = false;
	                }, Hypertag.Runtime.hoverdelay);
	            
	            }
	        },
	        __hoverout__:function(item, e){
	            self._waitingForHoverSelectable = false;
	        }
	    };

	    self.mergespace(tagspace);
	};

	/* THIS is a sister method to _hoverselectable, but designed to be applied
	   to non-hypertags, like button inputs. So instead of hard coding 
	   a search and apply in the hypertag initialization loop, i chose to abstract
	   it, and thus CSSTraits were born! in this case, all widgets with class "button"
	   will have this method (and any number of others, thanks to chaining/mergespace/forcechain)
	   run precisely once, for every button interior to any hypertag, using efficient
	   css-selector search. I could see this becoming a burden if too many were applied, but 
	   it does present a useful means to coordinate system-wide actvities like hover selection,
	   perfectly.  */
	GLOBAL.makeHoverSelectable = function(what, onhover){
	    var self = what;

	    $(self).hover(function(e){
	        self._waitingForHoverSelectable = true;
	    
	        if(Hypertag.Dragging.isDragging && !self.doubleTriggerGuard){
	            self.doubleTriggerGuard = true;
	        
	            setTimeout(function(){
	                if(self._waitingForHoverSelectable && Hypertag.Dragging.isDragging)
	                    onhover ? 
	                        onhover.call(self, self, e) : 
	                        $(self).trigger('click');
	                self.doubleTriggerGuard = false;
	            }, Hypertag.Runtime.hoverdelay);
	        
	            return false;
	        } 
	    }, function(){
	        self._waitingForHoverSelectable = false;
	        return false;
	    });
	};

	/* this will be applied per-item, and make that item select itself if
	   hovered over while dragging */
	HypertagClass.prototype._dragselectable = function(item){    
	    var self = this;

	    var tagspace = {
	        __hoverout__:function(item, e){
	            if(!GLOBAL.isCommandPressed || !GLOBAL.isAltPressed) 
	                return;

	            if(!Hypertag.Dragging.isDragging && !GLOBAL.isShiftPressed)               
	                if(isMouseMoving())
	                    !item.selected ? item.select() : item.unselect();
	        }
	    };

	    self.mergespace(tagspace);
	};

	/* this is just a set of methods applied to a hypertag if it's a list,
	   selectable, and they haven't set keyselectable to false specifically. */
	HypertagClass.prototype._keyselectable = function(){
	    var self = this;

	    var tagspace = {};

	    //select all and none only work if not multiselectable
	    if(self.multiselectable){
	        tagspace['__keypress__'] = function(e){
	            if(GLOBAL.isCommandPressed){
	                if(e.keyCode == 65){
	                    self.selectAll();
	                    return false;
	                }

	                else if(e.keyCode == 85){
	                    self.unselectAll();
	                    return false;
	                }
	            }else{
	                return true;
	            }
	        };
	    }

	    tagspace['__selection__'] = function(){
	        Hypertag.GUI.focus.setFocused(self);
	    };

	    tagspace['__selected__'] = function(){
	        if(self.selectedItems.length !== 1)
	            Hypertag.GUI.focus.setFocused(self);
	    };

	    if(self.keyremovable)
	        tagspace['__backspace__'] = function(){
	            /* if there are selected items, or if they aksed for key remove confirmed, only if alt pressed */
	            if(self.selectedItems.length && (!self.keyremovableconfirm || GLOBAL.isCommandPressed)){
	                var items = self.selectedItems.copy();
	                var idx = self.items.indexOf(self.selectedItems.last());
	                for(var i = 0; i != items.length; i ++)
	                    items[i].remove();

	                if(self.items[idx])
	                    self.items[idx].setSelection();
	                else if(self.items[idx-1])
	                    self.items[idx-1].setSelection();
	                else if(self.items[idx+1])
	                    self.items[idx+1].setSelection();
	                else if(self.items[0])
	                    self.items[0].setSelection();
	            }
	        }

	    /* IF we are linearselectable (def. true), we will use the arrow keys to go up/down */
	    if(self.linearselectable){
	        /* when up arrow pressed select one less then current or last */
	        var uparrow_function = function(){
	            if(self.items.length !== 0){
	                if(GLOBAL.isShiftPressed){
	                    self.scrollTop = 0;
	                    self.items[0].setSelection();
	                }

	                else if(!self.selection && self.loopscrollable){
	                    self.scrollTop = self.scrollHeight-1;
	                    self.items.last().setSelection();
	                }
	                
	                else{
	                    var idx = self.items.indexOf(self.selection);
	                
	                    if(self.lazy && self.lazyreversed && self.items[idx-1] && !self.items[idx-1].ELEMENT_NODE){
	                        animate(self, {scrollTop:0}, 0);
	                        setTimeout(function(){
	                            if(self.items[idx-1])
	                                self.items[idx-1].setSelection();
	                            else if(self.loopscrollable)
	                                self.items[self.items.length-1].setSelection();
	                            else
	                                self.fire("__scrollbegin__"); 
	                        });
	                    }
	                    
	                    
	                    else{
	                        if(self.items[idx-1])
	                            self.items[idx-1].setSelection();

	                        else if(self.loopscrollable){
	                            self.scrollTop = self.scrollHeight-1;
	                            self.items[self.items.length-1].setSelection();
	                        }
	                        
	                        else
	                            self.fire("__scrollbegin__");
	                    }
	                }
	            }  
	        };
	    
	        /* when down arrow pressed select one more then current or first */
	        var downarrow_function = function(){
	            if(self.items.length !== 0){
	                if(GLOBAL.isShiftPressed){
	                    self.scrollTop = self.scrollHeight;
	                    self.items.last().setSelection();
	                }
	                
	                else if(!self.selection && self.loopscrollable){
	                    self.scrollTop = 1;
	                    self.items[0].setSelection();
	                }
	                
	                else{
	                    var idx = self.items.indexOf(self.selection);   
	                    var next_item = self.items[idx+1];
	                    
	                    if(self.lazy && next_item && !next_item.ELEMENT_NODE)
	                        $(self).scrollToBottom();
	                
	                    else if(next_item)
	                        self.items[idx+1].setSelection();
	                
	                    else if(self.loopscrollable){
	                        self.scrollTop = 1;
	                        self.items[0].setSelection();
	                    }
	                    
	                    else
	                        self.fire("__scrollend__");
	                }    
	            }
	        };
	    
	        /* if reversearrowkeys is false, hook it up normal */
	        if(!self.reversearrowkeys){
	            if(self.verticalarrowkeys){
	                tagspace['__uparrow__'] = uparrow_function;
	                tagspace['__downarrow__'] = downarrow_function;
	            }
	        
	            if(self.horizontalarrowkeys){
	                tagspace['__leftarrow__'] = uparrow_function;
	                tagspace['__rightarrow__'] = downarrow_function;
	            }  
	        }
	    
	        /* otherwise hook it up reversed */
	        else{
	            if(self.verticalarrowkeys){
	                tagspace['__uparrow__'] = downarrow_function;
	                tagspace['__downarrow__'] = uparrow_function;
	            }
	        
	            if(self.horizontalarrowkeys){
	                tagspace['__rightarrow__'] = uparrow_function;
	                tagspace['__leftarrow__'] = downarrow_function;
	            }
	        }
	    }

	    /* merge the methods into the hypertag without destroying methods already there (chaining) */
	    self.mergespace(tagspace);
	};

	//////////////////////////////////////////////////////////////////////////////
	//mixin methods that manage selection
	//////////////////////////////////////////////////////////////////////////////

	//INTENT: methods to add on an item to let it manage selection
	HypertagClass.prototype._selectableItem = function(item){
	    var jitem = $(item);

	    var list = item.itemlist;

	    if(item.selected === undefined)
	       item.selected = false; 
	    
	    //INTENT: IMPORTANT: apply methods for list item to our item, to form it's api        
	    var SelectingMethods = Hypertag.Methods.Selecting;
	    for(var key in SelectingMethods)
	        item[key] = SelectingMethods[key];
	    
	    //basic hover selection, disabled if selectable[0] is false
	    if(list.selectable[0]){
	        jitem.hover(
	            function(e){
	                var list = this.itemlist;
	                var jitem = $(this);
	            
	                if(!list.mouseselectable)
	                    return;
	            
	                list.fire('__hoverover__', this, e) !== false;
	            
	                /* do not do hover effect if we are dragging or shift is down (i.e. artifacts whilst dragging/moving windows) */
	                if(Hypertag.Dragging.state == "dragging" || e.shiftKey)
	                    return;
	                
	                /* comment */
	                if(!this.selected || list.reselectable){
	                    list.selectable[2] && jitem.removeClass(list.selectable[2]);
	                    jitem.removeClass(list.selectable[1]);
	                    jitem.addClass(list.selectable[0]);
	                }
	            }, 
	        
	            function(e){                        
	                var list = this.itemlist;
	                var jitem = $(this);
	            
	                if(!list.mouseselectable)
	                    return;
	            
	                list.fire('__hoverout__', this, e) !== false;
	            
	                jitem.removeClass(list.selectable[0]);
	            
	                if(this.selected)
	                    list.selectable[1] && jitem.addClass(list.selectable[1]);
	                else
	                    list.selectable[2] && jitem.addClass(list.selectable[2]);
	            } 
	        );

	        //only if we are not drag, do we make our items clickable/double clickable; 
	        //otherwise drag has done it for us (and calls __clickitem__ correctly) as needed.
	        jitem.singleclick(list._hypertagClick, list._hypertagDblclick, list.drag && HypertagDraggingClass.prototype.dragItemMouseDown);
	    }
	}

	//INTENT: This will unselect all items. 
	//NOTE that unselecting an item removes
	//it from the .selected array, so we don't want to call unselect()
	//in the loop, or we'll alter the loop we're looping in!
	HypertagClass.prototype.unselectAll = function(unsetselection_flag){         
	    var items_selected = copy(this.selectedItems);

	    var obj;
	    while((obj = this.selectedItems.pop()))
	        obj._toggleSelected(false, false);

	    for(var i = 0; i < items_selected.length ; i ++)
	        fire(this, "__unselected__", items_selected[i]);

	    this._sendSelectionEventIfSingleElementSelected(undefined, unsetselection_flag);
	};

	//INTENT: select all the items on this hypertag (of list type)
	HypertagClass.prototype.selectAll = function(){         
	    /* we must unselect all first, before selecting again, 
	       to be semantically valid, i.e. we are actually unselecting 
	       and reselecting everything, not just selecting everything: */
	    this.unselectAll();

	    /* for each item we have, toggle its selection to true and 
	       add the item to the selected list */
	    for(var i = 0; i < this.items.length; i ++){
	        this.items[i]._toggleSelected(true, false);
	        this.items[i]._addItemToSelected();
	    }

	    /* if there is a __selected__ handler, fire it for each addition. 
	       __selected__ is also fired on the item, by  */
	    if(this.__selected__)
	        for(var i = 0 ; i < this.selectedItems.length ; i ++){
	            /* selecting and selected merely provide casuality. */
	            fire(this, "__selecting__", this.selectedItems[i]);
	            fire(this, "__selected__", this.selectedItems[i]);
	        }

	    this._sendSelectionEventIfSingleElementSelected();               
	};

	/* THIS one is on a hypertag - there is another on an item. You must pass a dict to match against when calling 
	   on a hypertag, obviously not if you call it directly on the item */
	/* cause the item matching the dictionary given to get selection */
	HypertagClass.prototype.selectItems = function(dict){
	    return this.findItems(dict, function(item){
	        item.select();
	    });
	};

	HypertagClass.prototype.setSelectionFor = function(dict){
	    return this.findItem(dict, function(item){
	        item.setSelection();
	    });
	};


	/* a container class for all methods dealing with selection, which will be merged into self
	   as required */
	Hypertag.Methods.Selecting = {
	    isSelectable:true
	};

	/* INTENT: select the item, fire the selection event */
	Hypertag.Methods.Selecting.select = function(unsetselection_flag){
	    if(this.isSelectable){
	    
	        if(this.itemlist.multiselectable === false)
	            this.itemlist.unselectAll();

	        this._addItemToSelected();
	        this._toggleSelected(true, undefined, unsetselection_flag);

	        /* selecting and selected merely provide casuality. */
	        fire(this.itemlist, "__selecting__", this);
	        fire(this.itemlist, "__selected__", this);
	    } 
	};

	/* INTENT: unselect the item, fire the selection event (on nothing of course) */
	Hypertag.Methods.Selecting.unselect = function(){
	    if(this.isSelectable){
	        if(this.selected){
	            this._removeFromSelected();
	            this._toggleSelected(false);
	            fire(this.itemlist, "__unselected__", this);
	        }
	    }
	};

	/* logically toggle the state of the item (_toggleSelected does this graphically as needed) */
	Hypertag.Methods.Selecting.toggleSelected = function(){
	    this.selected ? this.unselect() : this.select();
	};

	/* INTENT: cause only one element to be selected (and fires selection therefore) */
	/* the two falses in unselectAll() and select() here are the ENTIRE reason 
	   we have the 'unsetselection_flag' at all - it allows setSelection, IF unsetselection is
	   false on the hypertag, to skip sending the unselection event when changing from one selection
	   to another. this can be more efficient for patterns that reload-using-selection, where it would
	   serve no purpose in calling __unselection__ between any two consecutive selection events */
	Hypertag.Methods.Selecting.setSelection = function(){
	    if(this.isSelectable){
	        this.itemlist.unselectAll(false);
	        this.select(false);
	    }
	};

	//INTENT: this selects an item, but does so without firing a selection event. i.e. NO set() calls
	Hypertag.Methods.Selecting.uneventfulSelect = function(){
	    if(this.isSelectable){
	        this.selected = true;
	        this._addItemToSelected();

	        if(this.itemlist.selectedItems.length == 1){
	            this.itemlist.selectionindex = this.itemlist.indexOf(this);
	            this.itemlist.selection = this;
	        }else{
	            this.itemlist.selectionindex = -1;
	            this.itemlist.selection = false;
	        }

	        if(this.ELEMENT_NODE !== undefined){
	            var jitem = $(this);

	            if(this.itemlist.selectable[2])
	                jitem.removeClass(this.itemlist.selectable[2]);

	            jitem.addClass(this.itemlist.selectable[1]);
	        }
	    }
	};

	//INTENT: this selects an item, but does so without firing a selection event. i.e. NO set() calls
	Hypertag.Methods.Selecting.uneventfulSelection = function(){
	    if(this.isSelectable){
	        if(this.itemlist.selection && this.itemlist.selection.ELEMENT_NODE !== undefined){
	            var selection = this.itemlist.selection;
	            var jselection = $(this.itemlist.selection);

	            if(this.itemlist.selectable[2])
	                jselection.removeClass(this.itemlist.selectable[2]);

	            jselection.addClass(this.itemlist.selectable[1]);
	        }   

	        this.itemlist.unselectAll();
	        this.selected = true;
	        this._addItemToSelected();

	        this.itemlist.selectionindex = this.itemlist.indexOf(this);
	        this.itemlist.selection = this;

	        if(this.ELEMENT_NODE !== undefined){
	            var jitem = $(this);
	        
	            if(this.itemlist.selectable[2])
	                jitem.removeClass(this.itemlist.selectable[2]);
	            
	            jitem.addClass(this.itemlist.selectable[1]);
	        }   
	    }
	};

	Hypertag.Methods.Selecting._sortItemsByKey = function(items, key, direction){
	    var to_sort = [];
	    for(var i = 0; i < items.length ; i ++)
	        to_sort.push([items[i][key], items[i]]);

	    to_sort.sort();

	    var output = [];
	    for(var i = 0; i < to_sort.length ; i ++)
	        output.push(to_sort[i][1]);
	    
	    if(direction)
	        output.reverse();

	    return output;
	};

	Hypertag.Methods.Selecting._sortSelectedByIndex = function(a, b){
	    return a.itemlist.indexOf(a) > b.itemlist.indexOf(b);
	};

	//INTENT: add item to the selectedItems collection data-wise, not ui
	Hypertag.Methods.Selecting._addItemToSelected = function(){
	    if(this.itemlist.selectedItems.indexOf(this) === -1)
	        this.itemlist.selectedItems.push(this);
	};

	//INTENT: remove an item to the selected collection data-wise, not ui
	Hypertag.Methods.Selecting._removeFromSelected = function(){
	    var idx = this.itemlist.selectedItems.indexOf(this);
	    this.itemlist.selectedItems.remove(idx);
	    this.itemlist._sendSelectionEventIfSingleElementSelected();
	};

	//INTENT: grapgically toggle the state of selection (pass true or false or none to toggle), along
	//with evaluating selection status as things are selected/unselected.
	Hypertag.Methods.Selecting._toggleSelected = function(to, supress_selection_events, unsetselection_flag){
	    /* apply the requested select state or flip it */
	    this.selected = to !== undefined ? to : !this.selected;

	    var jitem = $(this);

	    if(this.ELEMENT_NODE !== undefined){
	        /* depending on the presence of the setting, change the css */
	        if(this.itemlist.selectable[1]){
	            if(this.selected){
	                this.itemlist.selectable[2] && jitem.removeClass(this.itemlist.selectable[2]);
	                jitem.removeClass(this.itemlist.selectable[0]);
	                jitem.addClass(this.itemlist.selectable[1]);
	            }
	            else{
	                jitem.removeClass(this.itemlist.selectable[1]);
	                this.itemlist.selectable[2] && jitem.addClass(this.itemlist.selectable[2]);    
	            }          
	        }
	    
	        this.itemlist._sendSelectionEventIfSingleElementSelected(undefined, unsetselection_flag);
	    }  
	};

	//evaluate list of selected and make item selection if one becomes selected.
	//issue unselection on the reverse condition, two getting selected.
	HypertagClass.prototype._sendSelectionEventIfSingleElementSelected = function(event, unsetselection_flag){            
	    /* if there is 1 selected item */
	    if(this.selectedItems.length == 1){
	        /* the only diff. between preselection and selection, as is the 
	           case with selecting and selected, is that one happens before
	           the other.  */
	       
	        var lastselection = this.selection;

	        set(this, "selectionindex", this.indexOf(this.selectedItems[0]));
	        set(this, "selection", this.selectedItems[0]);
	    
	        fire(this, '__preselection__', this.selectedItems[0], event, lastselection);
	        fire(this, '__selection__', this.selectedItems[0], event, lastselection);  
	    }

	    /* if there is not one selected item AND we have selection */
	    else if(this.selection){
	        set(this, "selectionindex", -1);
	        this.unselection = this.selection;
	        this.selection = false;
	    
	        /* if unsetselection is false and we are being called during an setSelection event, dont fire unselection. */
	        if(this.unsetselection === false && unsetselection_flag === false)
	            return;
	        
	        fire(this, '__unselection__', this.unselection, event);  
	    }
	};

	Hypertag.Methods.Clicking = {};

	//note this is a function called explicitly (it used to be a listen on send)
	//because we'd like __clickitem__ handlers to always run AFTER this, and before (of
	//course, since it used the event itself) that was not certain.
	Hypertag.Methods.Clicking._selectable_click_handler = function(what, event){
	    var list = what.itemlist;

	    if(!what || !list.mouseselectable)
	        return true;

	    /* if alt is down, toggle selection */
	    if(GLOBAL.isCommandPressed && list.multiselectable !== false){
	        if(list.unselectable){
	            what.toggleSelected();
	            list._sendSelectionEventIfSingleElementSelected();
	        }
	    }

	    else if(GLOBAL.isCommandPressed && list.multiselectable == false){
	        if(list.unselectable)
	            what.unselect();
	    }

	    /* THIS performs selecting a range on a multiselectable list */
	    else if(GLOBAL.isShiftPressed && list.multiselectable && list.linearselectable){
	        /* start evaluating where we clicked */
	        var i = list.items.indexOf(what);   

	        /* put all items to select here. we want to select them
	           from first to last, althogh we find them last to first. */
	        var to_select = [];

	        /* go backward accumulatng indexes to select until we reach
	           the first selected item, or the beginning of the list.  */
	        while(i >= 0 && list.items[i].selected !== true){
	            to_select.push(i);
	            -- i;
	        }

	        /* the reversal means we'll select it in the natural order. */
	        to_select.reverse();

	        /* select all the new items between 'what' and the first previously selected item */
	        for(var i = 0; i < to_select.length ; i ++)
	            if(!list.items[to_select[i]].selected)
	                list.items[to_select[i]].select();
	    }

	    /* finally if it's selected and toggleselect is true, unselect it, to support that option */
	    else if(list.toggleselect)
	        what.toggleSelected();

	    /* else it's not selected and set selection on it. */
	    else if(!what.selected || list.multiclickable === false || list.reselectable)
	        what.setSelection();

	    else if(list.keyselectable)
	        Hypertag.GUI.focus.setFocused(list);
	};

	//if alt is pressed, multiselectable it. otherwise select just it - unless it's already selected!
	Hypertag.Methods.Clicking._hypertagClick = function(event){
	    var item = this;

	    /* setting this to true will interrupt the __clickitem__ 
	    event that would have otherwise fired; they test this 
	    for that very reason, with a setTimeout call delayed 
	    Hypertag.Runtime.doubleClickDelay msecs */

	    //find out what the closest clickable thing is to the actual item that got clicked... was it us?
	    var scope = item.itemlist._determineClosestClickableHypertag(event);

	    if(scope === item || scope === item.itemlist){

	        setTimeout(function(){
	            if(item.itemlist.mouseselectable && item.isSelectable){
	                if(item.itemlist._selectable_click_handler)
	                    item.itemlist._selectable_click_handler(item, event);
	                fire(item.itemlist, '__clickitem__', item, event);
	            }
	        }, Hypertag.Runtime.doubleClickDelay);
	    
	        return false;
	    }

	    return true;
	};

	/* method to respond to a dblclick, working with state to cause singleclick setTimeout routines to stand down. */
	Hypertag.Methods.Clicking._hypertagDblclick = function(event){
	    /* setting this to true will interrupt the __clickitem__ 
	    event that would have otherwise fired; they test this 
	    for that very reason, with a setTimeout call delayed 
	    Hypertag.Runtime.doubleClickDelay msecs */

	    var list = this.itemlist;

	    if(list.mouseselectable && this.isSelectable){
	        fire(list, '__dblclickitem__', this, event);
	        return false;
	    }
	};

	/* this will only let a hypertag or hypertag item *closest* to the click target fire - 
	   a means for allowing clicks to drop through (to work with dragdrop) and yet only
	   have effect where intended */
	Hypertag.Methods.Clicking._determineClosestClickableHypertag = function(event){
	    //if we can find ourselves as the first hypertag ancestor of event.target, we are the one 
	    //to get the click.

	    var scope = event.target;
	    
	    /* while we go up the chain, return the first node that meets our conditions for being click-accessible */
	    while(scope){
	        if(scope.tagName){
	            var tagname = scope.tagName.toUpperCase();
	            /* if one of our parents (the target right off, usually, is an input, bail immediately.) */
	            if(tagname == "INPUT" || tagname == "SELECT" || tagname == "TEXTAREA")
	                return false;

	            /* or if we find it's the closest clickable tag */
	            else if(scope.itemlist && scope.itemlist.selectable && scope.itemlist.mouseselectable && scope.isSelectable)
	                return scope;
	        }
	        
	        /* else continue up the ladder */
	        scope = scope.parentNode;
	    }

	    return false;
	};

	///// -------------------------------------------
	///// START HYPERTAG DRAG AND DROP IMPLEMENTATION, appliable to a hypertag or hypertag child via
	///// drag and drop, dragItem and dropChild
	///// This was REALLY cool to write, as it's so much richer then other models i'd written
	///// (mostly cause event bubbling rocks...)
	///// -------------------------------------------

	/* the only real state is idle, dragging, and dropped,
	   but for purposes of UI response, it is preferred to 
	   listen and test Hypertag.Dragging.isDragging instead. */
	Hypertag.Dragging = {
	    state:'idle', 
	    isDragging:false,
	    cancel:function(){
	        HypertagDraggingClass.prototype.dragDropping(null, null);
	    }
	};

	///////////////////////////////////////////////////
	/// MAKE ELEMENT OR CHILD DRAGGABLE API
	///////////////////////////////////////////////////

	//INTENT: methods to add on an item to let it manage selection
	HypertagClass.prototype._drag = function(){      
	    var self = this;
	    //make the string a list as needed to reference info
	    if(typed(self.drag, String))
	        self.drag = stringToList(self.drag);
	};

	//INTENT: make a dragItem, i.e., one that responds to mousedown correctly
	HypertagClass.prototype._dragItem = function(item){          
	    //on mousedown look at state and issue events
	    $(item).mousedown(HypertagDraggingClass.prototype.dragItemMouseDown);
	};

	///////////////////////////////////////////////////
	/// MAKE ELEMENT OR CHILD DROPPABLE API
	///////////////////////////////////////////////////

	//INTENT: methods to register a hypertag as a dropzone for a type given by self.drop
	HypertagClass.prototype._drop = function(){
	    var self = this;

	    var dragmethods = HypertagDraggingClass.prototype;

	    $(self).mouseup(dragmethods.dropMouseUp);

	    //only apply element-level mouseup catchers if droponchild isn't true..
	    if(!self.droponchild || self.droponcontainer){
	        $(self).mouseenter(dragmethods.dropMouseOver);
	        $(self).mouseleave(dragmethods.dropMouseOut);
	    }
	};

	//INTENT: make a drop item, i.e. one that executes the parent's mouse up, with itself as the 
	//self.dropppedChild value.
	HypertagClass.prototype._dropChild = function(self){          
	    var dragmethods = HypertagDraggingClass.prototype;

	    $(self).mouseup(dragmethods.dropChildMouseUp);
	    $(self).mouseenter(dragmethods.dropChildMouseOver);
	    $(self).mouseleave(dragmethods.dropChildMouseOut);
	};

	///////////////////////////////////////////////////
	/// CANCEL DRAG DROP...
	///////////////////////////////////////////////////

	//INTENT: setup cancelling of dragdrop on esc.
	$(window).keyup(function(e){ 
	    if(e.keyCode == 27 && Hypertag.Dragging.state == "dragging")
	        //NOTE that passing null instead of false tells drag drop esc was pressed vs. just dropping somewhere invalid
	        HypertagDraggingClass.prototype.dragDropping(null, null);
	    return true;
	});

	///////////////////////////////////////////////////
	/// IMPLEMENTATION FOR LOGIC OF DRAG/DROP EVENTS: WHAT TO DO WHEN CLICK, DRAG, OR DROP DETECTED
	///////////////////////////////////////////////////

	GLOBAL.HypertagDraggingClass = function(){
	    return this;
	};

	//INTENT: what to do when a drag is detected and starting
	HypertagDraggingClass.prototype.dragDragging = function(event){
	    var Dragging = Hypertag.Dragging;

	    event.offsetX = (event.offsetX != null) ? event.offsetX : event.originalEvent.layerX;
	    event.offsetY = (event.offsetY != null) ? event.offsetY : event.originalEvent.layerY;

	    //notify machinery dragging has started
	    var results = fire(Dragging.tag, "__dragging__", Dragging._draggedItems, Dragging.tag.drag);

	    if(results === false){
	        Dragging.state = "idle";
	        return false;
	    }

	    Dragging.state = "dragging";
	    set(Dragging, 'isDragging', true);

	    Dragging.droppedchild = false;
	    Dragging.tag.isDragging = true;
	    Dragging.item.isDragging = true;

	    /* logic needed to set selection on a dragged object if options so direct */
	    if(Dragging.tag.selectondrag){
	        if(!Dragging.tag.multiselectable)
	            Dragging.item.setSelection();
	        else
	            Dragging.item.select();
	    }else if(!Dragging.item.selected){
	        Dragging.item.setSelection();
	    }   

	    //make a list of dataitems that is structured like items.data[i] to use
	    //if dragdataonly is true, so that if the source dies during the drag it 
	    //doesn't matter. that's a choice the dragger makes, not the droppee

	    Dragging._draggedItems = [];
	    for(var i = 0; i < Dragging.tag.selectedItems.length ; i ++)
	        Dragging._draggedItems.push({
	            data:copy(Dragging.tag.selectedItems[i].data),
	            item:Dragging.tag.selectedItems[i]
	        });

	    //store the original icon position so we can animate back to it if the drag is canceled.
	    Dragging.originalPosition = [event.pageX-event.offsetX, event.pageY-event.offsetY];

	    if(Dragging.tag.__manualdragging__ === undefined){
	        //either way (template or copy) we store them on this div for display    
	        Dragging.icon = EmptyDiv.cloneNode(true);

	        /* convert the drag into a list if it is not. having it here means
	           we can change it after we start, if we want
	         */
	        Dragging.tag.drag = stringToList(Dragging.tag.drag);

	        //do we make a custom drag template that gets the list of items from .data?
	        if(Dragging.tag.dragtemplate)
	            create(Dragging.icon, Dragging.tag.dragtemplate, {items:Dragging.tag.dataFromSelected()});

	        //or do we 'merely' copy the dom item into a list capped at 4 items that fade out to represennt a larger set..
	        else{
	            var offsetDirection = Dragging.tag.optimized && Dragging.tag.optimized[0] == 'height' ? "top" : "left";  
	            var dragicons_to_add = Dragging._draggedItems;
	            dragicons_to_add = dragicons_to_add.slice(0, Math.min(dragicons_to_add.length, 5));
	            for(var i = 0; i < dragicons_to_add.length ; i ++){
	                /* if it's a shadow_item use the inner_template (or template) of the name tag to make an item for it
	                   on the spot. by passing false as the first arg to createUnaddedItem, we just get the item back
	                   without adding it (until we're ready, below) */
	            
	                var idx = dragicons_to_add[i].item.data.i;

	                if(!dragicons_to_add[i].item.ELEMENT_NODE)
	                    Dragging.tag._hydrateOptimizedItem(offsetDirection, idx);

	                //else
	                var item = Dragging.tag.items[idx].cloneNode(true);
	            
	                /* now that we have an item, move it into position and fade it out */
	                var jitem = $(item);
	                Dragging.icon.appendChild(item);

	                jitem.css('position', 'relative').css("text-align", "left")
	                     .css('top', '0px')
	                     .css('left', '0px')
	                     .css('height', $(Dragging.item).height()+"px")
	                     .css('width', $(Dragging.item).width()+"px")
	                     .css('opacity', 0.8/(i+1));

	                if(Dragging.tag.selectable){                        
	                    jitem.removeClass(Dragging.tag.selectable[0]).removeClass(Dragging.tag.selectable[1]);
	                
	                    if(Dragging.tag.selectable[2])
	                        jitem.addClass(Dragging.tag.selectable[2]);
	                }   
	            }
	        }

	        //add attributes to the dragicon it needs to move, etc
	        var jdragicon = $(Dragging.icon);
	        jdragicon
	            .addClass('abs')
	            .css("top", event.pageY+1)
	            .css("left", event.pageX+1)
	            .css("font-size", "0.8em")
	            .css("z-index", 99999);
	            
	        jdragicon.appendTo(Hypertag.Body);
	    }

	    else{
	        for(var i = 0; i < Dragging._draggedItems.length ; i ++){
	            var item = Dragging._draggedItems[i].item;
	            item._baseX = $(item).left();
	            item._baseY = $(item).top();
	        }
	    }

	    var bodytop = Hypertag.$Body.offset().top;
	    var bodyleft = Hypertag.$Body.offset().left;

	    //when the body sees the mouse move, move the dragicon with it
	    $(document).mousemove(function(e){
	        //the +1 makes sure the template is out of the way of the elem to send events to the /other/ objs!
	    
	        if(Dragging.tag.__manualdragging__ === undefined)
	            jdragicon.css("top", e.pageY+11-bodytop).css("left", e.pageX+11-bodyleft);
	    
	        /* else they choose the manual drag option, and get a rel xy from the drag start point. */    
	        else{
	            var items_to_send = Dragging.tag.multiselectable !== false ? 
	                Dragging._draggedItems : Dragging._draggedItems[0];
	        
	            var dx = e.pageX-Dragging.baseX, dy = e.pageY-Dragging.baseY;
	            fire(Dragging.tag, '__manualdragging__', items_to_send, dx, dy);
	        }
	        
	        return true;
	    });

	    //notify everyone dragging has started (state will be dragging)
	    send(Hypertag, "Dragging");
	};


	//what to do, when drop occurs: remove drag template and issue dropped on 
	//anything that is dropped...
	HypertagDraggingClass.prototype.dragDropping = function(target, event){
	    /* this is a chrome/firefox compatible way to get offsetX/offsetY */
	    if(event){
	        event.offsetX = (event.offsetX != null && !event.originalEvent) ? event.offsetX : event.originalEvent.layerX;
	        event.offsetY = (event.offsetY != null && !event.originalEvent) ? event.offsetY : event.originalEvent.layerY;
	    }

	    var Dragging = Hypertag.Dragging;
	    var dragmethods = HypertagDraggingClass.prototype;

	    //indicate we are no longer waiting (for purposes of setTimeout, above)
	    Dragging.state = "idle";
	    set(Dragging, 'isDragging', false);
	    Dragging.item.isDragging = false;
	    Dragging.tag.isDragging = false;

	    //stop looking for the mouse to move
	    $(document).unbind("mousemove");

	    //if we are manually dragging and manuallydropped ret false, then stop
	    //NOTE: if target === null then we know ESC was pressed and manuallydropped doesn't apply
	    if(Dragging.tag.__manualdragging__){
	        target === null ?
	            Dragging.tag.fire("__manuallyaborted__", event) :
	            Dragging.tag.fire("__manuallydropped__", target, event);
	        
	        return false;
	    }

	    //if there is no droptarget, we are being told to cancel drag drop - so don't just remove icon,
	    //animate to original xy THEN erase it
	    if(!target){
	    
	        if(Dragging.originalPosition){
	        
	            animate(Dragging.icon, {
	                top:Dragging.originalPosition[1], left:Dragging.originalPosition[0]
	            }, {duration:Hypertag.GUI.duration});
	        
	            setTimeout(dragmethods.removeDragItems, Hypertag.GUI.duration+1);
	        }
	    }

	    //if the drop was valid, issue events to get response; DONT do it if the dragitem is same as DroppedChild  or dragitem same as target!
	    else{                
	        HypertagDraggingClass.prototype.removeDragItems();
	        
	        //if the element has been killed in the meantime - provide ONLY the data on a new object structured the same way
	        var draggedItems = [];
	        if(Dragging.tag.data !== null)
	            for(var i = 0; i < Dragging._draggedItems.length ; i ++)
	                draggedItems.push(Dragging._draggedItems[i].item);
	            
	    
	        //otherwise the source of the drag is dead so give them what we originally made -- a copy of the data. we cant know if we need the copy until now the other tag can be collected now
	        else
	            draggedItems = Dragging._draggedItems;
	        
	        //notify machinery dropping is occuring
	        if(Dragging.tag.fire("__dropping__", draggedItems, target, event) !== false){

	            //if we drop on children, send child we dropped on and after flag (for last half of last item , paste after)
	            if(target.droponchild && Dragging.droppedchild){
	                //ONLY set afterFlag to true if they dropped on the second half of the last item!
	                var afterFlag = false;;

	                //if no children, put it after in all cases
	                if(target.childNodes.length === 0)
	                    afterFlag = true;

	                //else if the droppedchild is the last child on it's parent
	                else if(target.items.indexOf(Dragging.droppedchild) == target.items.length-1)
	                    afterFlag = true;

	                //finally, if droppedchild is false, users of the system should append items received to the list    
	                var droppedchild = afterFlag ? false : Dragging.droppedchild;

	                //tell the machinery about the drop, with a DroppedChild, and afterFlag (if hypertag.droppedChildren is true...)
	                target.fire("__drop__", draggedItems, droppedchild, Dragging.tag.drag, Dragging.tag, event);
	                target.fire("__dropped__", draggedItems, droppedchild, Dragging.tag.drag, Dragging.tag, event);
	            }

	            //otherwise dropping on the hypertag, need only the item and droptype
	            else{
	                if(target.droponcontainer){
	                    target.fire("__drop__", draggedItems, target, Dragging.tag.drag, Dragging.tag, event);
	                    target.fire("__dropped__", draggedItems, target, Dragging.tag.drag, Dragging.tag, event);
	                }
	                
	                else{
	                    target.fire("__drop__", draggedItems, Dragging.tag.drag, Dragging.tag, event);
	                    target.fire("__dropped__", draggedItems, Dragging.tag.drag, Dragging.tag, event);
	                }   
	            }
	        
	            //send a final event on the drop origin to note that the drop operation is complete
	            Dragging.tag.fire("__droppingdone__", draggedItems, target, event);
	        }
	    }

	    //get rid of any _draggedItems stored on the tag
	    Dragging._draggedItems = null;

	    //notify everyone dragging has stopped (state will be idle)
	    send(Hypertag, "Dragging");

	    return false;
	};

	//INTENT: remove all children -- if they are templates use their remove(), not jquery's
	HypertagDraggingClass.prototype.removeDragItems = function(){
	    var Dragging = Hypertag.Dragging;

	    //do we remove a hypertag or a copy of the list item?
	    var children = $.makeArray($(Dragging.icon).children());
	    if(Dragging.tag.dragtemplate)
	        for(var i = 0; i < children.length ; i ++)
	            children[i].remove();
	        
	    else
	        for(var i = 0; i < children.length ; i ++)
	            $(children[i]).remove();
	};

	///////////////////////////////////////////////////
	/// DRAGGABLE CHILDREN
	///////////////////////////////////////////////////

	HypertagDraggingClass.prototype._nonDraggableTargetTypes = ['input', 'textarea', 'select'];

	//INTENT: what to do when mouse downing on a drag Item
	HypertagDraggingClass.prototype.dragItemMouseDown = function(event){
	    //if not primary click (i.e. right click), dont catch it
	    //if we are not selectable as a custom override (isSelectable), dont catch it
	    //VERY IMPORTANT, if the target of the event is a input, textarea, select, etc, let it fall through.
	    if((event.which != 1 || event.which === undefined) || !this.isSelectable)
	        return true;
	    
	    var tagname = event.target.tagName.toLowerCase();
	    if(tagname == 'input' || tagname == 'textarea' || tagname == 'select')
	        return true;
	    
	    var item = this;
	    var Dragging = Hypertag.Dragging;
	    var dragmethods = HypertagDraggingClass.prototype;

	    //if we are not idle, we are still waiting for another event to resolve; reject.
	    if(Dragging.state != "idle")
	        return true;

	    Dragging.state = "waiting";    
	    Dragging.item = item;
	    Dragging.tag = item.itemlist;
	    Dragging.baseX = event.pageX;
	    Dragging.baseY = event.pageY;

	    dragmethods.dragDragging(event);

	    return false;
	};

	///////////////////////////////////////////////////
	/// DROPPABLE HYPERTAG
	///////////////////////////////////////////////////

	HypertagDraggingClass.prototype.dropMouseUp = function(event, list){  
	    event.offsetX = (event.offsetX != null || !event.originalEvent) ? event.offsetX : event.originalEvent.layerX;
	    event.offsetY = (event.offsetY != null || !event.originalEvent) ? event.offsetY : event.originalEvent.layerY;

	    /* note that dropMouseUp may be called directly by dropChildMouseUp so that 
	       event bubbling (as was originally done) is not required. in that case, the 2nd
	       arg will be the list the child dropped on belongs to, and so if present we set self to
	       it (this would be the list to, if the dropChildMouseUp event didn't get it first) */
	    var self = list || this;

	    var Dragging = Hypertag.Dragging;
	    /* WHY make an instance of the class, IN the class? because the execution environment of this method 
	       will be the item we are mouse upping on... NOT the original class! the class method is done for
	       speed and exception resilience. */
	    var dragmethods = HypertagDraggingClass.prototype;

	    //if we WERE drug over some hypertag and there is a dragout method left to call
	    if(Dragging.drugOver){
	        if(self.__dragout__)
	            self.__dragout__(Dragging.drugOver);
	        Dragging.drugOver = false;
	    }

	    //if we WERE drug over some child and there is a dragout method left to call
	    if(Dragging.drugOverChild){
	        if(Dragging.drugOverChild.itemlist && Dragging.drugOverChild.itemlist.__dragout__)
	            Dragging.drugOverChild.itemlist.__dragout__(Dragging.drugOverChild);
	        Dragging.drugOverChild = false;
	    }
	    
	    if(!Dragging.tag || !Dragging.item || Dragging.state == 'idle')
	        return true;
	    
	    else if(Dragging.item && Dragging.state != "dragging"){
	        Dragging.state = "idle";
	        return false;
	    }
	    
	    else if(Dragging.state == "dragging"){
	        if(HypertagDraggingClass.prototype.isDragAccepted(self)){
	            dragmethods.dragDropping(self, event);   
	            return false;
	        }
	        
	        else
	            dragmethods.dragDropping(false, false);   
	    }   

	    return true;
	};

	HypertagDraggingClass.prototype.isDragAccepted = function(self){
	    var Dragging = Hypertag.Dragging;

	    /* if we can't drop on others, and we're trying to, cancel the drag by passing false, false to dragDropping */
	    if(Dragging.tag.droponothers === false && self !== Dragging.tag){
	        return false;
	    }

	    /* if dropping on container and droponself not allowed, reject */
	    else if(!Dragging.tag.droponself && self == Dragging.tag){
	        return false;
	    }   

	    //if droponchild reject dropping onto the thing dragging);
	    else if(self.droponchild && !self.droponcontainer){
	        //reset if no DroppedChild, we are not droponself but on the drag item or ourselves
	        if(!Dragging.droppedchild || Dragging.tag.droponself !== true && self.isDragging || Dragging.droppedchild.isDragging){
	            return false;
	        }    
	    }
	    
	    //if not droponchild reject dropping onto a dragging element
	    else if(self.isDragging && Dragging.tag.droponself !== true && Dragging.tag.droponcontainer !== true){
	        return false;
	    }

	    //otherwise it's valid, but of the right type?
	    if(self.drop.length && self.drop.intersect(Dragging.tag.drag) || self.drop == '*'){
	        /* if dropping on both, we'll make the signature look like the one for children, with the child set to self */ 
	        return true;
	    }

	    return false;
	}

	//INTENT: what to do when over a drop hypertag
	HypertagDraggingClass.prototype.dropMouseOver = function(e){
	    var self = this;
	    var Dragging = Hypertag.Dragging;

	    //show over only if we are dragging...
	    if(Dragging.state == "dragging"){
	        if(HypertagDraggingClass.prototype.isDragAccepted(self)){
	            if(self.__dragover__)
	                self.__dragover__(self)
	            Dragging.drugOver = self;
	            return false;
	        }
	    }   

	    return true;
	};

	//INTENT: what to do when moving out of a drop hypertag
	HypertagDraggingClass.prototype.dropMouseOut = function(e){
	    var self = this;
	    var Dragging = Hypertag.Dragging;

	    if(Dragging.drugOver){
	        if(self.__dragout__)
	            self.__dragout__(Dragging.drugOver);
	        Dragging.drugOver = false;
	        return false;
	    }

	    return true;
	};

	///////////////////////////////////////////////////
	/// DROPPABLE CHILDREN
	///////////////////////////////////////////////////

	/* what to do when a child has mouse up during drag (droponchild has to be true) */
	HypertagDraggingClass.prototype.dropChildMouseUp = function(e){
	    var self = this;
	    var Dragging = Hypertag.Dragging;

	    var dragmethods = HypertagDraggingClass.prototype;

	    if(Dragging.state != "dragging" && Dragging.item){
	        Dragging.state = "idle";
	        return false;
	    }

	    if(Dragging.drugOverChild && Dragging.drugOverChild.itemlist && Dragging.drugOverChild.itemlist.__dragout__)
	        Dragging.drugOverChild.itemlist.__dragout__(Dragging.drugOverChild);
	        
	    if(Dragging.drugOver && Dragging.drugOver.itemlist){
	        if(Dragging.drugOver.itemlist.__dragout__)
	            Dragging.drugOver.itemlist.__dragout__(Dragging.drugOver);
	        Dragging.drugOver = false;
	    }
	    
	    Dragging.droppedchild = self;

	    /* note that we changed the pattern to call dropMouseUp up directly, before it was done via bubbling. i find 
	       this more reliable (and compreshensible - it is dropMouseUp, always attached to the list and not child,
	       that actually does comparisons for matching and drop logic) */
	    return dragmethods.dropMouseUp(e, self.itemlist);
	};

	/* what to do when a child is moused over during drag (droponchild has to be true) */
	HypertagDraggingClass.prototype.dropChildMouseOver = function(){
	    var self = this;
	    var Dragging = Hypertag.Dragging;

	    if(!Dragging.tag)
	        return true;

	    //mouse over only if drag ongoing, we're not already drug over, we are self-drop, or not self drop and not over ourselves.
	    if(Dragging.state == "dragging")

	        //but only if it's the right type...
	        if(self.itemlist.drop && self.itemlist.drop.intersect(Dragging.tag.drag)){
	        
	            // and if it's not selected (or the hypertag we're dropping on is different then the drag one), 
	            //and we haven't called dragover on it twice, and if container-selfdropping is allowed, and if dropontothers is false,
	            //the call the dragover method on the child. 
	            if( (!self.selected || (self.itemlist != Dragging.tag)) && 
	                (Dragging.tag.droponself !== true || self.isDragging !== true) && 
	                (Dragging.tag.droponself === true || self.itemlist.isDragging !== true) && 
	                (Dragging.tag.droponothers !== false || self.itemlist === Dragging.tag)){
	                
	                /* fire the drag over event passing the child we're over  */
	                fire(self.itemlist, '__dragover__', self);
	                Dragging.drugOverChild = self;
	                return false;
	            }
	        }

	    return true;
	};

	/* what to do when a child is moused out from, during drag (droponchild has to be true) */
	HypertagDraggingClass.prototype.dropChildMouseOut = function(){
	    var self = this;
	    var Dragging = Hypertag.Dragging;

	    if(Dragging.drugOverChild){
	        fire(self.itemlist, '__dragout__', Dragging.drugOverChild);
	        Dragging.drugOverChild = false;
	        return false;
	    }
	    return true;
	};

	/* this will first remove all hitches made, then, using the saved text of all hitches initially present (stored in
	   self._hitchestext), we'll reevaluate all hitches. this is very useful when removing and re appending a child
	   somewhere - they can continue to respond to dimnesionally hitchs  */
	HypertagClass.prototype.rehitch = function(){
	    var element = this;

	    if(element._hitchBindings.release)
	        element._hitchBindings.release();

	    //returns a triplet of references found by looking upward. central to the model.
	    var references = element._resolveParentReferences();

	    //The 'parentview' attr works by finding the first tag with a .isHypertag attribute 
	    //above this tag (one of the reasons the attribute is there)
	    //we also alias it with parent. there is no .parent in the W3C dom (it's .parentNode) so this is legit.
	    element.parentview = element.parent = references[0];

	    //The root is analogous to a top of some hypertag defintion/instance. when you make a 
	    //hypertag, it must have a name. anonymous views inside it have have no template attribute
	    //so if we go up to the first tag with a template attribute we can skip upwards effectively.
	    //we also alias it with root. it comes up a lot.
	    element.root = element.root = references[1]

	    //The 'itemroot' works by finding the first node above it with an .itemlist attribute
	    //and lets us skip to the 'top' of an item made by a hypertag list
	    element.itemroot = references[2];

	    element.directory = references[3];

	    copy(element.scanAttributes(element._hitchestext, element, true, true), element);

	    /* and perform any hitches that have scheduled themselves to be run on init just as it's done in the base system */
	    setTimeout(function(){
	        element._performAutohitches();
	    });

	};

	/* just a convienence; balances rehitch */
	HypertagClass.prototype.unhitch = function(){
	    var element = this;

	    if(element._hitchBindings.release)
	        element._hitchBindings.release();
	};

	//INTENT: given a dictionary, if any key of the dict starts and ends with %{ and }, or %%{} in the case of hitches,
	//so as to listen to a given attribute and do something when that attribute is changed 
	HypertagClass.prototype.scanAttributes = function(incoming_dict, context, process_hitches, forceReloadOfHitches, promoteDelegateTextToFunction){
	    var output = {};

	    for(var key in incoming_dict){
	        try{
	    
	            /* if an attribute starts with an '$', then we should apply it as a trait, after reassigning the value w/out the '@' sign */
	            if(key.slice(-1) == '$'){
	                context._traitsFromProperties.push(key.slice(0,-1));
	                output[key] = incoming_dict[key];
	            }
	        
	            /* if an attribute is prefaced with a double-dollar sign, record the fact. before __load__
	               we'll treat the value as a jquery selector, or returning the raw object if $$ was used. */
	            else if(!context.initialized && key[0] == '$'){
	                context._selectorsToResolve[key] = [context[key], key[1] == '$'];
	                output[key] = incoming_dict[key];
	            }
	        
	            /* make a function out of the statement they gave and set the 
	               attr to the result of running it now - we'll control context, passing in 'self' for convienence! */
	            else if(incoming_dict[key].slice(0, 2) == '%{' && incoming_dict[key].slice(-1) == "}"){
	                var attr_text = incoming_dict[key].slice(2, -1);
	            
	                try{
	                    eval("output[key] = function(self){return "+attr_text+";}");
	                    output[key] = output[key].call(context, context);
	                }catch(err){
	                    err.message = "\nIn the context of the code:\n\n"+attr_text+"\n\n...\n\n"+err.message;
	                    throw err;
	                }
	            
	                /* save the string. if we want to reapply hitches, we have but to call _hitchBindings.release(), reassign these to the keys they were on,
	                   then process those with self.scanAttributes again. viola. */
	                context._hitchestext[key] = String(incoming_dict[key]);
	            }
	    
	            //if it's got the magic %%{..} at beginning and end of string...
	            else if(process_hitches !== false && incoming_dict[key].slice(0, 3) == '%%{' && incoming_dict[key].slice(-1) == "}"){                    
	        
	                /* i should reset these - as i found out, a otherwise empty var statement does NOT re-initialize the pointer if it's already been created in a previous loop! */
	                var hitch = undefined, 
	                    hitch_parts = undefined, 
	                    hitch_target_parts = undefined, 
	                    hitch_delay_function = undefined,
	                    hitch_targets = undefined, 
	                    hitch_conditional_segments = undefined, 
	                    first_hitch_target = undefined, 
	                    first_hitch_attr = undefined,
	                    hitch_conditional_target = undefined, 
	                    hitch_conditional_attr = undefined, 
	                    hitch_conditional_or = undefined;
	    
	                var autohitch_flag = false;
	        
	                /* we only evaluate hitches on first load. */
	                if(context.initialized && forceReloadOfHitches === undefined)
	                    continue;
	            
	                /* save the string. if we want to reapply hitches, we have but to call _hitchBindings.release(), reassign these to the keys they were on,
	                   then process those with self.scanAttributes again. viola. */
	                context._hitchestext[key] = String(incoming_dict[key]);
	        
	                /* this the text of the entire hitch including all parts. */
	                var attr_text = incoming_dict[key].slice(3, -1).trim();
	        
	                /* if it starts with a '!' record that this hitch should be auto-hitched, that is, synced on create. note
	                   that width, height, top, left, opacity do this automatically in the normal setup */
	                if(attr_text[0] == "!"){
	                    autohitch_flag = true;
	                    attr_text = attr_text.slice(1);
	                }
	        
	                /* hitch_parts consists of each ;; part, where the order indicates what does what (1st part is target, 2nd what to do, 3rd default value, 4th is function to run at start whose value is ignored) */
	                hitch_conditional_segments = attr_text.split("::");
	        
	                if(hitch_conditional_segments[1]){
	                    try{
	                        eval("hitch_conditional_or = function(self, value){return "+hitch_conditional_segments[1]+";};");
	                    }catch(err){
	                        err.message = "\nIn the context of the code:\n\n"+hitch_conditional_segments[1]+"\n\n...\n\n"+err.message;
	                        throw err;
	                    }
	                }
	                
	                hitch_parts = hitch_conditional_segments[0].split(";;");
	                hitch_target_parts = hitch_parts[0].split('??');
	            
	                //if a delay is given, record it
	                hitch_delay_value_parts = hitch_target_parts[0].split("...");
	                if(hitch_delay_value_parts.length > 1){
	                    hitch_target_parts[0] = hitch_delay_value_parts.slice(1).join("");
	                
	                    var hitch_delay_text = hitch_delay_value_parts[0];
	                
	                    /* turn the delay object string into the actual object  */ 
	                    var get_obj_reference;
	                    try{
	                        eval("hitch_delay_function = function(self){return "+hitch_delay_text+";}");
	                    }catch(err){
	                        err.message = "\nIn the context of the code, when evaluating hitch delay function:\n\n"+hitch_delay_text+"\n\n...\n\n"+err.message;
	                        throw err;
	                    }
	                }                
	        
	                /* determine if the hitch has a conditional which we will record and act on if present, below */
	                if(hitch_target_parts.length > 1){
	                    var hitch_conditional_pair = hitch_target_parts[0].trim().split('.');
	            
	                    hitch_conditional_target = hitch_conditional_pair.slice(0, -1).join(".");
	                    hitch_conditional_attr = hitch_conditional_pair.slice(-1)[0];
	            
	                    /* turn the condition object string into the actual object  */ 
	                    var get_obj_reference;
	                    try{
	                        eval("get_obj_reference = function(self){return "+hitch_conditional_target+";}");
	                        hitch_conditional_target = get_obj_reference.call(context, context);
	                    }catch(err){
	                        err.message = "\nIn the context of the code:\n\n"+hitch_conditional_target+"\n\n...\n\n"+err.message;
	                        throw err;
	                    }
	                
	                    /* the hitch targets are on the other side of the ? */
	                    hitch_targets = stringToList(hitch_target_parts[1].trim());
	                }
	        
	                /* or there was no conditional the entire 1st part is targets */
	                else
	                    hitch_targets = stringToList(hitch_target_parts[0].trim());
	                
	            
	                //if there is no preexisting delay function and we have targets, find the target with autoanimated
	                //and the largest autospeed (or the default Hypertag.GUI.duration, whichever is greater) and use it 
	                //as the delay, automatically. experimentally, this should let animations naturally cascade to resolve
	                //into a perfect state everytime.
	                if(!hitch_delay_function && hitch_targets.length){
	                    var maxtime = 0;
	                
	                    for(var i = 0; i < hitch_targets.length ; i ++){    
	                        var obj = hitch_targets[i].split(".").slice(0, -1).join(".");
	                        var attr = hitch_targets[i].split(".").slice(-1)[0];
	                    
	                        /* turn the condition object string into the actual object  */ 
	                        var get_obj_reference;
	                        var obj_reference;
	                        try{
	                            eval("get_obj_reference = function(self){return "+obj+";}");
	                            obj_reference = get_obj_reference.call(context, context);
	                        }catch(err){
	                            err.message = "\nIn the context of the maxtime code:\n\n"+hitch_targets[i]+"\n\n...\n\n"+err.message;
	                            throw err;
	                        }

	                        if(obj_reference && obj_reference.autoanimated && (obj_reference.autoanimated[attr] || obj_reference.autoanimated === true || obj_reference.autoanimated.toLowerCase() == 'true' ))
	                            maxtime = Math.max(maxtime, obj_reference.autoduration || Hypertag.GUI.duration/2);
	                    }
	                    
	                    //if a time was found
	                    if(maxtime > 0){
	                        /* turn the delay object string into the actual object  */ 
	                        var get_obj_reference;
	                        try{
	                            eval("hitch_delay_function = function(self){return "+maxtime+";}");
	                        }catch(err){
	                            err.message = "\nIn the context of the code, when evaluating hitch delay function:\n\n"+maxtime+"\n\n...\n\n"+err.message;
	                            throw err;
	                        }
	                    }
	                }     
	            
	                /* WE WILL resolve the first target as the "value" to pass to the method. if there is more than one hitch,
	                   they will all get passed this value. This makes hitches invariant under listens, that is, no matter 
	                   who sets the hitch up to listen to what, 'value' will always be the same thing - the first target.
	                   if you are using more than one target, use their full names if you want the value of more than the first target.
	                   this works really well for conditionals that, since they listen to the conditional object/attr pair, would
	                   otherwise pass that value in, when we meant the value of the first target.  */
	                   /* the target (i.e. 'self.x.y.z') needs to be split into obj text ('self.x.y') and attr (index of last '.' to end is attr, i.e. 'z') */
	                if(hitch_targets.length){
	                    var target_parts = hitch_targets[0].split(".");
	                    var objname = target_parts.slice(0, -1).join(".");
	                    first_hitch_attr = target_parts.slice(-1)[0];

	                    var get_obj_reference;
	                    try{
	                        eval("get_obj_reference = function(self){return "+objname+";}");
	                        first_hitch_target = get_obj_reference.call(context, context);
	                    }catch(err){
	                        err.message = "\nIn the context of the code:\n\n"+objname+"\n\n...\n\n"+err.message;
	                        throw err;
	                    }
	                }
	        
	                /* hitch with ONE part - set attr to value of whatever we're listening to */
	                if(hitch_parts.length === 1){
	            
	                    /* if there is a condition make a hitch with the condition in the closure */
	                    if(hitch_conditional_target){
	                        hitch = function(self, key, first_hitch_target, first_hitch_attr, hitch_conditional_target, hitch_conditional_attr, hitch_conditional_or, hitch_delay_function){
	                            return function(){
	                                if(hitch_delay_function){
	                                    setTimeout(function(){
	                                        if(hitch_conditional_target[hitch_conditional_attr])
	                                            set(self, key, first_hitch_target[first_hitch_attr])
	                                        else if(hitch_conditional_or)
	                                            set(self, key, hitch_conditional_or.call(self, self, first_hitch_target[first_hitch_attr]));
	                                    }, hitch_delay_function.call(context, context));
	                                }
	                            
	                                else{
	                                    if(hitch_conditional_target[hitch_conditional_attr])
	                                        set(self, key, first_hitch_target[first_hitch_attr])
	                                    else if(hitch_conditional_or)
	                                        set(self, key, hitch_conditional_or.call(self, self, first_hitch_target[first_hitch_attr]));
	                                }
	                            }
	                        }(context, key, first_hitch_target, first_hitch_attr, hitch_conditional_target, hitch_conditional_attr, hitch_conditional_or, hitch_delay_function);
	                    }
	            
	                    /* else just make the simplest possbile hitch, that of setting the local attr to the value of the target.
	                       note we dont pass in the first_hitch_attr and target since only a single listen - on the actual target
	                       is generated (conditional would be a second meta-target, and make value eq. true, etc.. when we meant 
	                       the value, but that is only for hitches with conditionals.) */
	                    else{
	                        hitch = function(self, key, hitch_delay_function){
	                            return function(value){
	                            
	                                if(hitch_delay_function){
	                                    setTimeout(function(){
	                                        set(self, key, value);
	                                    }, hitch_delay_function.call(self, self));
	                                }
	                            
	                                else
	                                    set(self, key, value);
	                            }
	                        }(context, key, hitch_delay_function);
	                    }
	                }
	        
	                /* hitch with TWO parts - listen to part 1 (self.x.y.z for listening to 'z' on self.x.y) and run part 2 (any expression) whose return result is set on self via the attr name */
	                else{
	                    /* get the expression to run (and return a value for when the obj/attr combo is set) */
	                    var codeblock = hitch_parts[1].trim();

	                    if(codeblock){
	                        /* get rid of any trailing ; if the user puts it there as a nicety */
	                        if(codeblock.slice(-1) == ";")
	                            codeblock = codeblock.slice(0, -1)

	                        /* IF there is a target, we set the local variable. */
	                        if(hitch_targets.length){
	                    
	                            /* if there is a conditional include it in the hitch */
	                            if(hitch_conditional_target){
	                                var custom_function;
	                                try{
	                                    eval("custom_function = function(self, value, target){return "+codeblock+";}");
	                                }catch(err){
	                                    err.message = "\nIn the context of the code:\n\n"+codeblock+"\n\n...\n\n"+err.message;
	                                    throw err;
	                                }
	                            
	                                hitch = function(self, key, custom_function, first_hitch_target, first_hitch_attr, hitch_conditional_target, hitch_conditional_attr, hitch_conditional_or, hitch_delay_function){
	                                    return function(){
	                                        if(hitch_delay_function){
	                                            setTimeout(function(){
	                                                if(hitch_conditional_target[hitch_conditional_attr])
	                                                    set(self, key, custom_function.call(self, self, first_hitch_target[first_hitch_attr], first_hitch_target));

	                                                else if(hitch_conditional_or)
	                                                    set(self, key, hitch_conditional_or.call(self, self, first_hitch_target[first_hitch_attr], first_hitch_target));
	                                            }, hitch_delay_function.call(self, self));
	                                        }
	                                    
	                                        else{
	                                            if(hitch_conditional_target[hitch_conditional_attr])
	                                                set(self, key, custom_function.call(self, self, first_hitch_target[first_hitch_attr], first_hitch_target));

	                                            else if(hitch_conditional_or)
	                                                set(self, key, hitch_conditional_or.call(self, self, first_hitch_target[first_hitch_attr], first_hitch_target));
	                                        }
	                                    }
	                                }(context, key, custom_function, first_hitch_target, first_hitch_attr, hitch_conditional_target, hitch_conditional_attr, hitch_conditional_or, hitch_delay_function);
	                            }
	                    
	                            /* if there isn't, dont. */
	                            else{
	                                var custom_function;
	                                try{
	                                    eval("custom_function = function(self, value, target){return "+codeblock+";}");
	                                }catch(err){
	                                    err.message = "\nIn the context of the code:\n\n"+codeblock+"\n\n...\n\n"+err.message;
	                                    throw err;
	                                }
	                            
	                                hitch = function(self, key, custom_function, first_hitch_target, first_hitch_attr, hitch_delay_function){
	                                    return function(){
	                                        if(hitch_delay_function){
	                                            setTimeout(function(){
	                                                return set(self, key, custom_function.call(self, self, first_hitch_target[first_hitch_attr], first_hitch_target));
	                                            }, hitch_delay_function.call(self, self));
	                                        }
	                                    
	                                        else
	                                            return set(self, key, custom_function.call(self, self, first_hitch_target[first_hitch_attr], first_hitch_target));
	                                    }
	                                }(context, key, custom_function, first_hitch_target, first_hitch_attr, hitch_delay_function);
	                            }
	                        }

	                        /* if there is NO target, we merely run the code! */
	                        else{
	                            var custom_function;
	                            try{
	                                eval("custom_function = function(self, value){"+codeblock+";}");
	                            }catch(err){
	                                err.message = "\nIn the context of the code:\n\n"+codeblock+"\n\n...\n\n"+err.message;
	                                throw err;
	                            }
	                        
	                            if(hitch_conditional_target){
	                                hitch = function(self, key, custom_function, hitch_conditional_target, hitch_conditional_attr, hitch_conditional_or, hitch_delay_function){
	                                    return function(value){
	                                        if(hitch_delay_function){
	                                            setTimeout(function(){
	                                                if(hitch_conditional_target[hitch_conditional_attr])
	                                                    custom_function.call(self, self, value);
	                                                else if(hitch_conditional_or)
	                                                    set(self, key, hitch_conditional_or.call(self, self, value));
	                                            }, hitch_delay_function.call(self, self));
	                                        }

	                                        else
	                                            if(hitch_conditional_target[hitch_conditional_attr])
	                                                custom_function.call(self, self, value);
	                                            else if(hitch_conditional_or)
	                                                set(self, key, hitch_conditional_or.call(self, self, value));
	                                    }
	                                }(context, key, custom_function, hitch_conditional_target, hitch_conditional_attr, hitch_conditional_or, hitch_delay_function);
	                            }
	                            else{
	                                hitch = function(self, key, custom_function, hitch_delay_function){
	                                    return function(value){
	                                        if(hitch_delay_function){
	                                            setTimeout(function(){
	                                                custom_function.call(self, self, value);
	                                            }, hitch_delay_function.call(self, self));
	                                        }

	                                        else
	                                            custom_function.call(self, self, value);
	                                    }
	                                }(context, key, custom_function, hitch_delay_function);
	                            }
	                        }
	                    }
	                }
	        
	                /* the actual listen call we'll need to use - note we use context arg to make this = self 
	                   we do NOT use context.listen because any hitch is permenant for the life    */
	                if(!context._hitchBindings)
	                    context._hitchBindings = {};

	                /* if there are NO targets, make one false one - interior
	                   to the loop parts will be skipped that require it, 
	                   but  */
	                if(hitch_targets.length === 0)
	                    hitch_targets.push(false);
	        
	                for(var i = 0; i < hitch_targets.length ; i ++){
	                    var obj, attr;

	                    /* if there is a target */
	                    if(hitch_targets[i]){
	                        /* the target (i.e. 'self.x.y.z') needs to be split into obj text ('self.x.y') and attr (index of last '.' to end is attr, i.e. 'z') */
	                        var target_parts = hitch_targets[i].split(".");
	                        var objname = target_parts.slice(0,-1).join(".");
	                        attr = target_parts.slice(-1)[0];

	                        var get_obj_reference;
	                        try{
	                            eval("get_obj_reference = function(self){return "+objname+";}");
	                            obj = get_obj_reference.call(context, context);
	                        }catch(err){
	                            err.message = "\nIn the context of the code:\n\n"+objname+"\n\n...\n\n"+err.message;
	                            throw err;
	                        }
	                
	                        /* add this as something we should fetch when the hypertag is inited - the two qualification are being in attributes_to_autohitch and this hitch having a target */
	                        if(autohitch_flag || Hypertag.Runtime.attributes_to_autohitch[key])
	                            context._autohitches.pushUniquely([obj, attr, hitch, String(incoming_dict[key])]);
	                
	                        /* remove the hitch text which will be set to the right value when the event fires */
	                        output[key] = undefined;
	                    }

	                    /* otherwise we just use the context as the obj (no setting of the var will occur, just running a method, see below). */
	                    else{
	                        obj = context;
	                        attr = key;
	                    }
	            
	                    /* crucial point: we set up _hitchBindings as a place to store
	                       the listens made from hitches. unlike context.listen, these ONLY 
	                       go away on __remove__, not on __reset__! */
	                
	                    listen(obj, attr, hitch, context, context._hitchBindings);
	            
	                    /* if we have a conditional hitch, we will also listen to it, so that we can reevaluate the hitch
	                       when the value becomes true again, re-syncing the hitch with the target. */
	                    if(hitch_conditional_target)
	                        listen(hitch_conditional_target, hitch_conditional_attr, hitch, context, context._hitchBindings)
	            
	                    /* DO HITCH PARTS 3 and 4 ON THE FIRST ITERATION (obj) only*/
	                    if(i === 0){
	                        /* if it has a third part, use it as the default value for the attr */
	                        if(hitch_parts.length > 2){   
	                            /* get the expression to run (and return a value for when the obj/attr combo is set) */
	                            var default_value = hitch_parts[2].trim();

	                            if(default_value){
	                                /* if they put a semi colon out of habit, nuke it */
	                                if(default_value.slice(-1) == ";")
	                                    default_value = default_value.slice(0, -1)

	                                var get_obj_reference;
	                                try{
	                                    eval("get_obj_reference = function(value){var self = this; return "+default_value+";}");
	                                    var result = get_obj_reference.call(context, obj[attr]);
	                                }catch(err){
	                                    err.message = "\nIn the context of the code:\n\n"+default_value+"\n\n...\n\n"+err.message;
	                                    throw err;
	                                }
	                        
	                                output[key] = result;
	                            }
	                        }

	                        //a fourth arg will also be executed - but its results discarded i.e. misc init.
	                        if(hitch_parts.length > 3){   
	                            /* get the expression to run (and return a value for when the obj/attr combo is set) */
	                            var default_value = hitch_parts[3].trim();

	                            /* if they put a semi colon out of habit, nuke it */
	                            if(default_value.slice(-1) == ";")
	                                default_value = default_value.slice(0, -1)

	                            var get_obj_reference;
	                            try{
	                                eval("get_obj_reference = function(value){var self = this; return "+default_value+";}");
	                                var result = get_obj_reference.call(context, obj[attr]);
	                            }catch(err){
	                                err.message = "\nIn the context of the code:\n\n"+default_value+"\n\n...\n\n"+err.message;
	                                throw err;
	                            }
	                        }
	                    }   
	                }
	            }
	        
	            /* if it's a string but the key is a delegate and promoteDelegateTextToFunction is true than take the 
	               string, wrap it like a function, and put it back. just make function writing in attributes more tolerable.  */
	            else if(promoteDelegateTextToFunction && key.startsendswith('__') && typed(incoming_dict[key], String)){
	                try{
	                    var self = context;
	                    eval("output[key] = function(){"+incoming_dict[key]+";}");
	                }catch(err){
	                    err.message = "Error when converting text to function on delegate method. Error is: "+String(err)+", text of attribute is: "+incoming_dict[key];                
	                    throw err;
	                }
	            }
	        
	            //else it's just normal
	            else
	                output[key] = incoming_dict[key];
	        }
	    
	        catch(e){
	            Hypertag.Debugger.error(
	                "Attribute "+key+", function had a problem, '"+key+"', had an error. Text of attr is:\n\n"+incoming_dict[key]+"\n\nand the error is: "+e
	            );
	        
	            console.log("ATTRIBUTE ERROR CONTEXT", context);
	        }
	    
	        finally{
	           hitch = null;
	           hitch_parts = null;
	           hitch_target_parts = null;
	           hitch_targets = null;
	           hitch_conditional_segments = null;
	           hitch_delay_function = null,
	           first_hitch_target = null;
	           first_hitch_attr = null;
	           hitch_conditional_target = null;
	           hitch_conditional_attr = null;
	           hitch_conditional_or = null;
	        }
	    }
	    
	    return output;
	};

	//INTENT: a basic, called-from-hypertag method under the guise self.create,
	//to make a hypertag on the target using the given template_name, data, etc.
	GLOBAL.create = function(target, template_name, data, inner_template_flag){        
	    //default data
	    if(!data) data = {};

	    var tag = "div";

	    //do they want a specific hypertag or just a view?
	    if(template_name){
	        var lower_template = template_name.toLowerCase();
	        tag = Hypertag.Runtime.TemplateTagType[lower_template] || 'div';    
	    }
	        
	    var new_element = $("<"+tag+"></"+tag+">")[0];

	    //append it to us where it will be initialized
	    target = target[0] || target;
	    target.appendChild(new_element);

	    //set the attributes that will cause the new node to be processed like a hypertag
	    $(new_element).addClass("hypertag");

	    //if they requested a specific hypertag, apply it
	    if(template_name)
	        $(new_element).attr(inner_template_flag === undefined ? "template" : "inner_template", template_name);

	    //setup a javascript attribute '_hypertag_initdata' on the new div, so the creator can comminicate
	    //with the createe -- if 'data' preexists on the element it will be copied to the new instance!
	    //this is how data is handled in lists, so it's nice it's the same for single templates too.
	    new_element.data = data;

	    //actually instantiate all the uninitialized hypertags present at this point
	    Hypertag.Runtime.ExpandHypertags(new_element);

	    //return the new hypertag element - the new div we made.
	    return new_element;
	}

	/* create an item such that it is NOT added to self.items when created */
	GLOBAL.createUnaddedItem = function(target, template_name, data){
	    return createItem(target, template_name, data, true); /* last arg makes it unadded */ 
	};

	//INTENT: this will use a template in the same fashion that a hypertag list does;
	//it will apply the methods and setup deferred initstage calls on the top most
	//node (like the hypertag list, any template used should have only 1 top most node, 
	//when using this method
	GLOBAL.createItem = function(target, template_name, data, suppressAddToItemsFlag){
	    var self = this;

	    if(!data)
	        data = {};

	    //parse flags that affect our operation in the data (sneaky i know)
	    var startInvisible = false;
	    if(data){
	        //if _startInvisible is defined we'll fade the item to 0 before showing, and _startInvisible 
	        //will be removed from the data so as to not pollute it.
	        if(data['_startInvisible']){
	            delete data['_startInvisible'];
	            var startInvisible = true;
	        }
	    }

	    //resolve elem
	    target = target[0] || target;

	    var template_lower = template_name.toLowerCase();

	    var tag = Hypertag.Runtime.TemplateTagType[template_lower] || 'div';        
	    var template = Hypertag.Runtime.TemplateCache(template_name);

	    //make the template so indicated;
	    var new_element = $.tmpl(template, data || {})[0];
	    var jnew_element = $(new_element);

	    //and, of course, any data supplied
	    new_element.data = data;

	    /* provide itemlist and self to the variable replacements */
	    data.self = new_element;

	    var elementMethods = HypertagClass.prototype;
	    
	    //setup our convience method of choice
	    new_element.$child = elementMethods.$child;
	    new_element.$named = elementMethods.$named;
	    new_element.$sibling = elementMethods.$sibling;

	    new_element.child = elementMethods.child;
	    new_element.named = elementMethods.named;
	    new_element.sibling = elementMethods.sibling;

	    new_element.remove = elementMethods.remove;
	    new_element.itemlist = target.isHypertag ? target : new_element;
	    
	    if(target.isHypertag && target.list){
	        /* a list item always gets data methods. */
	        var DataMethods = Hypertag.Methods.Data;
	        for(var key in DataMethods)
	            new_element[key] = DataMethods[key];

	        //if the list is selectable, add the selection methods to the item
	        if(target.selectable)
	            elementMethods._selectableItem(new_element);

	        //the drag option will add drag methods to our hypertag - uniformly applied to children.
	        //if(target.drag)
	        //   elementMethods._dragItem(new_element);

	        //droponchild means that not only will the container, but actually the children, be responsible for the click and 
	        //depends on event bubbling...
	        if(target.droponchild)
	            elementMethods._dropChild(new_element);
	    }
	        
	    //every instance of every template is given it's own css entry automatically. I found myself including it with 
	    //all the widgets anyway.
	    jnew_element.addClass(template_name);

	    //if we are to startInvisible, then make us invisible
	    if(startInvisible)
	        jnew_element.fadeTo(0, 0);

	    //append the new element if there is a target
	    if(target){
	        if(target.lazyreversed) //we support the lazyreversed option here as a quick of adding to the top of a list instead of the bottom as normal
	            $(new_element).prependTo(target);
	        else
	            $(target).append(new_element);
	        
	        /* if the target has an items attribute, add the new item to it. */
	        if(target.items && suppressAddToItemsFlag === undefined)
	            target.items.push(new_element);
	    }

	    //process all newly introduced hypertags below this point
	    Hypertag.Runtime.ExpandHypertags(new_element);

	    //return the new hypertag element - the new div we made.
	    return new_element;
	};

	////////////////////////////////////////////////////////////////////////////////
	// THIS IS THE ABSTRACION WE NEED TO MAKE THE APPROPRIATE NODES ON A TARGET GIVEN
	// A HYPERTAG THAT HAS EITHER/OR A TEMPLATE AND ANONYMOUS TEMPLATE.
	////////////////////////////////////////////////////////////////////////////////

	//JQUERY Template creation is abstracted because the template/inner_template and 
	//the interactions with the Template cache are standard and so can be expressed 
	//always as the hypertag we're working on, the data (a list or single item, affecting
	//the return value to be a list or single item), and the target to append to (or 
	//insertBefore as in the case of the second method here.)

	//INTENT: short hand to create a jquery template from a hypertag, with those nodes
	//being made from the given data and appended to the given target.
	GLOBAL._createHypertagContent = function(hypertag, data, target, beforeFlag){
	    //always put self in the data, for use of programmers in var replacement, etc. will have to be
	    //filtered out when saving objects, but ah well.  

	    var self = this;

	    if(data instanceof Array)
	        for(var i = 0; i < data.length ; i ++)
	            data[i].self = hypertag;    
	        
	    else if(data instanceof Object)
	        data.self = hypertag;

	    //holds the output of both types of templates
	    var sum_of_both_templates = [];

	    //If a template is given on the hypertag, look it up and produce its nodes on the target!
	    if(hypertag.template){
	        var new_nodes_from_template = [];
	    
	        //critical point; try/except here lets inner_template run even if template (this) is bad.ß
	        try{
	            new_nodes_from_template = $.tmpl(Hypertag.Runtime.TemplateCache(hypertag.template), data);
	        }catch(err){
	            Hypertag.Debugger.error("Template: "+hypertag.template, String(err));
	        };
	    
	        //add in the "normal" template-derived nodes
	        for(var i = 0; i < new_nodes_from_template.length ; i ++)
	            sum_of_both_templates.push(new_nodes_from_template[i]);
	    }

	    //If an anonymous template is given on the hypertag, use the text of it as the input and produce its nodes on the target!
	    if(hypertag.use_inner_template && hypertag.inner_template){
	        var new_nodes_from_inner_template = [];
	    
	        //critical point; try/except here lets template run even if inner template (this) is bad.
	        try{
	            new_nodes_from_inner_template = $.tmpl(Hypertag.Runtime.TemplateCache(hypertag.inner_template), data);
	        }catch(err){
	            Hypertag.Debugger.error("Inner Template:", String(err));
	        };
	    
	        //add in the "anonymous" template-derived nodes
	        for(var i = 0; i < new_nodes_from_inner_template.length ; i ++)
	            sum_of_both_templates.push(new_nodes_from_inner_template[i]);
	    }

	    //If an anonymous template is given on the hypertag, use the text of it as the input and produce its nodes on the target!
	    if(hypertag._applied_traits && hypertag._applied_traits.length){
	        for(var i = 0; i != hypertag._applied_traits.length; i++){
	            var new_nodes_from_template = [];
	            //critical point; try/except here lets inner_template run even if template (this) is bad.ß
	            try{
	                new_nodes_from_template = $.tmpl(Hypertag.Runtime.TemplateCache(hypertag._applied_traits[i]), data);
	            }catch(err){
	                Hypertag.Debugger.error("Template: "+hypertag._applied_traits[i], String(err));
	            };
	        
	            //add in the inner contents of the node we get back. if it's a trait, we'll want to paint
	            //the interior of the template, never the container itself.
	            for(var j = 0; j < new_nodes_from_template.length ; j ++)
	                sum_of_both_templates.push(new_nodes_from_template[j]);
	        }
	    }

	    //console.log("sum_of_both_templates", sum_of_both_templates);
	    
	    //decide if we should appendTo target or insert before target, as dictated by the beforeFlag
	    if(beforeFlag === undefined)
	        $(sum_of_both_templates).appendTo(target);
	    else if(beforeFlag === false)
	        $(sum_of_both_templates).prependTo(target);
	    else
	        $(sum_of_both_templates).insertBefore(target);
	    
	    //return the total list of created items.
	    return sum_of_both_templates;
	}


	////////////////////////////////////////////////////////////////////////////////
	// The fundamental event mecahanism in Hypertag: listen, set, send, fire, etc
	// can change/notify values on pure objects.
	// it's often the case that globally accessible dictionaries will thus be
	// made to hold state that the applicaiton can react to when changed. It's also 
	// used to say things like "the list has changed" or "the name of the template 
	// to use is now". etc.

	//I will pair a method to an attribute on a given object such that if the set function 
	//is called to change that attribute the method will be called with the object changed and the attr's new value
	//the boundobject parameter can specify an object that will receive a release() method
	//so that any registrations made will be unmade when boundobject.release() is called!
	GLOBAL.listen = function(obj, attrlist, method, context, boundobject){

	    /* listening to undefined is badbadbad.  */
	    if(!(obj instanceof Object))
	       throw "A non-object was passed to listen for the attribute \""+attr+"\" and is an error. Object: "+String(obj)+".";

	    /* if they give a boundobject, initialize it if not already */
	    if(boundobject !== undefined){            
	        if(boundobject['__listening__'] === undefined)
	            boundobject['__listening__'] = [];

	        if(boundobject.release === undefined)
	            boundobject.release = _releaseListens;
	    }

	    /* if they pass a single string, make it a list */
	    attrlist = stringToList(attrlist);

	    var releaselist =  [];

	    for(var i = 0; i < attrlist.length ; i ++){
	        var attr = attrlist[i];

	        if(obj.__listeners__ === undefined)  
	            obj.__listeners__ = {};

	        if(obj.__listeners__[attr] === undefined)  
	            obj.__listeners__[attr] = new Array;

	        obj.__listeners__[attr].push([method, context]);   
	  
	        releaselist.push([
	            obj, attr, method, context, boundobject
	        ]);
	    }

	    /* if they provide a bound object, push the release list onto it. */
	    if(boundobject)
	        boundobject.__listening__.extend(releaselist);

	    return releaselist;
	}

	/* INTENT: the listen method returns a list that if kept can be passed to this to release only
	   what was created in that listen call */
	GLOBAL.release = function(releaselist){
	    for(var i = 0; i < releaselist.length ; i ++){
	        var entry = releaselist[i];
	        var obj = entry[0], attr = entry[1], method = entry[2], context = entry[3], boundobject = entry[4];

	        /* use that information to find the registration (going backwards) removing them. */
	        var listened_list = obj.__listeners__[attr] || [];

	        for(var j = listened_list.length-1; j != -1; j --)
	            if(listened_list[j][0] == method && listened_list[j][1] == context){
	                listened_list.remove(j);
	                if(listened_list.length == 0)
	                    delete obj.__listeners__[attr];
	                break;
	            } 
	    
	        if(boundobject){
	            var listening_list = boundobject.__listening__ || [];
	    
	            for(var j = listening_list.length-1; j != -1; j --){
	                if(listening_list[j][0] == obj && listening_list[j][1] == attr && listening_list[j][2] == method){
	                    listening_list.remove(j);
	                    break;
	                }
	            }
	        }
	    }
	}

	/* this method will be assigned to boundobjects specified when listening events.
	when this method is called on that boundobject, all registrations bound will be released! */
	GLOBAL._releaseListens = function(){
	    var attrs_setup_list = this.__listening__ || [];

	   /* for all the recorded registrations-to-remove */
	    for(var i = this.__listening__.length-1; i >= 0; i --){
	        var obj = this.__listening__[i][0];
	        var attr = this.__listening__[i][1];
	        var method = this.__listening__[i][2];

	        /* use that information to find the registration (going backwards) removing them. */
	        var listened_list = obj.__listeners__[attr] || [];

	        for(var j = listened_list.length-1; j >= 0; j --)
	            if(listened_list[j][0] == method){
	                obj.__listeners__[attr].remove(j);
	                if(obj.__listeners__[attr].length == 0)
	                    delete obj.__listeners__[attr];
	                break;
	            }   
	    
	        /* remove the entry as we empty it -- reset() requires this although remove() would have dumped this anyway. */
	        this.__listening__.remove(i);
	    }
	}

	/* INTENT: not only listen, but fire the method right away to evaluate first state */
	GLOBAL.listenNow = function(obj, attrlist, method, context, boundobject){
	    listen(obj, attrlist, method, context, boundobject);

	    /* cast the attr list to list if not already (i.e. comma sep to list) */
	    attrlist = stringToList(attrlist);

	    for(var i = 0; i < attrlist.length ; i ++)
	        method.call(context || this, obj[attrlist[i]]);

	    return obj;
	}

	/* I will set a attribute on an obj such that any methods listened via the listen() method will fire. */
	GLOBAL.send = function(obj, attr, val){ 
	    if(val === undefined) val = obj[attr]; /* if no val given use current val of object */

	    /* we look at the raw arguments coming in 
	       to decide if we've been given one or more then
	       one value, and so to either .call or .apply this
	       value(s) below */
	    var args = Array();
	    for(var i = 0; i < arguments.length ; i ++)
	        args.push(arguments[i]);

	    /* determine if we have args to use or not. is either
	       the list of arguments to send or false */
	    args = args.length > 3 ? args.slice(2) : false;

	    /* if there are no listeners, just return. */
	    if(!obj.__listeners__ || !obj.__listeners__[attr])
	        return;

	    /* get a reference to the listeners list */
	    var regAttrs = obj.__listeners__[attr];

	    /* it is CRUCIALLY important to the listening algorithm that one cache the entries to 
	       call BEFORE calling them in sequence, as they may alter this list during their execution 
	       and while we want that, it means we must rely on a second list to iterate over everything
	       correctly! */

	    var to_run = [];   
	    for(var i = 0; i < regAttrs.length; i ++)
	        to_run.push([regAttrs[i][0], regAttrs[i][1]]);

	    /* if we are not applying the value, call the method with a single argument */
	    if(args === false){
	        for(var i = 0; i < to_run.length; i ++)
	            if(to_run[i][0])
	                to_run[i][0].call(to_run[i][1] ? to_run[i][1] : obj, val, obj, attr);
	    }

	    /* if we ARE being told to apply the value (via the applyValFlag), we will use
	       the list-val as the arguments to use in an .apply call. */
	    else{
	        for(var i = 0; i < to_run.length; i ++)
	            if(to_run[i][0])
	                to_run[i][0].apply(to_run[i][1] ? to_run[i][1] : obj, args);
	    }   

	    return obj;
	}

	/* EXACTLY like send() except that if the current val of obj.attr is a function, it will be called with 
	      the sent value, a very common pattern. */
	GLOBAL.fire = function(obj, attr, val){ 
	    /* we look at the raw arguments coming in 
	       to decide if we've been given one or more then
	       one value, and so to either .call or .apply this
	       value(s) below */
	    var args = Array();
	    for(var i = 0; i < arguments.length ; i ++)
	        args.push(arguments[i]);

	    /* determine if we have args to use or not. is either
	       the list of arguments to send or false */
	    args = args.slice(2);

	    /* if a function exists of that name run it. if it returns false, return that and DONT do any sends  */
	    var retval;
	    if(typed(obj[attr], Function))
	        retval = obj[attr].apply(obj, args);

	    if(retval === false)
	        return false;

	    /* if there are no listeners, just return the retval. */
	    if(!obj.__listeners__ || !obj.__listeners__[attr])
	        return retval;

	    /* get a reference to the listeners list */
	    var regAttrs = obj.__listeners__[attr];

	    /* it is CRUCIALLY important to the listening algorithm that one cache the entries to 
	       call BEFORE calling them in sequence, as they may alter this list during their execution 
	       and while we want that, it means we must rely on a second list to iterate over everything
	       correctly! */

	    var to_run = [];   
	    for(var i = 0; i < regAttrs.length; i ++)
	        to_run.push([regAttrs[i][0], regAttrs[i][1]]);

	    /* if we are not applying the value, call the method with a single argument */
	    if(args.length === 0){
	        for(var i = 0; i < to_run.length; i ++)
	            if(to_run[i][0])
	                to_run[i][0].call(to_run[i][1] ? to_run[i][1] : obj, val, obj, attr);
	    }

	    /* if we ARE being told to apply the value (via the applyValFlag), we will use
	       the list-val as the arguments to use in an .apply call. */
	    else{
	        for(var i = 0; i < to_run.length; i ++)
	            if(to_run[i][0])
	                to_run[i][0].apply(to_run[i][1] ? to_run[i][1] : obj, args);
	    }  

	    return retval; 
	}

	/* I will set a attribute on an obj such that any methods listened via the listen() method will fire. */
	GLOBAL.set = function(obj, attr, val){
	    /* do the actual assignment */
	    obj[attr] = val;

	    var args = Array();
	    for(var i = 0; i < arguments.length ; i ++)
	        args.push(arguments[i]);

	    /* call an event on this attr using .apply*/
	    if(args.length > 3){
	        args = args.slice(2);
	        args.insert(obj, 0);
	        args.insert(attr, 1);
	        send.apply(this, args);
	    }

	    /* else do a normal call with .call getting val (only) */
	    else
	        send(obj, attr, val);

	    /* return the new value of the attr, which may have changed during set! */
	    return obj;
	}

	GLOBAL.toggle = function(obj, attr){
	    set(obj, attr, !obj[attr]);
	    return obj;
	}

	GLOBAL.ensure = function(obj, attr, val){
	    obj[attr] != val && set(obj, attr, val);
	    return obj;
	}

	GLOBAL.is = function(obj, attr){
	    !obj[attr] && set(obj, attr, true);
	    return obj;
	}

	GLOBAL.isnt = function(obj, attr){
	    obj[attr] && set(obj, attr, false);
	    return obj;
	}

	/* unset an attribute by passing undefined as the value. */
	GLOBAL.unset = function(obj, attr){
	    set(obj, attr);
	    return obj;
	}

	/* INTENT: called by file machinery ONLY, this properly 
	   issues events for a path, without relying  */
	GLOBAL.conditionalSend = function(obj, attr, custom_function){        
	    if(!obj.__listeners__ || !obj.__listeners__[attr])
	        return;

	    var listeners = obj.__listeners__[attr] || [];

	    /* it is CRUCIALLY important to the listening algorithm that one cache functions to call in a list before evaluating them */
	    var to_run = [];
	    for(var j = 0; j < listeners.length; j ++)
	        to_run.push([listeners[j][0], listeners[j][1]]);

	    /* for each entry, if they explicitly return false, stop and return */

	    try{
	        for(var j = 0; j < to_run.length ; j ++)
	            if(to_run[j][0] && (custom_function(to_run[j][0], to_run[j][1]) === false))
	                return false;
	        
	    }catch(err){
	        return false;
	    }
	    
	    return;
	}

	////////////////////////////////////////////////////////////////////////////////
	// PAGE READY INITIALIZATION i.e. RUN UNINITED REPLICATORS, ROUND CORNERS, ETC.
	////////////////////////////////////////////////////////////////////////////////

	//INTENT: determine if a given class is on a node, for a pure XML object.
	//$(x).hasClass does NOT work with xml objects.
	GLOBAL.hasClass = function(node, classname){
	    var classes = node.getAttribute('class');
	    return classes && classes.split(" ").indexOf(classname) !== -1;
	}

	////////////////////////////////////////////////////////////////////////////////
	// HERE LIE MANY USEFUL METHODS USED IN THE CODE ABOVE, BOTH FOR EXTENDING 
	// JAVASCRIPT AND JQUERY VIA PROTOTYPE AND FOR GENERAL GLOBAL USE.
	////////////////////////////////////////////////////////////////////////////////

	//INTENT: return an XML evaluated jquery item insetad of the traditional HTML one.
	GLOBAL.ParseXML = function(xmlText){
	    ////xmlText = xmlText.replace(/\n[ ]*/g, "");
	    //return $.parseXML(xmlText, null).documentElement;

	    try{ //html5
	        var parser = new DOMParser();
	        var xmlDoc = parser.parseFromString(xmlText, "application/xml");
	        return xmlDoc.documentElement;
	    }

	    catch(e){ //IE sigh.
	        //console.log("fallback to IE DOMParser (error was)", String(e));
	        var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
	        xmlDoc.async = "false";
	        xmlDoc.loadXML(xmlText);
	        return xmlDoc.documentElement;
	    }
	}

	//INTENT: provide a way to print a node (or node list!) easily.
	GLOBAL.PrintXML = function(node){
	    if(typed(node, Object)){
	        var output = "";
	        for(var i = 0, elem; (elem = node[i]) != undefined ; i ++)
	            output += PrintXML(elem).trim();
	        
	        return output.trim();
	    }
	    
	    else{
	        return HTMLSerializer(node).trim();
	        //return new XMLSerializer().serializeToString(node).trim() || "<!-- -->";
	    }
	}

	//INTENT: print the xml interior to a given node.
	GLOBAL.PrintInnerXML = function(node){
	    var output = "";
	    for(var i = 0; i < node.childNodes.length ; i ++)
	        output += PrintXML(node.childNodes[i]);

	    return output;
	}

	//INTENT: to parse NodeLists and other jquery non-iterable iterables....
	GLOBAL.indexOf = function(list, item){
	    for(var i = 0; i < list.length ; i ++)
	        if(list[i] === item)
	            return i;
	    return -1;
	}

	// Credit: Jesse Ruderman as seen on https://bugzilla.mozilla.org/show_bug.cgi?id=501226
	// As edited by James Robey to eliminate xmlns support and other non-necessary tests for use in Hypertag
	// This function turns an HTML DOM into either HTML or XHTML.
	// attempt to output as HTML.  (HTML enables fast-and-loose reduction, but not all DOMs can be serialized as HTML.  serializeHTML will complain about some unserializable features in HTML mode, but it won't detect things like block-in-inline and missing table parts!)
	GLOBAL.HTMLSerializer = function(n){
	    // List from http://www.cs.tut.fi/~jkorpela/html/empty.html#html
	    var emptyElements = {
	        area: true, 
	        base: true, 
	        basefont: true,
	        br: true, 
	        col: true,
	        frame: true, 
	        hr: true, 
	        img: true, 
	        input: true, 
	        isindex: true, 
	        link: true, 
	        meta: true, 
	        param: true
	    };

	    var CDATAElements = {
	        script: true,
	        style: true  
	    };

	    function htmlEscape(s){
	        s = s.replace(/&/g,'&amp;');
	        s = s.replace(/>/g,'&gt;');
	        s = s.replace(/</g,'&lt;');
	        return s;
	    };

	    function quoteEscape(s){
	        s = s.replace(/"/g,'&quot;');
	        return s;
	    };

	    function serializeAttributes(n){
	        var i, attr;
	        var r = "";
	        for (i = 0; attr = n.attributes[i]; ++i)
	            r += " " + attr.name + "=\"" + quoteEscape(htmlEscape(attr.value)) + "\"";
	        return r;
	    };

	    function hasNonTextChildren(n){
	        var i, child;
	        for (i = 0; child = n.childNodes[i]; ++i)
	          if (child.nodeType != 3)
	            return true;
	        return false;
	    };

	    // uses outputXML from its closure
	    function serializeSubtree(n, addXMLNSforHTML){
	        switch(n.nodeType) {
	        
	            case 3:
	                // In XML mode, it would be "nice" to use "<![CDATA..." sometimes, but this is
	                // never incorrect.
	                return htmlEscape(n.data);
	        
	            case 8:
	                // Should figure out what to do with double hyphens.
	                return "<!--" + n.data + "-->";
	        
	            case 1: 
	                var tag = n.tagName.toLowerCase(); // XXX wrong for svg:foreignObject

	                var serializedChildren = "";
	                var i, child;
	            
	                for (i = 0; child = n.childNodes[i]; ++i)
	                    serializedChildren += serializeSubtree(n.childNodes[i], false);

	                //if it's an empty element simply emit a close and thats it
	                if(emptyElements[tag]){

	                    if(serializedChildren.trim())
	                        console.error("HTMLSerializer found content in a self closing tag:\n\n<"+tag+serializeAttributes(n)+">"+serializedChildren+"</"+tag+">.\n\nYou cannot have inner content in these tags.");

	                    var start = "<" + tag + serializeAttributes(n) + "/>";
	                    return start;
	                }

	                //otherwise print an open, recurse into the tag, and finally print the close
	                else{
	                    var start = "<" + tag + serializeAttributes(n) + ">";
	                    var end = "<" + "/" + tag + ">";
	                
	                    return start + serializedChildren + end;
	                }
	            
	            default:
	                throw "serializeHTML: Unexpected node type " + n.nodeType + ": "+n;
	        };
	    };

	    var output = serializeSubtree(n); 
	    return output;
	};

	//Useful just to represent an empty div without extra computation. We GOTTA declare the namespace or firefox hates on us!
	GLOBAL.EmptyDiv = ParseXML("<div xmlns='http://www.w3.org/1999/xhtml'></div>");
	GLOBAL.EmptyTemplate = ParseXML("<script xmlns='http://www.w3.org/1999/xhtml'></script>");

	//////////////////////////////////////////////////////////////////////////////
	// Help javascript out - add in some stuff the list.js framework can use.
	//////////////////////////////////////////////////////////////////////////////

	Math.bound = function(lower, upper, val){
	    return Math.min(Math.max(lower, val), upper);
	};

	//I give arrays a has method. Don't that make sense?
	if(Array.prototype['has'] == undefined){
	    Array.prototype.has = function(what){
	        return this.indexOf(what) !== -1;
	    };
	}else{
	    throw new Error("Warning: tried to give array a has method, but it already has one!");
	}

	//I give arrays a remove method. Don't that make sense?
	if(Array.prototype['pushUniquely'] == undefined){
	    Array.prototype.pushUniquely = function(what){
	        if(this.indexOf(what) === -1)
	            this.push(what);
	        return this;
	    };
	}else{
	    throw new Error("Warning: tried to give array a has method, but it already has one!");
	}

	//I give arrays a remove method. Don't that make sense?
	if(Array.prototype['remove'] == undefined){
	    Array.prototype.remove = function(index){
	        return this.splice(index, 1);
	    };
	}else{
	    throw new Error("Warning: tried to give array a remove method, but it already has one!");
	}

	//I give arrays an insert method. Don't that make sense?
	if(Array.prototype['insert'] == undefined){
	    Array.prototype.insert = function(what, at){
	      return this.splice(at, 0, what);
	    };
	}else{
	    throw new Error("Warning: tried to give array an insert method, but it already has one!");
	}

	if(Array.prototype['first'] == undefined){
	    Array.prototype.first = function(default_value){
	      return this[0] === undefined ? default_value : this[0];
	    };
	}else{
	    throw new Error("Warning: tried to give array a first method, but it already has one!");
	}

	//I give arrays an insert method. Don't that make sense?
	if(Array.prototype['last'] == undefined){
	    Array.prototype.last = function(default_value){
	      return this[this.length-1] === undefined ? default_value : this[this.length-1];
	    };
	}else{
	    throw new Error("Warning: tried to give array a last method, but it already has one!");
	}

	if(Array.prototype['each'] === undefined){
	    Array.prototype.each = function(method){
	        for(var i = 0; i != this.length; i ++){
	            var val = method(this[i]);
	            if(val !== undefined)
	                this[i] = val;
	        }
	        
	        return this;
	    };
	}else{
	    throw new Error("Warning: tried to give array a each method, but it already has one!");
	}

	//I give strings an endswith method. Don't that make sense?
	if(String.prototype['user_id'] == undefined){
	    String.prototype.user_id = function(what){
	        var trust_id = this.split('::');
	        var user_id = trust_id[0].trim();
	        var membership = trust_id[1].trim();
	    
	        return user_id;
	    };
	}else{
	    throw new Error("Warning: tried to give string a endswith method, but it already has one!");
	}

	if(String.prototype['membership'] == undefined){
	    String.prototype.membership = function(what){
	        var trust_id = this.split('::');
	        var user_id = trust_id[0].trim();
	        var membership = trust_id[1].trim();
	    
	        return membership;
	    };
	}else{
	    throw new Error("Warning: tried to give string a endswith method, but it already has one!");
	}

	//I give strings an endswith method. Don't that make sense?
	if(String.prototype['endswith'] == undefined){
	    String.prototype.endswith = function(what){
	        for(var i = 0; i < arguments.length; i ++)
	            if(this.slice(-arguments[i].length) == arguments[i])
	                return true;
	            
	        return false;
	    };
	}else{
	    throw new Error("Warning: tried to give string a endswith method, but it already has one!");
	}

	//I give strings an startswith method. Don't that make sense?
	if(String.prototype['startswith'] == undefined){
	    String.prototype.startswith = function(what){
	        return what && this.length >= what.length && this.slice(0, what.length) == what;
	    };
	}else{
	    throw new Error("Warning: tried to give string a startswith method, but it already has one!");
	}

	//I give strings an startswith method. 
	if(String.prototype['startsendswith'] === undefined){
	    String.prototype.startsendswith = function(what){
	        return what && this.slice(0, what.length) == what && this.slice(-what.length) == what;
	    };
	}

	else
	    throw new Error("Warning: tried to give string a startsendswith method, but it already has one!");

	//I give strings an ltrim method.
	if(String.prototype['ltrim'] === undefined || String.prototype['rtrim'] === undefined){

	    var _WHITESPACE_REGEX = "\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003" +
	        "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028" +
	        "\u2029\uFEFF";

	    var _WHITESPACE_REGEX = "[" + _WHITESPACE_REGEX + "]";
	    var trimBeginRegexp = new RegExp("^" + _WHITESPACE_REGEX + _WHITESPACE_REGEX + "*"),
	        trimEndRegexp = new RegExp(_WHITESPACE_REGEX + _WHITESPACE_REGEX + "*$");

	    String.prototype.ltrim = function(){
	        return String(this).replace(trimBeginRegexp, "");
	    };

	    String.prototype.rtrim = function(){
	        return String(this).replace(trimEndRegexp, "");
	    };
	}

	else
	    throw new Error("Warning: tried to give string a rtrim/ltrim method, but it already has one!");

	/* we will make three methods to give strings local fat API methods.
	   fat returns a fat.cd(string+path_from_1st_arg) object,
	   pointer returns the pointer obtained from the path from the string (plus path from 1st arg) and,
	   reference does the same thing as pointer, but using reference (which does not make a path if it doesn't exist, like pointer will)*/

	if(String.prototype['cd'] === undefined){
	    String.prototype.cd = function(path){
	        return fat.cd(this+(path !== undefined ? "/"+path : ""));
	    };
	}

	else
	    throw new Error("Warning: tried to give string a fat method, but it already has one!");

	if(String.prototype['reference'] === undefined){
	    String.prototype.reference = function(path){
	        return fat.reference(this+(path !== undefined ? "/"+path : ""));
	    };
	}

	else
	    throw new Error("Warning: tried to give string a reference method, but it already has one!");

	if(String.prototype['pointer'] === undefined){
	    String.prototype.pointer = function(path){
	        return fat.pointer(this+(path !== undefined ? "/"+path : ""));
	    };
	}
	else
	    throw new Error("Warning: tried to give string a pointer method, but it already has one!");

	/* BY GIVING ARRAYS METHODS, we remove the ability to use the for var in array javascript
	  syntax. indeed, across my codebase you'll only ever see the other forms.
	  While the Object prototype remains totally unaltered, i decided to do this
	  because methods on every array is actually quite useful, while disaster for 
	  introspetion of object attributes. given i'm fine with this 'divide' between the two. */

	//I give arrays a copy method. Don't that make sense?
	if(Array.prototype['copy'] === undefined){
	    Array.prototype.copy = function(){
	        var new_list = [];
	    
	        for(var i = 0; i < this.length ; i ++)
	            new_list.push(this[i]);
	        
	        return new_list;
	    };
	}else
	    throw new Error("Warning: tried to give array a copy method, but it already has one!");

	/* given array 'arr', is every member in it in the host-list? */
	if (!Array.prototype['intersect'])
	    Array.prototype.intersect = function(arr){
	        if(!(arr instanceof Array))
	            arr = [arr];
	        for(var i = 0; i < this.length ; i ++)
	            for(var j = 0; j < arr.length ; j ++)
	                if(this[i] == arr[j])
	                    return true;
	                
	        return false;
	    }

	else
	    throw new Error("Warning: tried to give array an intersect method, but it already has one!");

	/* given dict 'what', find the index of the dictionary (presumed this is a list of
	   dictionaries) that has all the same keys as the 'what' dict. Meant to work like indexOf for lists of dicts. */
	//if(!Array.prototype['find'])
	Array.prototype.find = function(what){
	    var i;

	    for(i = 0; i < this.length ; i ++){
	        var found = true;
	    
	        for(var key in what)
	            if(what[key] != this[i][key]){
	                found = false;
	                break;
	            }
	    
	        if(found)
	            return i;
	    }
	    
	    return -1;
	}

	//else{
	//    throw new Error("Warning: tried to give array an find method, but it already has one!");
	//}

	////////////////////////////////////////////////////////////////////////////////
	// Lets spruce jquery up a bit:
	////////////////////////////////////////////////////////////////////////////////

	//function used to construct traversal API by making methods to return the value of running this.
	//NOTE THIS FUNCTION is a tool used internally by the .named/.child/.sibling series of dom navigation
	//methods available on hypertags

	GLOBAL._traversalFunction = function(target, initialOperation, names, returnJQObjFlag, suppress_no_name_error){    
	    names = names.split(".");

	    //handle . tagtype
	    var tagtype = ""; //undef eq. any
	    if(names[0].indexOf(".") !== -1){
	        var parts = names[0].split(':');
	        tagtype = parts[0];
	        names[0] = parts[1];
	    }

	    //always add the single name they pass
	    var whereto = [[initialOperation, names[0], tagtype]];

	    //and if they give more pieces (slash seperated names)
	    for(var i = 1; i < names.length ; i ++){        
	        //normal mode = child
	        var mode = 0;
	    
	        //if mode == named - i.e. an empty item between two slashes - note it and increement i, continue.
	        if(names[i].length === 0){
	            mode = 1;
	            ++i;
	        }
	    
	        //handle . tagtype
	        var tagtype = ""; //undef eq. any
	        if(names[i].indexOf(".") !== -1){
	            var parts = names[i].split('.');
	            tagtype = parts[0];
	            names[i] = parts[1];
	        }
	    
	        //put sibling aside for adding after this one
	        var sibling = undefined;
	        if(names[i].indexOf(":") !== -1){
	            var parts = names[i].split('|');
	            names[i] = parts[0];
	            sibling = parts[1];
	        }
	    
	        //add the primary new parameter - operation type, name, and tagtype of next jump in dom tree
	        whereto.push([mode, names[i], tagtype]);
	    
	        //if we had a sibling put aside from above add it after the first item.
	        if(sibling){
	            var tagtype = ""; //undef eq. any
	        
	            if(sibling.indexOf(".") !== -1){
	                var parts = sibling.split(':');
	                tagtype = parts[0];
	                sibling = parts[1];
	            }
	        
	            whereto.push([2, sibling, tagtype]);
	        }
	    }

	    var orig_target = target;

	    //we've built a list of operations to perform, do them.
	    for(var i = 0; i < whereto.length ; i ++){
	        var entry = whereto[i];
	    
	        //if child  
	        if(entry[0] === 0)
	            target = target.children(entry[2]+" [name="+entry[1]+"]");
	        
	        //else named
	        else if(entry[0] === 1)
	            target = target.find(entry[2]+" [name="+entry[1]+"]");
	        
	        //else sibling
	        else if(entry[0] === 2)
	            target = target.parent().children(entry[2]+" [name="+entry[1]+"]");
	    
	        if(target[1])
	            throw "traversal over "+names+" returned more then one node named '"+entry[2]+' '+entry[1]+"' in:\n\n"+PrintXML(orig_target[0]);
	        else if(!target)
	            throw "traversal over "+names+" returned no nodes node named '"+entry[2]+' '+entry[1]+"' in:\n\n"+PrintXML(orig_target[0]);
	    }

	    var to_return = returnJQObjFlag ? target : target[0];

	    if(!suppress_no_name_error && !to_return){
	        var mode_names = ['child', 'named', 'sibling'];
	        throw "We tried to find something "+mode_names[initialOperation]+" '"+names+"' returned nothing, in:\n\n"+PrintXML(orig_target[0]);
	    }
	    
	    //if we are returning jq object just return, else return just element
	    return to_return;
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['child']) throw new Error("$.fn['child'] already defined! (hypertag.js trying to redefine it)");
	$.fn.child = function(names){
	    return _traversalFunction(this, 0, names, false, false);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['named']) throw new Error("$.fn['named'] already defined! (hypertag.js trying to redefine it)");
	$.fn.named = function(names){
	    return _traversalFunction(this, 1, names, false, false);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['sibling']) throw new Error("$.fn['named'] already defined! (hypertag.js trying to redefine it)");
	$.fn.sibling = function(names){
	    return _traversalFunction(this, 2, names, false, false);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['$child']) throw new Error("$.fn['$child'] already defined! (hypertag.js trying to redefine it)");
	$.fn.$child = function(names){
	    return _traversalFunction(this, 0, names, true, false);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['$named']) throw new Error("$.fn['$named'] already defined! (hypertag.js trying to redefine it)");
	$.fn.$named = function(names){
	    return _traversalFunction(this, 1, names, true, false);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['$sibling']) throw new Error("$.fn['$sibling'] already defined! (hypertag.js trying to redefine it)");
	$.fn.$sibling = function(names){
	    return _traversalFunction(this, 2, names, true, false);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['hasChild']) throw new Error("$.fn['hasChild'] already defined! (hypertag.js trying to redefine it)");
	$.fn.hasChild = function(names){
	    return _traversalFunction(this, 0, names, false, true);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['hasNamed']) throw new Error("$.fn['hasNamed'] already defined! (hypertag.js trying to redefine it)");
	$.fn.hasNamed = function(names){
	    return _traversalFunction(this, 1, names, false, true);
	}

	//return a node interior to ourselves named 'name'. This is quicker then looking 
	//for id's as well as being factorable.
	if($.fn['hasSibling']) throw new Error("$.fn['hasSibling'] already defined! (hypertag.js trying to redefine it)");
	$.fn.hasSibling = function(names){
	    return _traversalFunction(this, 2, names, false, true);
	}

	//make it easy to get/set top
	if($.fn['top']) throw new Error("$.fn['top'] already defined! (hypertag.js trying to redefine it)");
	$.fn.top = function(val){
	    return val !== undefined ?
	        this.css("top", "px%".indexOf(String(val).slice(-2)) === -1 ? String(val)+"px" : val) :
	        parseInt(this.css("top").slice(0, -2), 10);
	}

	//make it easy to get/set left
	if($.fn['left']) throw new Error("$.fn['top'] already defined! (hypertag.js trying to redefine it)");
	$.fn.left = function(val){
	    return val !== undefined ?
	        this.css("left", "px%".indexOf(String(val).slice(-2)) === -1 ? String(val)+"px" : val) :
	        parseInt(this.css("left").slice(0, -2), 10);
	}

	//make it easy to get/set top
	if($.fn['bottom']) throw new Error("$.fn['bottom'] already defined! (hypertag.js trying to redefine it)");
	$.fn.bottom = function(val){
	    return val !== undefined ?
	        this.css("bottom", "px%".indexOf(String(val).slice(-2)) === -1 ? String(val)+"px" : val) :
	        parseInt(this.css("bottom").slice(0, -2), 10);
	}

	//make it easy to get/set left
	if($.fn['right']) throw new Error("$.fn['right'] already defined! (hypertag.js trying to redefine it)");
	$.fn.right = function(val){
	    return val !== undefined ?
	        this.css("right", "px%".indexOf(String(val).slice(-2)) === -1 ? String(val)+"px" : val) :
	        parseInt(this.css("right").slice(0, -2), 10);
	}

	//make it easy to get/set opacity
	if($.fn['opacity']) throw new Error("$.fn['top'] already defined! (hypertag.js trying to redefine it)");
	$.fn.opacity = function(val){
	    return val !== undefined ?
	        this.css("opacity", val) :
	        parseFloat(this.css("opacity"));
	}

	//make it easy to get/set left
	if($.fn['zindex']) throw new Error("$.fn['zindex'] already defined! (hypertag.js trying to redefine it)");
	$.fn.zindex = function(val){
	    return val !== undefined ?
	        this.css("z-index", val) :
	        this.css("z-index");
	}

	if($.fn['reverse']) throw new Error("$.fn['reverse'] already defined! (hypertag.js trying to redefine it)");
	//allow to reverse the order of nodes in a chain of jquery calls. neat.
	$.fn.reverse = function() {
	    this.pushStack(this.get().reverse());
	    return this;
	}

	//simply cause a div to scroll to the bottom given a selector.
	if($.fn['scrollToBottom']) throw new Error("$.fn['scrollToBottom'] already defined! (hypertag.js trying to redefine it)");
	$.fn.scrollToBottom = function(){
	    animate(this, {scrollTop: $(this).prop("scrollHeight")}, Hypertag.GUI.duration);
	}

	//simply cause a div to scroll to the bottom given a selector.
	if($.fn['scrollToTop']) throw new Error("$.fn['scrollToTop'] already defined! (hypertag.js trying to redefine it)");
	$.fn.scrollToTop = function(){
	    animate(this, {scrollTop:0}, Hypertag.GUI.duration);
	}

	if($.fn['scrollTo']) throw new Error("$.fn['scrollToTop'] already defined! (hypertag.js trying to redefine it)");
	$.fn.scrollTo = function(y, noanimFlag){
	    var self = this[0];

	    animate(this, {scrollTop:y}, noanimFlag !== undefined ? 0 : Hypertag.GUI.duration);
	    /* tell listeners we scrolled - since if we scroll by the above mousewheel events dont seem to fires */

	    set(self, 'scrolledTo', y);
	}

	if($.fn['singleclick']) throw new Error("$.fn['singleclick'] already defined! (hypertag.js trying to redefine it)");
	/* singleclick means only when they mousedown and mouseup in the same place.  */
	$.fn.singleclick = function(onclick, ondblclick, ondragging){
	    var self = this[0];
	    self._single_click_state = false;
	    self._single_click_mouseclicks = 0;
	    self._single_click_upevent = false;

	    $(self).mousedown(function(e){
	    
	        if(self._single_click_mouseclicks == 0)
	            self._single_click_upevent = false;

	        //never use click handler on input types
	        var type = e.target.getAttribute('type');
	        if(HypertagDraggingClass.prototype._nonDraggableTargetTypes.indexOf(e.target.tagName.toLowerCase()) !== -1)
	            return true;
	    
	        //if it doesn't have any double click or drag responsibility, click right away.
	        if(!self.__dblclick__ && (self.itemlist && (!self.itemlist.drag && !self.itemlist.__dblclickitem__)))
	            return onclick.call(self, e);                    
	    
	        //else we are cool to start detecting single/double/drag clicking operations.
	        else{
	            self._single_click_mouseclicks += 1;

	            if(self._single_click_mouseclicks == 2){
	                clearTimeout(self._single_click_timer);
	                self._single_click_mouseclicks = 0;
	                ondblclick.call(self, e);
	                return false;
	            }

	            else if(self._single_click_mouseclicks == 1){
	                clearTimeout(self._single_click_timer);
	            
	                self._single_click_timer = setTimeout(function(){
	                    ondragging && !self._single_click_upevent && ondragging.call(self, e);
	                    self._single_click_upevent && onclick.call(self, e);
	                    self._single_click_mouseclicks = 0;
	                }, Hypertag.Runtime.doubleClickDelay);

	                return false;
	            }
	        }
	    
	        /* return true? Yes - we cannot know it's a click until the timeout happens, and so if we did not do this
	           events related to dragging would not get a chance to fire (triggered on mousedown). Also, this allows input
	           fields to get clicks in the file browser, for instance, where they would otherwise be eaten */
	        return true;
	    });

	    /* while mousedown MUST be allowed to drop through, if we did the same for mouseup, we'd not be able
	       to "trap" mouseevents at a certain component. Drag drop utilizes mousedown so it will work harmoniously,
	       while all other singleclick handlers will never get mouseup so they will be trapped here. good. */
	    $(self).mouseup(function(e){
	        self._single_click_upevent = e;
	        return true;
	    });
	}

	//if($.fn['scale']) throw new Error("$.fn['scale'] already defined! (hypertag.js trying to redefine it)");
	//$.fn.scale = function(to){
	//    return $(this).css("scale", to);
	//}
	//
	//if($.fn['rotate']) throw new Error("$.fn['scale'] already defined! (hypertag.js trying to redefine it)");
	//$.fn.rotate = function(to){
	//    return $(this).css("rotate", to);
	//}

	//This both derefernces and pretties a seletor result made from a JQ call
	//if it resolves to one element and returns a real array of elements otherwise.g
	GLOBAL.$$ = function(selector){
	    var output = $.makeArray($(selector));
	    return (output.length == 1) ? output[0] : output;
	}

	if(typeof String.prototype.trim !== 'function') {
	  String.prototype.trim = function() {
	    return this.replace(/^\s+|\s+$/g, ''); 
	  }
	}

	////////////////////////////////////////////////////////////////////////////////
	// USEFUL UTILITIES
	////////////////////////////////////////////////////////////////////////////////

	//I am some cool shorthand for returning "obj", "array", "string", etc as needed.
	//I do not differentiate between different objs (as instanceof does) just different types.
	GLOBAL.gettype = function(obj, type){
	    return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
	}

	//given a value and a type, use the constructor to determine if it's that type.
	GLOBAL.typed = function(obj, type){
	    return obj && obj.constructor === type;
	}

	//INTENT: I will return a list of keys from an obj or obj
	GLOBAL.getkeys = function(dict){
	    var keys = new Array;
	    try{
	        for(var o in dict)
	            keys.push(o);
	    }catch(err){
	        return ["BAD KEY IN GETKEYS"];
	    }   
	    
	    return keys;
	}

	//INTENT: take a comma sep list and return an array
	GLOBAL.stringToList = function(buf, delim){
	    //if no delim given use ','
	    if(delim === undefined) 
	        delim = ",";

	    if(!buf) return [];
	    var output = [];
	    var comma_sep_list = String(buf).split(delim);

	    while(comma_sep_list.length){
	        //detect and skip empty segments
	        var entry = comma_sep_list.shift().trim();
	        if(entry)   
	            output.push(entry);
	    }

	    return output;
	}

	//INTENT: return a listing of all attribute on an object - debugging.
	//this has been enhanced to recurse one level deep, so that the attributes of the dir(x) object
	//are also listed. nice.
	GLOBAL.dir = function(obj, dontexpand){
	    //make header
	    var output = "";

	    if(dontexpand === undefined){
	        output += "Repr: "+obj+"\n";
	    
	        if(!(obj instanceof Array)){
	            output += "\nAttributes: ";
	            for(var key in obj)
	                output += key+", ";
	            output += "\n";
	        }
	        
	        output += "\nContents:\n";   
	    }

	    if(obj instanceof Array && obj.length == 0)
	        output += "(previous is empty array)\n";
	    
	    else if(obj instanceof Array)
	        for(var i = 0; i < obj.length ; i ++){
	            var val = obj[i] == 'function' ? "[FUNCTION]" : obj[i];
	        
	            //we may not be able to coerce to value. say so when that exception happens.
	            try{
	                val = (typed(val, String) && val.length > 50) ? (val.substr(0, 50).replace('\n', '') + " [...]") : val;
	                output += (dontexpand!==undefined ? "        " : "") + i + ') = ' + val + "\n";
	            }catch(err){
	                output += (dontexpand!==undefined ? "        " : "") + i + ') = (cant convert)\n';
	            }
	        
	            if(dontexpand === undefined)
	                if(obj[i] instanceof Array || obj[i] instanceof Object) 
	                    output += dir(obj[i], true);
	        }
	  
	    else if(obj instanceof Object && getkeys(obj).length == 0)
	        output += "(previous is empty dictionary)\n";
	  
	    else if(obj instanceof Object)
	        for(var key in obj){
	            var val = typed(obj[key], Function) ? "[FUNCTION]" : obj[key];
	        
	            //we may not be able to coerce to value. say so when that exception happens.
	            try{
	                val = (typed(val, String) && val.length > 50) ? (val.substr(0, 50).replace('\n', '') + " [...]") : val;
	                output += (dontexpand!==undefined ? "        " : "") + key + ' = ' + val + "\n";
	            }catch(err){
	                output += (dontexpand!==undefined ? "        " : "") + key + ' = (cant convert)\n';
	            }    
	        
	            if(dontexpand === undefined || key == 'obj')
	                if(obj[key] instanceof Array || obj[key] instanceof Object || key == 'obj') 
	                    output += dir(obj[key], true);
	        }

	    else
	        output += "...is of type " + gettype(obj).toUpperCase();
	    
	    return output;
	}

	//INTENT: to do simple logic in jquery templates
	GLOBAL.iftest = function(what, t, f){
	    return what ? t : f;
	};

	GLOBAL.lessthan = function(a, b){
	    return a < b;
	};

	GLOBAL.greaterthan = function(a, b){
	    return a > b;
	};

	/* do a shallow copy of something */
	GLOBAL.copy = function(source, dest){
	    if(!source)
	        return dest; 
	    
	    if(typed(source, String))
	        return String(source);
	    
	    if(typed(source, Number))
	        return Number(source);

	    if(dest === undefined)
	        dest = source instanceof Array ? [] : {};
	    
	    if(source instanceof Array){
	        for(var i = 0; i < source.length ; i ++)
	            dest[i] = source[i];
	    }

	    else if(source instanceof Object){
	        for(var key in source)
	            dest[key] = source[key];
	    }
	    
	    return dest;
	};

	/* I am a way in which any type of json object (str, num, dict, array) will be 
	   returned as a deep copy. this is preferable to putting a .copy method on Object
	   although Array.copy does exist), and so is quite convienent. */
	GLOBAL.deepcopy = function(source, dest, exclude){
	    if(!(exclude instanceof Array))
	        exclude = [exclude];

	    if(typed(source, String))
	        return String(source);
	    
	    if(typed(source, Number))
	        return Number(source);

	    if(dest === undefined)
	        dest = source instanceof Array ? [] : {};

	    var tmpspace = {};

	    for(var i = 0; i != exclude.length; i ++)
	        if(source[exclude[i]]){
	            tmpspace[exclude[i]] = source[exclude[i]];
	            source[exclude[i]] = undefined;
	        }

	    var thecopy = $.extend(true, dest, source);

	    for(var key in tmpspace){
	        source[key] = tmpspace[key];
	        thecopy[key] = tmpspace[key];
	    }

	    return thecopy;
	};

	//this will call deepcopy such that it wont deepcopy self,
	//and is smart enough to copy the data from an element if passed
	//to return a deepcopy of its data.
	GLOBAL.deepcopyitem = function(source, dest){
	    return deepcopy(source, dest, 'self');
	};

	//INTENT: shorthand to copy values from one dict onto a second, if it doesn't already exist.
	GLOBAL.safecopy = function(source, dest){
	    if(dest === undefined)
	        dest = {};
	    
	    if(source)
	        for(var key in source)
	            if(!dest[key])
	                dest[key] = source[key];
	    return dest;
	};

	GLOBAL.elementcopy_non_safe_attrs = ['class', "style", 'xmlns', "__listeners__", "__listening__"];

	//INTENT: shorthand to copy values from one dict onto a second except those that are 
	//illegal (security exception) for an html element to have altered
	GLOBAL.elementcopy = function(source, dest){
	    if(dest === undefined)
	        dest = {};
	    
	    if(source)
	        for(var key in source)
	            if(elementcopy_non_safe_attrs.indexOf(key) === -1)
	                dest[key] = source[key];
	        
	    return dest;
	}

	/* this just tests objects for value equality */
	GLOBAL.valuesAreEqual = function(a, b){
	    for(p in a)
	        if(typeof(b[p])=='undefined')
	            return false;

	    for(p in a) {
	        if (a[p]) {
	            switch(typeof(a[p])) {
	                case 'object':
	                    if (!a[p].equals(b[p])) { return false; } break;
	                case 'function':
	                    if (typeof(b[p])=='undefined' ||
	                        (p != 'equals' && a[p].toString() != b[p].toString()))
	                        return false;
	                    break;
	                default:
	                    if (a[p] != b[p]) { return false; }
	            }
	        }
	    
	        else
	            if (b[p])
	                return false;
	    }

	    for(p in b)
	        if(typeof(a[p])=='undefined')
	            return false;

	    return true;
	}

	GLOBAL.getTextFromFirstChild = function(el){
	    var result;
	    $(el).contents().each(function(){
	        if(result = $.trim($(this).text()))
	            return false;
	    });
	    return result;
	}

	/* INTENT: return a name representing the passed object, checking for and 
	choosing the best way as possible */
	GLOBAL.debuggingId = function(buf){
	    if(buf === undefined)
	        return "UNDEFINED.";

	    /* if it's a string, then it's a selector still, deal with it. */
	    buf = $(buf);

	    
	    if(buf.attr('id')) 
	        return 'ID: '+buf['id'];
	    
	    if(buf.attr('name')) 
	        return 'NAME: '+buf['name'];
	    
	    if(buf[0] && buf[0].isHypertag){
	        if(buf[0].template) 
	            return 'USING TEMPLATE: '+buf[0].template;
	    }

	    /* if nothing else, return  */
	    return "HTML: "+buf.html();
	};

	GLOBAL.encode_utf8 = function(s){
	    return unescape(encodeURIComponent(s));
	}

	GLOBAL.decode_utf8 = function(s){
	    return decodeURIComponent(escape(s));
	}

	/* INTENT: abstract the JSHINT mechanism to check dictionaries, as is the format for code in hypertag applications */
	GLOBAL.checkDictionaryForErrors = function(text_to_eval, allowSlashComments){
	    text_to_eval = "var the_dict_to_test = "+text_to_eval+";";

	    /* As a first step, if there are any double-slash comments, with any preceding whitespace, report that we can't use double-slash comments, but must use slash-star comments in all hypertag text */
	    if(!allowSlashComments && text_to_eval.match(/\s+\/\//g))
	        throw "You cannot use // style comments in hypertag code blocks! You must use slash-star style comments, as a side effect of the HTML DOM parser. (DOMParser iteself does allow // but a rule was indicated.) \n\nIn the code block:\n\n"+text_to_eval;
	    
	    /* Now run the code block through JSHINT: */
	    var result = JSHINT(text_to_eval, {debug:true, sub:true, loopfunc:true, multistr:true, laxcomma:false, shadow:true, onevar:false, evil:true, expr:true, funcscope:false});

	    /* if the result is false this logic will assemble an error report: */
	    if(!result){
	        var error_message = "";
	        var error = JSHINT.errors[0];
	        error_message += error.reason + ', line ' + error.line + ', char ' + error.character + "\n";
	    
	        /* show the area around the error: */
	        if(error.character > 80)
	            error_message += "\n\nThe error occurred around: \n\n"+text_to_eval.slice(Math.max(0, error.character-40), Math.min(text_to_eval.length, error.character+40));//+"\n\nAnd the full listing is: \n\n";
	    
	        /* convert whatever block of code there is into the same code with line numbers. WARNING can throw off character counts if you have only one long line (like this one:) */
	        //var text_block_with_line_numbers = "";
	        //var text_block_split_up = text_to_eval.slice(23).split("\n");
	        //for(var i = 0; i < text_block_split_up.length ; i ++)
	        //    text_block_with_line_numbers += (i+1)+": "+text_block_split_up[i] + "\n";
	        //
	        //error_message += text_block_with_line_numbers;
	    
	        return error_message;
	    }

	    return false;
	}

	/* Post requests and json were problematic. I had at first tried to send the 
	   json object back whole, but that didn't work. The solution is to divide a 
	   JSON dict into it's constituent keys, use those keys when contructing the 
	   request, and have the value of each key be the json value of that key. 

	This is then reconstructed, on the server, to get the originally sent dict passed to this method. 
	*/
	GLOBAL.post = function(options){

	    var url = options.url;
	    var data = options.data;
	    var membership = options.membership;
	    var success = options.success;
	    var error = options.error;
	    var async = options.async || false;
	    var preprocess_success = options.preprocess_success;

	    success = success !== undefined ? success : function(){};

	    //make sure data is a list
	    if(!(data instanceof Array))
	        data = [data];

	    //The important part - split the data up into the top level dictionaries, each who's keys are
	    //converted to json then back again.
	    var json_payload = {'objs':[]};

	    for(var i = 0; i < data.length ; i ++){
	        var entry = {};
	        for(var key in data[i])
	            entry[key] = JSON.stringify(data[i][key]);
	        json_payload['objs'].push(entry);
	    }

	    //INTENT: what to do when a request succeeds! 
	    var successwrapper = function(data, status){
	        //normal process of dealing with information from the server on success
	    
	        if(data['error'] || !data){
	            alert(data['error']);
	            if(error)
	                error(data);
	            return true;
	        }
	    
	        //if a preprocess_success function was given, run it and use the returned result as the data to use.
	        //if the preprocess_success function returns false, dont do anything else.
	        if(preprocess_success){
	            data = preprocess_success(data, status);
	            if(!data) return false;
	        }
	    
	        //success!!
	        if(success)
	            success(data['objs'] || data, status);
	    
	        //... and a message? If so, display it after the logic for the return values
	        //presuming that its much less then the time 
	        if(data['msg'])
	            alert(data['msg']);
	    
	        return true;
	    }
	    
	    //INTENT: when complete, if in error, tell the user.
	    var completewrapper = function(xhr){
	    
	        //no response? bail.
	        if(xhr['status'] != 200 && !xhr['responseText']){
	            //alert("There was no response from the server when contacting the url "+url+". The server might be down or unreachable. Are you sure you have internet access?");
	            if(error)
	                error(url, data);
	            return false;
	        }
	    
	        return true;
	    };

	    if(url.slice(0, 2) == '//')
	        membership = getServerFromURL(url);

	    else if(Hypertag.Trust && !membership && url.slice(0, 1) == '/')
	        membership = Hypertag.Trust.default_membership;

	    if(GLOBAL.fat && membership){
	        /* if the url starts with // then we know the first part is a domain */
	    
	        /* we now know we have a fully qualified domain .. which we can then extract
	           the domain from (via regex) and lookup and replace-in-place the first
	           alias corresponding to that domain, if any. if no alias, just use whatever
	           domain was offered. */

	        /* what are we checking to see if we have a memebership or mount for, to derive the actual server to hit */
	        var membership_data = false;

	        /* if we have data set what they gave as the server to the membership to use and replace that name with the real server url */
	        if(fat.exists('/Network/memberships/'+membership+'.membership'))
	            membership_data = fat.read('/Network/memberships/'+membership+'.membership');
	        
	        else if(fat.exists('/Network/memberships/'+membership+'.server'))
	            membership_data = fat.read('/Network/memberships/'+membership+'.server');

	        else if(fat.exists('/Network/mounts/'+membership+'.mount')){
	            mount_data = fat.read('/Network/mounts/'+membership+'.mount');
	            membership_data = fat.read('/Network/memberships/'+mount_data.membership+'.membership');
	        }
	    
	        if(membership_data)
	            url = "//"+membership_data.servers[0]+url;
	    } 
	    try{
	        //INTENT: now that our data is all setup, make the actual (possibly cross server) request
	        return $.ajax({
	            url:encodeURI(url),
	            type:'POST',
	            cache:false,
	            data:json_payload,
	            dataType:'json',
	            async:async, /* async , while in a normal web page decreasing load time, imposes callback patterns with programming that are generally not worth it. */
	            success:successwrapper,
	            /*complete:completewrapper,*/
	            error:function(){
	                if(error) error(url);
	            }
	        });
	    }

	    catch(err){
	        console.error("post() failed to load "+url+". Error was "+String(err));
	        if(error)
	            error(url);
	        return false;
	    }
	}

	//INTENT: make it easier to measure and change css pixel values
	GLOBAL.returnCSSWidthOfElementAsInt = function(element){
	    var amount_text = $(element).css('width');
	    return parseInt(amount_text.substr(0, amount_text.length-2));
	}

	/* 
	    Base64: pulled from a stackoverflow.com post, with updates were by others, here merged.
	 */
	GLOBAL.Base64 = {
	    // private property
	    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	    // public method for encoding
	    encode : function (input) {
	        var output = "";
	        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	        var i = 0;

	        input = Base64._utf8_encode(input);

	        while (i < input.length) {

	            chr1 = input.charCodeAt(i++);
	            chr2 = input.charCodeAt(i++);
	            chr3 = input.charCodeAt(i++);

	            enc1 = chr1 >> 2;
	            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	            enc4 = chr3 & 63;

	            if (isNaN(chr2)) {
	                enc3 = enc4 = 64;
	            } else if (isNaN(chr3)) {
	                enc4 = 64;
	            }

	            output = output +
	            Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) +
	            Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);

	        }

	        return output;
	    },

	    // public method for decoding
	    decode : function (input) {
	        var output = "";
	        var chr1, chr2, chr3;
	        var enc1, enc2, enc3, enc4;
	        var i = 0;

	        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

	        while (i < input.length) {

	            enc1 = Base64._keyStr.indexOf(input.charAt(i++));
	            enc2 = Base64._keyStr.indexOf(input.charAt(i++));
	            enc3 = Base64._keyStr.indexOf(input.charAt(i++));
	            enc4 = Base64._keyStr.indexOf(input.charAt(i++));

	            chr1 = (enc1 << 2) | (enc2 >> 4);
	            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	            chr3 = ((enc3 & 3) << 6) | enc4;

	            output = output + String.fromCharCode(chr1);

	            if (enc3 != 64) {
	                output = output + String.fromCharCode(chr2);
	            }
	            if (enc4 != 64) {
	                output = output + String.fromCharCode(chr3);
	            }

	        }

	        output = Base64._utf8_decode(output);

	        return output;

	    },

	    // private method for UTF-8 encoding
	    _utf8_encode : function (string) {
	        string = string.replace(/\r\n/g,"\n");
	        var utftext = "";

	        for (var n = 0; n < string.length; n++) {

	            var c = string.charCodeAt(n);

	            if (c < 128) {
	                utftext += String.fromCharCode(c);
	            }
	            else if((c > 127) && (c < 2048)) {
	                utftext += String.fromCharCode((c >> 6) | 192);
	                utftext += String.fromCharCode((c & 63) | 128);
	            }
	            else {
	                utftext += String.fromCharCode((c >> 12) | 224);
	                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
	                utftext += String.fromCharCode((c & 63) | 128);
	            }

	        }

	        return utftext;
	    },

	    // private method for UTF-8 decoding
	    _utf8_decode : function (utftext) {
	        var string = "";
	        var i = 0;
	        var c = 0, c1 = 0, c2 = 0;

	        while ( i < utftext.length ) {

	            c = utftext.charCodeAt(i);

	            if (c < 128) {
	                string += String.fromCharCode(c);
	                i++;
	            }
	            else if((c > 191) && (c < 224)) {
	                c1 = utftext.charCodeAt(i+1);
	                string += String.fromCharCode(((c & 31) << 6) | (c1 & 63));
	                i += 2;
	            }
	            else {
	                c1 = utftext.charCodeAt(i+1);
	                c2 = utftext.charCodeAt(i+2);
	                string += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));
	                i += 3;
	            }

	        }
	        return string;
	    }
	}

	/**
	*
	*  MD5 (Message-Digest Algorithm)
	*  http://www.webtoolkit.info/
	*
	**/

	GLOBAL.MD5 = function (string) {

		function RotateLeft(lValue, iShiftBits) {
			return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
		}

		function AddUnsigned(lX,lY) {
			var lX4,lY4,lX8,lY8,lResult;
			lX8 = (lX & 0x80000000); lY8 = (lY & 0x80000000); lX4 = (lX & 0x40000000); lY4 = (lY & 0x40000000);
			lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
			if (lX4 & lY4) {
				return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
			}
			if (lX4 | lY4) {
				if (lResult & 0x40000000) {
					return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
				} else {
					return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
				}
			} else {
				return (lResult ^ lX8 ^ lY8);
			}
	 	}

	 	function F(x,y,z) { return (x & y) | ((~x) & z); }
	 	function G(x,y,z) { return (x & z) | (y & (~z)); }
	 	function H(x,y,z) { return (x ^ y ^ z); }
		function I(x,y,z) { return (y ^ (x | (~z))); }

		function FF(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

		function GG(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

		function HH(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

		function II(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

		function ConvertToWordArray(string) {
			var lWordCount;
			var lMessageLength = string.length;
			var lNumberOfWords_temp1=lMessageLength + 8;
			var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
			var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
			var lWordArray=Array(lNumberOfWords-1);
			var lBytePosition = 0;
			var lByteCount = 0;
			while ( lByteCount < lMessageLength ) {
				lWordCount = (lByteCount-(lByteCount % 4))/4;
				lBytePosition = (lByteCount % 4)*8;
				lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
				lByteCount++;
			}
			lWordCount = (lByteCount-(lByteCount % 4))/4;
			lBytePosition = (lByteCount % 4)*8;
			lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
			lWordArray[lNumberOfWords-2] = lMessageLength<<3;
			lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
			return lWordArray;
		};

		function WordToHex(lValue) {
			var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
			for (lCount = 0;lCount<=3;lCount++) {
				lByte = (lValue>>>(lCount*8)) & 255;
				WordToHexValue_temp = "0" + lByte.toString(16);
				WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
			}
			return WordToHexValue;
		};

		function Utf8Encode(string) {
			string = string.replace(/\r\n/g,"\n");
			var utftext = "";

			for (var n = 0; n < string.length; n++) {

				var c = string.charCodeAt(n);

				if (c < 128) {
					utftext += String.fromCharCode(c);
				}
				else if((c > 127) && (c < 2048)) {
					utftext += String.fromCharCode((c >> 6) | 192);
					utftext += String.fromCharCode((c & 63) | 128);
				}
				else {
					utftext += String.fromCharCode((c >> 12) | 224);
					utftext += String.fromCharCode(((c >> 6) & 63) | 128);
					utftext += String.fromCharCode((c & 63) | 128);
				}

			}

			return utftext;
		};

		var x=Array();
		var k,AA,BB,CC,DD,a,b,c,d;
		var S11=7, S12=12, S13=17, S14=22;
		var S21=5, S22=9 , S23=14, S24=20;
		var S31=4, S32=11, S33=16, S34=23;
		var S41=6, S42=10, S43=15, S44=21;

		string = Utf8Encode(string);

		x = ConvertToWordArray(string);

		a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

		for (k=0;k<x.length;k+=16) {
			AA=a; BB=b; CC=c; DD=d;
			a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
			d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
			c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
			b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
			a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
			d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
			c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
			b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
			a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
			d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
			c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
			b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
			a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
			d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
			c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
			b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
			a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
			d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
			c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
			b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
			a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
			d=GG(d,a,b,c,x[k+10],S22,0x2441453);
			c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
			b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
			a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
			d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
			c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
			b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
			a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
			d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
			c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
			b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
			a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
			d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
			c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
			b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
			a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
			d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
			c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
			b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
			a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
			d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
			c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
			b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
			a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
			d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
			c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
			b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
			a=II(a,b,c,d,x[k+0], S41,0xF4292244);
			d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
			c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
			b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
			a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
			d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
			c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
			b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
			a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
			d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
			c=II(c,d,a,b,x[k+6], S43,0xA3014314);
			b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
			a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
			d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
			c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
			b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
			a=AddUnsigned(a,AA);
			b=AddUnsigned(b,BB);
			c=AddUnsigned(c,CC);
			d=AddUnsigned(d,DD);
		}

		var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

		return temp.toLowerCase();
	}

	//INTENT: Poor man's simulcrum of the range method in python, although used so narrowly here,
	//that I doubt I need improve it.
	//NOTE: you can merely write (x) instead of (0, x) as a conviencnce, but ONLY if you dont use yield.
	//i.e. range(3) = [0,1,2] and range(3,5) = [3, 4], etc.
	//the 'yield' just runs a method that takes i, cool i guess.
	GLOBAL.range = function(start, stop, yield){
	    //if they didn't give a stop and yield, assume it's actually range(0,x);
	    if(stop == undefined){
	        stop = start;
	        start = 0;
	    }

	    //alternate code paths to eliminate extra test for yield each iter.
	    if(yield)
	        for(var buf = [], i = start; i < stop; i ++)
	            buf.push(yield(i));
	    else
	        for(var buf = [], i = start; i < stop; i ++)
	            buf.push(i);

	    return buf;
	};

	/* simply sort for numbers, as opposed to the default alphabetical sort */
	GLOBAL.numericalSort = function(a, b){
	    a = parseInt(a); b = parseInt(b);
	    if(a < b) return -1;
	    else if(a == b) return 0;
	    else if(a > b) return 1;
	};

	//INTENT: return a copy of a list, of dictionaries, sorted by a given key and order.
	Array.prototype.sortByKey = function(key, extract, sortfunc){
	    var key_value_and_object_pairs = [];
	    for(var i = 0; i != this.length ; i ++)
	        key_value_and_object_pairs.push([this[i][key], this[i]]);
	    
	    key_value_and_object_pairs = key_value_and_object_pairs.sort(sortfunc);

	    var output = [];

	    if(extract === undefined)
	        for(var i = 0; i != key_value_and_object_pairs.length ; i ++)
	            output.push(key_value_and_object_pairs[i][1]);
	    else
	        for(var i = 0; i != key_value_and_object_pairs.length ; i ++)
	            output.push(key_value_and_object_pairs[i][1][extract]);
	    
	    return output;
	};

	//add any items in withwhat to the list
	if(!Array.prototype.extend){
	    Array.prototype.extend = function(withwhat){
	        for(var i = 0; i < withwhat.length ; i ++)
	            this.push(withwhat[i]);
	        return this;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.extend already defined!");
	}

	if(!Array.prototype.replaceWith){
	    Array.prototype.replaceWith = function(withwhat){
	        for(var k in this)
	            this.pop();
	        this.extend(withwhat);
	        return this;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.replaceWith already defined!");
	}


	//will remove any items that appear in removefromlist and return the list.
	if(!Array.prototype.omit){
	    Array.prototype.omit = function(removefromlist){
	    
	        if(!(removefromlist instanceof Array))
	            removefromlist = [removefromlist];
	    
	        for(var i = this.length-1; i != -1 ; i --)
	            if(removefromlist.indexOf(this[i]) !== -1)
	                this.remove(i);
	        
	        return this;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.omit already defined!")
	}

	/* will, if every entry is a string, return each string that ends with the 1st arg */
	if(!Array.prototype.endswith){
	    Array.prototype.endswith = function(what){
	        if(!what)
	            return this;
	        
	        var filtered = [];
	        for(var i = 0; i < this.length ; i ++)
	            if(typed(this[i], String) && this[i].endswith(what))
	                filtered.push(this[i]);
	            
	        return filtered;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.endswith already defined!")
	}

	/* will, if every entry is a string, return each string that starts with the 1st arg */
	if(!Array.prototype.startswith){
	    Array.prototype.startswith = function(what){
	        var filtered = [];
	        for(var i = 0; i < this.length ; i ++)
	            if(typed(this[i], String) && this[i].startswith(what))
	                filtered.push(this[i]);
	            
	        return filtered;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.startswith already defined!")
	}

	// This is a way to schedule the contents of the list for proessing item by 
	// item utilizing setTimeout to spread the work out. I hope the args are clear;

	// operation(items, i) is the function that runs each item. return value undefined
	// leaves item unchanged, returning anything else sets it

	// progress(items, i) is the function that runs each item, to for example update UI
	// to reflect status. returning false will cause the "thread" to stop.

	// complete(items, i) is the function that runs once at the end, to signify
	// completion of the thread. return value is discarded.

	// Example:

	    // [1, 2, 3, 4, 5, 6, 7, 8].thread(function(item, i){
	    //     return item*i;
	    // }, function(items, i){
	    //     console.log("processing item", i, "is", items[i])
	    // }, function(items, i){
	    //     console.log("finished processing "+i+" items:", items);
	    // }, 600);

	Array.prototype.thread = function(operation, progress, complete, interval){
	    //these variables are referenced by operation_method via closure.
	    var items = this;
	    var interval = interval || 10;

	    //this will run for each item in the list to operate on. It calls itself via setTimeout.
	    var operation_method = function(idx){
	        //perform the operation for this round, and assign result, if any, back to the item
	        var result = operation(items[idx], idx);
	        items[idx] = result === undefined ? items[idx] : result;
	        ++ idx;
	                
	        //if idx is equal to the string's length
	        if(idx == items.length)
	            return complete(items, idx);
	        
	        //if progress returns false, stop further processing
	        if(progress && progress(items, idx) === false)
	            return;
	        
	        //scheule next loop. IDX is explicitly passed, as
	        setTimeout(operation_method, interval, idx);
	    }

	    //the first setTimeout to start off the processing.
	    setTimeout(operation_method, interval, 0);

	    //return this to faciliate chaining.
	    return this;
	}

	if(!String.prototype.removeEnding){
	    String.prototype.removeEnding = function(what){
	        if(this.endswith(what))
	            return this.slice(0, -what.length);
	        return this;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.endswith already defined!")
	}

	if(!String.prototype.count){
	    String.prototype.count = function(substr){
	        var num, pos;
	        num = pos = 0;
	    
	        if(!this.length) 
	            return 0;
	        
	        while(pos = 1 + this.indexOf(substr, pos))
	            num ++;
	        
	        return num;
	    };
	}else{
	    Hypertag.Debugger.warning("String.count already defined!")
	}

	if(!Array.prototype.sorted){
	    Array.prototype.sorted = function(withFunction){
	        this.sort(withFunction);
	        return this;
	    }
	}else{
	    Hypertag.Debugger.warning("Array.startswith already defined!")
	}

	/* INTENT: return an element as an object for per-attribute printing instead of xml, in console.log methods */
	GLOBAL.elemToDict = function(obj){
	    var output = {}
	    for(var key in obj)
	        output[key] = obj[key];
	    return output;
	}

	/* this is for variable replacment in HTML that doesn't like %... */
	GLOBAL.mod = function(a, b){
	    return a % b;
	}

	/* thanks stackoverflow: http://stackoverflow.com/questions/811195/fast-open-source-checksum-for-small-strings */
	GLOBAL.checksum = function(s){
	  var i;
	  var chk = 0x12345678;

	  for(i = 0; i < s.length; i++)
	      chk += (s.charCodeAt(i) * i);

	  return chk;
	}

	/* this takes a dict and returns a list of (sorted) key-value pairs. */
	GLOBAL.dictToList = function(d){
	    var output = [];

	    for(var key in d)
	        output.push([key, {key:key, value:d[key]}]);
	    output.sort();

	    var final_output = [];
	    for(var i = 0; i < output.length ; i ++)
	        final_output.push(output[i][1]);
	    
	    return final_output;
	}

	//cross platform abstraction
	GLOBAL.stopEvent = function(e) {
	    stopPropagation(e);
	    preventDefault(e);
	    return false;
	};

	//cross platform abstraction
	GLOBAL.stopPropagation = function(e) {
	    if (e.stopPropagation)
	        e.stopPropagation();
	    else
	        e.cancelBubble = true;
	};

	//cross platform abstraction
	GLOBAL.preventDefault = function(e) {
	    if (e.preventDefault)
	        e.preventDefault();
	    else
	        e.returnValue = false;
	};

	/* I know that using jquery to bind to scroll wheel AND the second 
	   raw method here seem redundant, but the final effect is that 
	   with both, the contents update while scrolling while just with 
	   .scroll(), it only refreshes on mouseup */
	GLOBAL.onscroll = function(element, fun){
	    $(element).scroll(fun);

	    if(element.addEventListener){
	        element.addEventListener('DOMMouseScroll', fun, false);
	        element.addEventListener('mousewheel', fun, false); /* Chrome */
	    }
	    else
	        element.onmousewheel = fun;
	};

	/* thank http://www.htmlgoodies.com/html5/javascript/drag-files-into-the-browser-from-the-desktop-HTML5.html#fbid=EyQyq-bbvmU */
	GLOBAL.addEventHandler = function(obj, evt, handler, order) {
	    if(obj.addEventListener) {
	        // W3C method
	        obj.addEventListener(evt, handler, order || false);
	    } else if(obj.attachEvent) {
	        // IE method.
	        obj.attachEvent('on'+evt, handler);
	    } else {
	        // Old school method.
	        obj['on'+evt] = handler;
	    }
	};

	/* thanks stackoverflow: http://stackoverflow.com/questions/3407012/c-rounding-up-to-the-nearest-multiple-of-a-number */
	GLOBAL.round_up = function(num, factor){
	    return (num + factor - 1 - (num - 1) % factor) - factor; 
	};

	GLOBAL.openAnimation = function(item, after, duration){
	    if(!duration)
	        duration = 300;

	    //jitem.scale(2.5).css('opacity', 0).rotate('8deg');

	    $(item).animate({
	        scale:1.5, opacity:0.3, rotate:"8deg"
	    }, (duration/3)*2);

	    $(item).animate({
	        scale:1, opacity:1, rotate:"0deg"
	    }, duration/3-10);

	    setTimeout(function(){
	        after();
	    }, duration+10);   
	}

	/* parse a query string, minus the leading '?', that also decodes each entry, to return a dict of key/values
	   string as a friendly dict (leave out first '?' if using manually)*/
	GLOBAL.parseQueryString = function(query_string_text){
	    var urlParams = {};
	    var add_char_rgx = /\+/g; // Regex for replacing addition symbol with a space
	    var param_split_rgx = /([^&=]+)=?([^&]*)/g;

	    var decodeParam = function(buf){
	        return decodeURIComponent(
	            buf.replace(add_char_rgx, " ")
	        ); 
	    };

	    var results;
	    while(results = param_split_rgx.exec(query_string_text))
	        urlParams[decodeParam(results[1])] = decodeParam(results[2]);

	    return urlParams;
	}

	/* INTENT:extract the server from any given url */
	GLOBAL.getServerFromURL = function(url) {
	   return url.match(/\/\/(.[^/]+)/)[1];
	};

	/* convienence: given three parts a, b, and c, return a path such that you get /a/b.c  for makepath('/a', 'b', 'c'), or with the extension disabled if not given */
	GLOBAL.makepath = function(folder, file, extension){
	    return extension ? 
	        folder+"/"+file : 
	        folder+"/"+file+"."+extension;
	}

	/* we often wish to use angle brackets in javascript that's also inside a tag. these constants helps with that. */
	GLOBAL.lt = String.fromCharCode(60), gt = String.fromCharCode(62);

	//simple method to test if dict is empty efficiently.
	GLOBAL.haskeys = function(obj){
	    for(var i in obj)
	        return true;
	    return false;
	};

	GLOBAL.urlEncode = function(url) {
	    return encodeURIComponent(url)
	        .replace(/!/g, '%21')
	        .replace(/'/g, '%27')
	        .replace(/\(/g, '%28')
	        .replace(/\)/g, '%29')
	        .replace(/\*/g, '%2A');
	};

	//basic func i brought in to deal with S3 - still using jquery cept for that, but hey
	GLOBAL.getXmlHttpObject = function(){
	    var xmlHttp = null;

	    try {
	        // Firefox, Opera 8.0+, Safari, IE 7+
	        xmlHttp = new XMLHttpRequest();
	    }catch (e) {
	        // Internet Explorer - old IE - prior to version 7
	        try {
	            xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
	        }catch (e) {
	            xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
	        }
	    }

	    return xmlHttp;
	}

	// SHML, author, James Robey, jrobey.services@gmail.com
	// these are the symbols that define start and stop of comments for the method skipLineIfInCommentBlock

	GLOBAL.SHMLClass = function(indent_amt){
	    var self = this;

	    //How many spaces to a tab?this is autodetected along the way by looking at the first indent difference.
	    self.indent_amt = indent_amt !== undefined ? indent_amt : 4;

	    //constants for comparison when skipping over comments
	    self.html_comment_open_symbol = "<!--";
	    self.html_comment_close_symbol = "-->";
	    self.js_comment_open_symbol = "/*";
	    self.js_comment_close_symbol = "*/";
	    self.js_comment_line_symbol = "//";

	    return self;
	};

	//algorithm to process a template tag that may optionally invoke SHML processing
	//by including an initial HTML comment containing only "dialect shml" or "markup shml" (which was
	//selected to concur with how it's done in Hypertrust)
	SHMLClass.prototype.processTemplateText = function(templatetext){
	    if(templatetext.trim().indexOf("<!--") === 0){
	        var end_of_directive_idx = templatetext.indexOf("-->");

	        var comment_content = templatetext.slice(templatetext.indexOf("<!--")+4, end_of_directive_idx-1).trim().toLowerCase();

	        if(comment_content == "markup shml" || comment_content == "dialect shml"  )
	            return this.process(templatetext).replace("&amp;", "&");
	        
	        else
	            return templatetext;
	    }

	    else
	        return templatetext;
	};

	SHMLClass.prototype.process = function(buf, autodetect_indent_amt){
	    // I will take a string [of shml] and turn it into html, such that 
	    // its an XML compliant document, with all the comments removed.
	    // The autodetect_indent_amt feature will use the first
	    // two non-blank lines in the document with an indent difference
	    // to determine what the overall indenting of the document is
	    // Otherwise you can pass false and set self.indent_amt yourself
	    // before running this method. 

	    var self = this;

	    if(autodetect_indent_amt === undefined)
	        autodetect_indent_amt = true;

	    //this processor works on whole lines, not characters.
	    self.lines = buf.split("\n");

	    //if they ask, find out the indent of the document for them
	    if(autodetect_indent_amt)
	        self.indent_amt = self.detectIndent(self.lines);

	    //state for the comment detector - this will go up as comments open 
	    //and down as they close for the respective type of comment,
	    //such that finding one type will cause the other to be ignored 
	    //until that opened tag is closed again.
	    self.html_comments_open = 0;
	    self.js_comments_open = 0;

	    //each call to recursiveProcessor will process one top level element, 
	    //leaving any more unprocessed. Since the recursiveProcessor will 
	    //eat up blank lines, the solution is to call the recursiveProcessor
	    //repeatedly, until there are no more lines to process.
	    var output = [];
	    while(self.lines.length !== 0){
	        output.push('\n');
	        output.extend(self.recursiveProcessor());
	    }

	    //return the output as accumulated, rejoined into a string, as the final result
	    //console.log("SHML out\n\n", output.join("\n"), "\n\n");
	    return output.join("\n");
	};

	// Given some text broken up by new line into an array, 
	// i'll look for the indent of the first non-blank line,
	// and then the second, returning the difference.   
	SHMLClass.prototype.detectIndent = function(lines){
	    var self = this;

	    var first_indent = false;

	    for(var i = 0; i < lines.length ; i ++){
	        var line = String(lines[i]);

	        if(line.trim().length === 0) 
	            continue;
	    
	        indent = line.length - line.ltrim().length;

	        //first non-blank line
	        if(first_indent === false){
	            first_indent = indent;
	            continue;
	        }

	        //if indent of current line is bigger then our first indent we're good
	        else if(indent > first_indent)
	            return indent - first_indent;
	    }

	    //If we are here then there was only one indent, or no indent, supply default
	    return 4;
	};

	//given a number of spaces to make, return a string of empty spaces to be used to indent tags
	SHMLClass.prototype.makeIndent = function(amt){
	    buf = [];
	    while(buf.length < amt)
	        buf.push(' ')
	    return buf.join('');
	};

	// I will operate on lines such that myself and any lines greater 
	// indent then me will be handled by me. I will change myself 
	// into an open tag, with optional attributes (or optional text),
	// and change everything inside of me into text.. except 
	// that when i find another node i.e line starting with '>',
	// i will invoke myself on that. As I go, I (or my child) will
	// delete from the top of passed in lines variable sharing the 
	// same reference, so that as my child processes, it gets 
	// rid of input and accumulates output, and it all works 
	// out in the end to expand the SHML syntax as designed!

	SHMLClass.prototype._selfClosingTags = {
	    area: true, base: true, basefont: true,
	    br: true, col: true, frame: true, hr: true, 
	    img: true, input: true, isindex: true, 
	    link: true, meta: true, param: true
	};

	SHMLClass.prototype.recursiveProcessor = function(base_indent, base_actual_indent){
	    var self = this;

	    if(base_indent === undefined)
	        base_indent = 0;

	    if(base_actual_indent === undefined)
	        base_actual_indent = -1;

	    //while loop state variables
	    var output = [];
	    var still_searching_for_base_indent = true;
	    var tagname, attr, text;
	    var current_indent = base_indent;

	    while(1){
	        //if we run out of lines (our ending condition) but are still 
	        //in an open tag (i.e. not still searching for a base indent), 
	        //flush out the final close tag.
	        if(self.lines.length === 0){
	            if(!still_searching_for_base_indent && !self._selfClosingTags[tagname])
	                output.push(self.makeIndent(current_indent*self.indent_amt)+"</"+tagname+">");
	            break;
	        }
	    
	        //we will look at the top most line - and delete it when we've evaluated it. always pull from top!
	        var line = self.lines[0];
	        var strippedline = String(line.trim());

	        //get the line without end spaces for use below

	        //if the line is blank of if, by state stored in self.html_comments_open or js_comments_open,
	        //we find the line is part of a comment block, skip it.
	        if(strippedline.length === 0 || self.skipLineIfInCommentBlock(strippedline)){
	            self.lines.shift();
	            continue;
	        }   

	        //okay we're past the comments. Find out if the line represents a new element (or just text of an element):
	        var is_new_elem = strippedline.startswith("<") && (strippedline[1] != "!") && (strippedline[1] != "%");
	                
	        //get the indent of the line (that is, the unstripped one)
	        current_actual_indent = line.length - line.ltrim().length;

	        //do a little friendly error checking - this should not happen in well formed SHML
	        if(is_new_elem && strippedline.startswith("</"))
	            throw "There is no need for close tags in a SHML file! (offending lines are:)\n"+self.lines.slice(0, 10).join("\n")+"\n";
	    
	        //if we have not yet encountered the first tag, and this line is a new tag
	        if(still_searching_for_base_indent && is_new_elem){
	            //if we are processing a new tag and it's multiline, continue to accumulate attrs until a line 
	            //with '>' is seen.. this lets us have multiline tags!
	            if(line.indexOf(">") === -1){
	                line = line.rtrim();
	        
	                //prepare the loop 
	                self.lines.shift();
	        
	                //accumlate until we see an end 
	                while(self.lines[0].indexOf(">") === -1){
	                    line += ' '+self.lines[0].trim();   
	                    self.lines.shift();
	                }
	            
	                //accumulate the last line to get the full single line (carriage returns/spaces removed)
	                line += ' '+self.lines[0].trim();
	        
	                /* update the stripped line that will be used below. tada */
	                strippedline = line.trim();
	            }   
	    
	            try{
	                // extract the info we need from this new tag. The tagname, attrs, and text (last two optional)                
	                // this was regex in the python version but used regex features javascript dont got, so i use this
	                // ugly but works fine :)
	                var tagname = strippedline.split("<").slice(1)[0].split(">").slice(0)[0].split(" ")[0];
	                var attrs = strippedline.slice(strippedline.indexOf(tagname)+tagname.length).split(">")[0];
	                var text = strippedline.split(">").slice(1).join(">");
	            }catch(err){
	                throw "It is probable your SHML has an error. it was detected when parsing this line: '"+line+"' Error is "+err;
	            }
	    
	            //first space needed to keep things lookin' good, if no attrs
	            //if(attrs)
	            //    attrs = attrs;

	            base_actual_indent = current_actual_indent;
	            still_searching_for_base_indent = false;

	            if(self._selfClosingTags[tagname]){
	                output.push(self.makeIndent(current_indent*self.indent_amt)+'<'+tagname+attrs+"/>");
	                if(text)
	                    console.error("SHML found text in a self closing tag ("+tagname+") which is: "+text+". The context was around:\n\n", output.slice(-2, -1).join("\n")+"\n"+self.lines[0]);
	            }
	        
	            else{
	                //found a new tag, record the indent, set state to start looking for content or close
	            
	                //append an opening tag to the output, for the element found
	                output.push(self.makeIndent(current_indent*self.indent_amt)+'<'+tagname+attrs+">");

	                //if text was found, add that too, with the right indent, in the output.
	                text &&
	                    output.push(
	                        self.makeIndent((current_indent+1)*self.indent_amt)+text
	                    );
	            }
	        }
	        
	        //if the indent of the material is such that the scope is closed, emit a close   
	        else if(current_actual_indent <= base_actual_indent){
	            still_searching_for_base_indent = true;

	            if(!self._selfClosingTags[tagname])
	                output.push(self.makeIndent(current_indent*self.indent_amt)+"</"+tagname+">"); 
	        
	            current_indent -= 1;
	        
	            //if we've reached this point, we have found the end of a recursive call into the processor. return
	            //without gobbling the line.. and this makes it so that text can't mess up indentation, only tags have to be right.
	            return output;
	        }
	    
	        //if we've found a new element - but we're already found our opening indent, recurse into this new element
	        else if(is_new_elem){
	            output.extend(self.recursiveProcessor(current_indent+1, current_actual_indent));
	            continue;
	        }

	        //okay, it's just some text that goes in the tag currenlty opened, emit it.
	        else
	            output.push(line);
	    
	        //UPKEEP FOR WHILE 1 STATEMENT    
	        //if that wasn't the last line, remove it from the top of the document and repeat!
	        if(self.lines.length)
	            self.lines.shift();
	    }

	    //return the output, having accumulated lines off the top of the input (lines) 
	    //and appending lines to the output in response. 
	    return output;
	};

	//I am a simple state machine (who's state is stored on this class, such that only
	//one caller should call any given instance at a time) that will tell you if the lines 
	//passed in succession are part of a comment block or not, working line by line and keeping track 
	//of the number of comment opens and closes. I have been written to work with nested comments 
	//properly, so except for the rule below, compliant with HTML and javascripts commenting styles
	//
	//The major limitation is that all multiline comments must be on their own lines /entirely/.
	//Comments made after - but on the same line as - javascript code will not be recognized as 
	//the start of a comment block (and will be left in); those types of comments will not count 
	//towards opens or closes of comments.
	//
	//The rule is: all multiline comments must start on their own line.
	SHMLClass.prototype.skipLineIfInCommentBlock = function(strippedline){
	    var self = this;

	    // If an open of html or js was found, look only for that type of comment until closed. Also, dont start a 
	    // new block if the symbol doesn't start at the beginning of the line! Note we always check for closes the same time as opens
	    // (even though we know we'll skip the line in the end) hence no returns in this section.

	    strippedline = String(strippedline);

	    //check the num. of html comment opens/closes (when not in a js comment block already) 
	    if(!self.js_comments_open){
	        if(self.html_comments_open)
	            self.html_comments_open += strippedline.count(self.html_comment_open_symbol);
	    
	        else if(strippedline.startswith(self.html_comment_open_symbol))
	            self.html_comments_open += strippedline.count(self.html_comment_open_symbol);
	    
	        //if we are opened, check for closes! do we balance? or will we skip more lines?
	        if(self.html_comments_open){
	            self.html_comments_open -= strippedline.count(self.html_comment_close_symbol);
	            return true;
	        }
	    }

	    //check the num. of js comment opens/closes (when not in an html comment block already)
	    if(!self.html_comments_open){
	        if(self.js_comments_open)
	            self.js_comments_open += strippedline.count(self.js_comment_open_symbol);
	    
	        else if(strippedline.startswith(self.js_comment_open_symbol))
	            self.js_comments_open += strippedline.count(self.js_comment_open_symbol);
	    
	        //if we are opened, check for closes! do we balance? or will we skip more lines?
	        if(self.js_comments_open){
	            self.js_comments_open -= strippedline.count(self.js_comment_close_symbol);
	            return true;
	        }
	    }

	    // skip a line starting with the js line comment symbol ("//") if we're in no other comment.  
	    if(strippedline.startswith(self.js_comment_line_symbol))
	        return true;

	    // if we're in either a js or html comment returning true indicates we should skip the line (else it's normal!)
	    return self.html_comments_open || self.js_comments_open;
	};

	//Create a method on the jQuery object that represents the query string
	//if any as an object.
	(function($) {
	    $.QueryString = (function(a) {
	        if (a == "") return {};
	        var b = {};

	        for(var i = 0; i < a.length; ++i){
	            var p=a[i].split('=');
	            if (p.length != 2) continue;
	            b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
	        }

	        return b;
	    })(window.location.search.substr(1).split('&'))
	})(jQuery);

	/* ADD SOME CSS TRATIS.. COOL (what's a css trait? it's a "hook", in the ExpandHypertags method, 
	   for any number of methods to applied to any number of nodes, exactly once, whenever such 
	   nodes are made. It's easy enough to do at document load.. but it's trickier to guarentee it 
	   will be applied to every such node only once in the document whereever/whenever it's made,
	   without processing the whole document, and without the creator needing to do anything special.
	   because hypertag elegantly controls instantiation, CSS Traits will work nicely). */

	GLOBAL._clickableMethod = function(){
	    //this will then be resolvable by local variable in the method made below, ensuring self is defined.
	    var self = this;

	    self.self = self;

	    //give it root, parent, $named, etc.
	    Hypertag.Runtime.makeElementNavigable(self);

	    /* if __change__ is a string, make it a function */
	    var load = self.getAttribute("__load__");
	    if(load && typed(load, String))
	        eval("self.__load__ = function(){"+load+";}");

	    /* if __mousedown__ is a string, make it a function */
	    var mousedown = self.getAttribute("__mousedown__") || self.getAttribute("__click__");
	    if(mousedown && typed(mousedown, String))
	        eval("self.__mousedown__ = function(){"+mousedown+";}");
	    
	    /* if __mousedown__ exists, call it via the same in jquery */
	    if(self.__mousedown__)
	        $(self).mousedown(self.__mousedown__);

	    //by default IS hoverselectable. should it not be?
	    var hoverselectable_flag = self.getAttribute("hoverselectable"); 
	    if(!hoverselectable_flag || hoverselectable_flag != "false")
	        makeHoverSelectable(this); 

	    if(self.__load__)
	        fire(self, '__load__');
	};

	GLOBAL._changeableMethod = function(){
	    var self = this;

	    self.self = self;

	    //give it root, parent, $named, etc.
	    Hypertag.Runtime.makeElementNavigable(self);

	    /* if __change__ is a string, make it a function */
	    var load = self.getAttribute("__load__");
	    if(load && typed(load, String))
	        eval("self.__load__ = function(){"+load+";}");

	    /* if __change__ is a string, make it a function */
	    var change = self.getAttribute("__change__");
	    if(change && typed(change, String))
	        eval("self.__change__ = function(event){"+change+";}");
	    
	    /* if __change__ is a string, make it a function */
	    var keydown = self.getAttribute("__keydown__");
	    if(keydown && typed(keydown, String))
	        eval("self.__keydown__ = function(event){"+keydown+";}");
	    
	    /* if __mousedown__ is a string, make it a function */
	    var mousedown = self.getAttribute("__mousedown__") || self.getAttribute("__click__");
	    if(mousedown && typed(mousedown, String))
	        eval("self.__mousedown__ = function(){"+mousedown+";}");
	      
	    /* if __mousedown__ is a string, make it a function */
	    var blur = self.getAttribute("__blur__") || self.getAttribute("__blur__");
	    if(blur && typed(blur, String))
	        eval("self.__blur__ = function(){"+blur+";}");
	    
	    /* if __mousedown__ is a string, make it a function */
	    var focus = self.getAttribute("__focus__") || self.getAttribute("__focus__");
	    if(focus && typed(focus, String))
	        eval("self.__focus__ = function(){"+focus+";}");
	    
	    /* if __mousedown__ exists, call it via the same in jquery */
	    if(self.__mousedown__)
	        $(self).mousedown(self.__mousedown__);
	        
	    /* if __mousedown__ exists, call it via the same in jquery */
	    if(self.__change__)
	        $(self).change(self.__change__);
	    
	    if(self.__keydown__)
	        $(self).keydown(self.__keydown__);    
	    
	    if(self.__blur__)
	        $(self).blur(self.__blur__);    
	    
	    if(self.__focus__)
	        $(self).focus(self.__focus__);    

	    if(self.__load__)
	        fire(self, '__load__');    
	};

	//give every underscore and on-event method access to self, as well as resolving its namespace
	//for annotating javascript on elements with invoking a hypertag on it.
	GLOBAL._makeElementNavigiable = function(){
	    var self = this;

	    Hypertag.Runtime.makeElementNavigable(self);

	    for(var i = 0; i != self.attributes.length; i++){
	        var attrname = self.attributes[i].nodeName;
	    
	        if(attrname.startswith('on') || attrname.startsendswith('__')){
	            /* if __change__ is a string, make it a function */
	            var load = self.getAttribute(attrname);
	            if(load && typed(load, String))
	                eval("self."+attrname+" = function(){"+load+";}");
	        }
	    }

	    if(self.__load__)
	        fire(self, '__load__')
	};

	GLOBAL.animate = function(elem, attrs, options, queue){
	    if(!typed(options, String))
	        options = {duration:options || Hypertag.GUI.duration};
	    
	    options.queue = options.queue || queue || false;
	    return $(elem).animate(attrs, options);
	};

	GLOBAL.SendToBack = function(element, onlyIfHasClassFlag){
	    return BringToFront(element, onlyIfHasClassFlag, true);
	};

	/* I authored this over time, after finding an example that only
	  dealt with an ever increasing z order as divs were globally raised.
	  I appreciate having tools to reorder views both ways, i.e. this
	  and shuffleToFront/Back() on views. They are both useful.
	  this system is more refined that an ever-increasing z-order; it keeps 
	  all z-indexs between 0 and N (children of a container) when shuffling 
	  and updates an attribute, _zindex, to be efficient, and can even restrict 
	  it's raising to the set of children with a particular class (if passed as a 2nd arg) */
	GLOBAL.BringToFront = function(element, onlyIfHasClassFlag, reverseFlag){
	    /* we will - if asked to - limit our operation to children with a certain class.  */
	    onlyIfHasClassFlag = onlyIfHasClassFlag ? '.'+onlyIfHasClassFlag : undefined;
	    var children = $.makeArray($(element).parent().children(onlyIfHasClassFlag));

	    /* get all the views indexed according to z. */
	    var zmap = [];
	    for(var i = 0; i < children.length ; i ++)
	        zmap[children[i]._zindex] = children[i];

	    /* change the sparse z-listing to a dense one, for remapping */
	    var offset = 0;
	    var reordered_zmap = [];
	    for(var k = 0; k < zmap.length ; k ++)
	        if(zmap[k] && zmap[k] != element)
	            reordered_zmap.push(zmap[k]);                    

	    /* take the list that is now windows in z-order, 
	       and set their z-s accordingly (if changed) */
	    for(var i = reverseFlag ? 1 : 0; i < reordered_zmap.length ; i ++){
	        reordered_zmap[i]._zindex = i;
	        $(reordered_zmap[i]).css("z-index", i);
	    }    

	    /* finally, raise the window requested to the top of the z-stack, which
	       is now merely the number of windows we have, since we remapped everything. */
	    element._zindex = reverseFlag ? 0 : reordered_zmap.length;;
	    $(element).css("z-index", element._zindex);
	}

	GLOBAL.isMouseMoving = function(){
	    if(!Hypertag.GUI.mousexy || !Hypertag.GUI.lastmousexy)
	        return false;
	    return (Hypertag.GUI.mousexy[0] != Hypertag.GUI.lastmousexy[0] || Hypertag.GUI.mousexy[1] != Hypertag.GUI.lastmousexy[1])
	};

	//i prefer "settled" to mean a setTimeout with no wait. 
	GLOBAL.settled = setTimeout;

	}.call(window));

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = "\n<!-- these styles present a good single page application layout -->\n<style>\n    html{\n        padding:0px;\n        margin:0px;\n        overflow:hidden;\n    }\n\n    body{\n        padding:0px;\n        margin:0px;\n        overflow:hidden;\n    }\n</style>\n    \n<script id=\"root\" type=\"text/hypertag\"></script>\n    \n<script id=\"text\" type=\"text/hypertag\" tagtype=\"span\"></script>\n    \n<script id=\"dropdown\" type=\"text/hypertag\" tagtype=\"select\" classes=\"changeable\"></script>\n    \n<script id=\"remainingview\" type=\"text/hypertag\" classes=\"rel\">\n    width:\"%%{self.parent.width}\",\n    height:\"%%{self.parent.height;;value-self.offsetTop}\"\n</script>\n\n<!-- text?? Shorthand for a span-based hypertag. -->\n<script id=\"text\" type=\"text/hypertag\" tagtype=\"span\"></script>\n\n<!-- image?? shorthand for a img-based hypertag. -->\n<script id=\"image\" type=\"text/hypertag\" tagtype=\"img\">\n    __init__:function(){\n        $(self).load(function(){\n            self.parent.send('width');\n            self.parent.send('height');\n        });\n    }\n</script>\n    \n<!-- fullview?? A simple mechanism to take the dimensions of the hypertag parent. -->\n<script id=\"fullview\" type=\"text/hypertag\">\n    width:\"%%{self.parent.width}\",\n    height:\"%%{self.parent.height}\"\n</script>\n  \n<!-- SizedToWindow?? Cause a hypertag to take the dimensions of the window, usually to create cascading hitches. -->  \n<script id=\"SizedToWindow\" type=\"text/hypertag\">\n    /* on init, set it up so this view will change size when the\n       window does. also evaluate it for the first time */\n\n    __init__:function(){\n        window.addEventListener(\"resize\", self.resizeFunction, true);\n        window.addEventListener(\"orientationchange\", self.resizeFunction, true);\n        Hypertag.GUI.focus.setLayer(self);\n        Hypertag.GUI.focus.setWindow(self);\n        self.resizeFunction();\n    },\n    \n    /* an unfortunate and dirty hackorola, seems like the browser doesn't\n       stablize it's offsetTops and innerWidth/Height until 25-50 msecs into\n       the load. While discovering the true nature of the delay is vital\n       this timeout is efficient enough (occuring just once on page load)\n       that i can leave it in just to get things working. */\n    __load__:function(){\n        setTimeout(function(){\n            Hypertag.WindowResizing = true;\n            self.send(\"width\");\n            self.send(\"height\");\n            Hypertag.WindowResizing = false;\n        }, 100);\n    },\n    \n    /* I will set myself to the size of the window when called*/\n    resizeFunction:function(){\n        Hypertag.WindowResizing = true;\n        self.set('width', window.innerWidth);\n        self.set('height', window.innerHeight);    \n        Hypertag.WindowResizing = false;\n    }\n</script>\n    \n<!-- DroppableShadow?? A trait to make an listitem shadowed when its being hovered over by a compatible droptype. -->\n<script id=\"DroppableShadow\" type=\"text/hypertag\">\n    __dragover__:function(item){\n        $(item).addClass(\"bigshadowed\");\n    },\n    \n    __dragout__:function(item){\n        $(item).removeClass(\"bigshadowed\");\n    }\n</script>\n    \n<!-- DroppableOutline?? A trait to make an listitem outlined when its being hovered over by a compatible droptype. -->\n<script id=\"DroppableOutline\" type=\"text/hypertag\">\n    __dragover__:function(item){\n        $(item).css(\"outline-style\", \"solid\").css(\"outline-width\", \"2px\").css(\"outline-color\", self.DroppableOutline$ || \"white\");\n    },\n\n    __dragout__:function(item){\n        $(item).css(\"outline-style\", \"none\");\n    }\n</script>\n    \n<!-- DroppableShadow?? A trait to make an listitem bordered when its being hovered over by a compatible droptype. -->\n<script id=\"DroppableBorder\" type=\"text/hypertag\">\n    __dragover__:function(item){\n        $(item).css(\"border-style\", \"solid\").css(\"border-width\", \"2px\").css(\"border-color\", self.DroppableBlueBorder$ || \"Blue\");\n    },\n\n    __dragout__:function(item){\n        $(item).css(\"border-style\", \"none\");\n    }\n</script>\n    \n<!-- ReorderableChildren?? A trait to apply logic that makes a draggable list rearrageable by creating new items, and removing the originals. -->\n<script id=\"ReorderableChildren\" type=\"text/hypertag\">\n    droponself:true,\n    droponothers:false,\n    droponchild:true,\n\n    __drop__:function(items, child, droptype){\n        console.log(\"items\", items[0].data);\n        if(child)\n            for(var i = 0; i != items.length ; i ++)\n                self.insertItems(items[i].data, child);\n        else\n            for(var i = 0; i != items.length ; i ++)\n                this.appendItems(items[i].data);\n                \n        for(var i = 0; i != items.length ; i ++)\n            items[i].remove(true);\n    }\n</script>\n    \n<!-- MoveableChildren?? A trait to apply logic that makes a drag list rearrageable by moving items to the drop target. -->\n<script id=\"MoveableChildren\" type=\"text/hypertag\">\n    droponself:true,\n    droponcontainer:true,\n    droponchild:true,\n    \n    /* this differs from reorderable children by moving the instance\n       itself via insertBefore as opposed to insertItems, which removes\n       and readds by data alone.  */\n    __drop__:function(items, child, droptype){\n        /* easy! integrated it into hypertag. */\n        console.log(\"droptype, self.drag\", droptype, self.drag, droptype.intersect(self.drag));\n        if(droptype.intersect(self.drag))\n            self.moveItems(items, child);  \n    }\n</script>\n\n<!-- DroppableMove?? A trait to apply the logic of removing an item from a drag source to a drop target. -->\n<script id=\"DroppableMove\" type=\"text/hypertag\">\n    __dropping__:function(items, target, droptype){\n        for(var i = 0; i != items.length ; i ++)\n            items[i].remove(true);\n    },\n\n    __drop__:function(items, droptype){\n        for(var i = 0; i != items.length ; i ++)\n            this.appendItems(items[i].data);\n    }\n</script>\n    \n<script id=\"DroppableAdd\" type=\"text/hypertag\">\n    __dropping__:function(items, target, droptype){\n        for(var i = 0; i != items.length ; i ++)\n            items[i].remove(true);\n    },\n\n    __drop__:function(items, droptype){\n        for(var i = 0; i != items.length ; i ++)\n            this.appendItems(items[i].data);\n    }\n</script>\n    \n<!-- BrowserFileDroppable?? A trait that will pass along the data from a single file dropped from an operating system browser onto a hypertag (no drag behavior needed). The trait-property should be a function that receives the data. -->\n<script id=\"BrowserFileDroppable\" type=\"text/hypertag\">\n    <!-- markup shml -->\n\n    __loaded__:function(){\n        var cancel = function(e){\n            if (e.preventDefault) { e.preventDefault(); }\n            return false;\n        };\n\n        addEventHandler(self, 'dragover', cancel);\n        addEventHandler(self, 'dragenter', cancel);\n       \n        addEventHandler(self, 'drop', function (e){\n            console.log(\"FOO\");\n            //get window.event if e argument missing (in IE) \n            e = e || window.event; \n           \n            //stops the browser from redirecting off to the image.\n            if (e.preventDefault)\n                e.preventDefault(); \n\n            var dt = e.dataTransfer;\n            var files = dt.files;\n           \n            for(var i = 0; i != files.length; i ++){\n                var file = files[i];\n                var reader = new FileReader();\n\n                addEventHandler(reader, 'loadend', function(e, file){\n                   \n                    //UNTESTED FEATURE\n                    if(self.ResizeImageFlag){\n                        var image = new Image();\n                       \n                        image.src = this.result;\n\n                        image.onload = function() {\n                            var maxWidth = 220,\n                                maxHeight = 220,\n                                imageWidth = image.width,\n                                imageHeight = image.height;\n                           \n                            if(imageWidth > imageHeight){\n                                if(imageWidth > maxWidth){\n                                    imageHeight *= maxWidth / imageWidth;\n                                    imageWidth = maxWidth;\n                                }\n                            }\n                           \n                            else{\n                                if (imageHeight > maxHeight) {\n                                    imageWidth *= maxHeight / imageHeight;\n                                    imageHeight = maxHeight;\n                                }\n                            }\n                           \n                            var canvas = document.createElement('canvas');\n                            canvas.width = imageWidth;\n                            canvas.height = imageHeight;\n                           \n                            var ctx = canvas.getContext(\"2d\");\n                            ctx.drawImage(this, 0, 0, imageWidth, imageHeight);\n                           \n                            // The resized file ready for upload\n                            var finalFile = canvas.toDataURL(fileType);\n                           \n                            self.BrowserFileDroppable$(finalFile);\n                        };\n                    }\n                   \n                    //NORMAL PATH; \n                    else\n                        self.BrowserFileDroppable$(this.result);\n                });\n\n                //attach event handlers here...\n                reader.readAsDataURL(file);\n            }\n\n            return false;\n        });\n    }\n</script>\n    \n<!-- Hoverselectable?? A trait to make anything do something when hovered over during a drag and drop operation. -->\n<script id=\"Hoverselectable\" type=\"text/hypertag\">\n    __loaded__:function(){\n        /* note onhoverselected is here only so we can put the trait on tags that dont allow\n           inner text, such as fileimg (or img tags in general) */\n        makeHoverSelectable(self, self.Hoverselectable$ || self.onhoverselected);\n    }\n</script>      \n         \n<!-- slidetemplates?? Implmented as a hypertag list of templates to invoke, cause each template to be displayed by animation (and loaded for the first time if not loaded) by calling show with the index of the desired template to show. -->    \n<script id=\"slidetemplates\" type=\"text/hypertag\" classes=\"rel nooverflow\">\n    <!-- markup shml -->\n\n    animationtype:\"slide\",\n    animationtime:Hypertag.GUI.duration*2,\n\n    //does the \n    __loading__:function(){\n        self.doesOverlay = self.overlaid.indexOf(self.animationtype) !== -1;\n    },\n\n    transform_none:function(idx, container, elem, lastelem, css){\n        css.transition = \"0ms\";\n        $(container).css(css);\n    }, \n\n    transform_slide:function(idx, container, elem, lastelem, css){\n        css.transition = self.animationtime+\"ms\";\n        $(container).css(css);\n    },\n\n    transform_sweep:function(idx, container, elem, lastelem, css){\n        if(idx {- self._last_idx)\n            $(elem).css({transform:\"rotateY(120deg) rotateX(90deg)\", transition:\"0ms\"});\n            \n        else\n            $(elem).css({transform:\"rotateY(-120deg) rotateX(90deg)\", transition:\"0ms\"});\n\n        setTimeout(function(){\n            css.transition = self.animationtime+\"ms\";\n            $(elem).css({transform:\"rotateY(0deg) rotateX(0deg)\", transition:self.animationtime+\"ms\"});\n            $(container).css(css);\n        });\n    },\n\n    transform_smush:function(idx, container, elem, lastelem, css){\n        if(idx {- self._last_idx)\n            $(elem).css({transform:\"rotateY(180deg)\", transition:\"0ms\"});\n        else\n            $(elem).css({transform:\"rotateY(-180deg)\", transition:\"0ms\"});\n\n        setTimeout(function(){\n            css.transition = self.animationtime+\"ms\";\n            $(elem).css({transform:\"rotateY(0deg)\", transition:self.animationtime+\"ms\"});\n            $(container).css(css);\n        });\n    },\n\n    transform_flip:function(idx, container, elem, lastelem, css){\n        if(idx {- self._last_idx)\n            $(elem).css({transform:\"rotateY(360deg)\", transition:\"0ms\"});\n        else\n            $(elem).css({transform:\"rotateY(-360deg)\", transition:\"0ms\"});\n\n        setTimeout(function(){\n            css.transition = self.animationtime+\"ms\";\n            $(elem).css({transform:\"rotateY(0deg)\", transition:self.animationtime+\"ms\"});\n            $(container).css(css);\n        });\n    },\n\n    transform_roll:function(idx, container, elem, lastelem, css){\n        if(idx {- self._last_idx)\n            $(elem).css({transform:\"rotateZ(140deg)\", transition:\"0ms\"});\n        else\n            $(elem).css({transform:\"rotateZ(-140deg)\", transition:\"0ms\"});\n\n        setTimeout(function(){\n            css.transition = self.animationtime+\"ms\";\n            $(elem).css({transform:\"rotateZ(0deg)\", transition:self.animationtime+\"ms\"});\n            $(container).css(css);\n        });\n    },\n\n    transform_fade:function(idx, container, elem, lastelem, css){\n        lastelem && $(lastelem).css({opacity:\"1\", transition:\"0ms\"});\n        $(elem).css({opacity:\"0\", transition:\"0ms\"});\n\n        setTimeout(function(){\n            css.transition = \"0ms\";\n            lastelem && $(lastelem).css({opacity:\"0\", transition:self.animationtime+\"ms\"});\n            $(elem).css({opacity:\"1\", transition:self.animationtime+\"ms\"});\n            $(container).css(css);\n        });\n    },\n\n    transform_dissolve:function(idx, container, elem, lastelem, css){\n        lastelem && $(lastelem).css({opacity:\"1\"});\n        $(elem).css({opacity:\"0\"});\n\n        setTimeout(function(){\n            css.transition = \"0ms\";\n            \n            lastelem && $(lastelem).fadeTo(self.animationtime, 0);\n            $(elem).fadeTo(self.animationtime, 1);\n        });\n    },\n    \n    overlaid:[\"dissolve\", \"fade\"],\n    \n    show:function(idx, disableAnimation){\n\n        // marshall useful state\n        var container = self.child('container');\n        var items = container.child('viewlist').items;\n        var lastelem = items[self._last_idx];\n        var elem = items[idx];\n\n        //Ask the view we're on if it's okay to leave it\n        var should_change = lastelem ? fire(lastelem, '__hidingview__') : true;\n        \n        //if they don't return false, go ahead and change it\n        if(should_change !== false){\n            //IF THE VIEW IN QUESTION HAS NOT YET BEEN LOADED, RELOAD IT\n            elem.isReset && elem.reload();\n\n            // CREATE OBJECT WITH BASE TRANSFORMATION INFO OF LEFT/TOP TO DISPLAY APPROPRIATE VIEW\n            var css = self.vertical ? {top:-idx*self.height} : {left:-idx*self.width};\n            \n            //NO ANIMATION IS NEEDED, TYPICALLY BECAUSE THE VIEW IS BEING RESIZED AND\n            //IT SHOULD BE \"RE-LAID-OUT\" SO THAT OTHER VIEWS DONT BECOME ACCIDENTALY VISIBLE\n            if(disableAnimation){\n                lastelem && $(lastelem).css({transition:\"0ms\", transform:\"none\"});\n                $(elem).css({transition:\"0ms\", transform:\"none\"});\n                $(container).css({transition:\"0ms\", transform:\"none\"});\n                \n                if(!self.doesOverlay)\n                    $(container).css(css);\n            }\n\n            // CALL APPROPRIATE ANIMATION FUNCTION PASSING RELEVANT STATE\n            else{\n                self['transform_'+self.animationtype](idx, container, elem, lastelem, css);\n                self._last_idx = idx;\n            }\n            \n            //tell the newly shown view that it's visible\n            fire(elem, '__showview__', true);  \n        }  \n\n        // if the view refused to be switched out, return false to inform the caller\n        else\n            return false;\n    },\n\n    onSizing:\"%%{self.width, self.height ;; self._last_idx !== undefined && self.show(self._last_idx, true)}\",\n    \n    insertView:function(tmplname, idx){\n        var viewlist = self.child('container.viewlist');\n\n        self.sections.insert(tmplname, idx);\n        viewlist.insertItems(tmplname, viewlist.items[idx]);\n\n        self.send('sections');\n    },\n\n    addView:function(tmplname){\n        var viewlist = self.child('container.viewlist');\n\n        self.sections.push(tmplname);\n        viewlist.addItems(tmplname);\n\n        self.send('sections');\n    },\n\n    removeView:function(idx){\n        var viewlist = self.child('container.viewlist');\n\n        self.sections.remove(idx);\n        viewlist.items[idx].remove();\n\n        self.send('sections');\n    },\n\n    removeLast:function(){\n        var viewlist = self.child('container.viewlist');\n\n        self.sections.pop();\n        viewlist.items.last().remove();\n\n        self.send('sections');\n    }\n\n    //this container will be animated left/right or up/down instead of using scrollTop/scrollLeft\n    //for same (which would eliminate the need for the container, if i could use it) because\n    //safari has a weird bug where, if sliding to a non-scrollable view to a scrollable one, no\n    //mousewheel events will be respected until view has changed size again or slid to \n    //another scrollable view. grrr.\n    <view name=\"container\" class=\"rel\" width=\"%%{self.parent.width}\" height=\"%%{self.parent.height}\">\n\n        <view name=\"viewlist\" \n              class=\"rel\" \n              height=\"%%{self.root.vertical ?? self.root.height, self.root.sections ;; self.root.height * self.root.sections.length :: self.root.height}\"\n              width=\"%%{self.root.vertical ?? self.root.width, self.root.sections ;; self.root.width :: self.root.width * self.root.sections.length}\">\n      \n            list:self.root.sections\n    \n            <view autoload=\"%{false}\"\n                  template=\"[=item=]\"\n                  class=\"[=iftest(self.root.vertical, '', 'cell')=] [=iftest(self.root.overlaid.indexOf(self.root.animationtype) !== -1, 'abs', 'rel')=] top morebottomrounded\"\n                  height=\"%%{self.root.height}\"\n                  width=\"%%{self.root.width}\">\n</script>\n    \n    \n<!-- slidelist?? Implemented as a hypertag list, cause each list item to be displayed by animation (and loaded for the first time if not loaded) by calling show with the index of the desired template to show. -->             \n<script id=\"slidelist\" type=\"text/hypertag\" classes=\"rel nooverflow\">\n    slidevertical:false,\n\n    show:function(idx, disableAnimation){\n        self._last_idx = idx;\n        self.items[idx].isReset && self.items[idx].reload();\n        \n        var attrs = self.slidevertical ? {scrollTop:idx*self.height} : {scrollLeft:idx*self.width};\n        animate(self, attrs, disableAnimation ? 0 : Hypertag.GUI.duration);\n    },\n\n    onSizing:\"%%{self.width, self.height ;; self._last_idx !== undefined && self.show(self._last_idx, true)}\",\n    \n    height:\"%%{self.slidevertical ?? self.parent.height ;; self.parent.height :: self.parent.height * self.items.length}\",\n    width:\"%%{self.slidevertical ?? self.parent.width ;; self.parent.width :: self.parent.width * self.items.length}\"\n    \n</script>\n    \n<!-- RenamableField?? A view that contains either a div or input field (name='field'), populated by self.data.item, that will switch between showing the text or input field when the 'renaming' property is toggled. The '__renaming__' delegate will fire() when a successful renaming is finished which can return false to prevent the renaming. -->\n<script id=\"RenamableField\" type=\"text/hypertag\">\n    <!-- markup shml -->\n\n    $field:\"[name='field']\",\n    \n    stopRename:function(){\n        var val = self.$field.val();\n        \n        if(val != self._oldvalue && self.fire('__renaming__', val, self._oldvalue) !== false)\n            self.item = val;\n        \n        self.reload({renaming:false});\n    },\n    \n    startRename:function(){\n        !self.renaming && self.reload({renaming:true});\n    },\n    \n    __click__:function(){\n        self.startRename();\n    },\n\n    getValue:function(){\n        return self.item;\n    },\n\n    __load__:function(){\n        if(self.renaming){\n            self._oldvalue = self.$field.val();\n            \n            self.$field\n                .keydown(function(e){\n                    if(e.keyCode === 13 || e.keyCode === 27)\n                        self.stopRename();\n                })\n                .blur(function(e){\n                    self.stopRename();\n                }).focus();\n                \n            Hypertag.GUI.focus.setFocused(self.$field[0]);\n        }            \n    }\n\n    <div class=\"width100\">\n        {{if self.renaming}}\n            <input name=\"field\" type=\"field\" value=\"[=item=]\" class=\"width95\">\n        {{else}}\n            <div class=\"cell width100 bold [=iftest(item, '', 'italic')=]\">[=item || self.default || ''=]\n        {{/if}}\n</script>\n        \n<!-- ModalPopup?? A mechanism that will, by undergoing reload(), present both a faded background (interrupting clicks) and a central area. In the central area, a template you specify in the 'show' property will be invoked. That template can close the popup by calling self.lookuptemplate('ModalPopup').reset() which will find the ModalPopup above it and reset() it. -->\n<script id=\"ModalPopup\" type=\"text/hypertag\">    \n    <!-- markup shml -->\n    \n    autoload:false,\n\n    classes:\"abs hidden center\",\n    height:\"%%{self.parent.height}\",\n    width:\"%%{self.parent.width}\",\n    \n    width_ratio:1.5,\n   \n    __load__:function(){\n        var $content = $(self);\n        \n        $(self).removeClass(\"hidden\");\n        \n        $content.css({transform:\"rotateX(90deg)\"});\n            \n        setTimeout(function(){\n            $content.css({transform:\"rotateX(0deg)\", transition:\"500ms\"});\n        });\n    },\n\n    __reset__:function(){\n        var $content = $(self);\n        \n        $content.css({transform:\"rotateX(90deg)\", transition:\"200ms\"});\n        \n        setTimeout(function(){\n            $(self).addClass(\"hidden\");\n            self.forcereset();\n        }, 200);\n        \n        return false;\n    }\n\n    <fullview class=\"abs vertBlackGradient\" style=\"opacity:0.4;\">\n\n    <div name=\"content\" class=\"abs width100\">\n\n        <view width=\"%%{self.parent.width}\" \n              height=\"%%{self.parent.height}\" \n              class=\"table middle center\" \n              __click__=\"!self.root.closeable && self.root.reset()\">\n\n            <view template=\"%{self.lookup('show')}\" __click__=\"return;\"\n                class=\"rel padded rounded fgwhite vertBlackGradient windowshadowed_active center middle bigger\"\n                width=\"%%{self.parent.width ;; value/self.root.width_ratio}\"\n                left=\"%%{self.width ;; (self.parent.width-value)/(4/self.root.width_ratio)}\">\n</script>\n\n<script id=\"ModalAction\" type=\"text/hypertag\">\n    <!-- markup shml -->\n    \n    classes:'topspacer',\n\n    label:\"(no label)\",\n\n    operation:function(){\n        debug.log(\"no operation provided for ModalAction\");\n    }\n\n    <input type=\"button\" \n           class=\"button rightspacer\" \n           value=\"[=label=]\" \n           __click__=\"self.root.operation() !== false && self.lookuptemplate('ModalPopup').reset()\">\n                        \n    <input type=\"button\" \n           class=\"button\" \n           value=\"cancel\" \n           __click__=\"self.lookuptemplate('ModalPopup').reset()\">\n</script>\n\n<!-- a trait to make a keyselectable lazylist wrap from front-to-end and vice versa -->\n<script id=\"lazylooped\" type=\"text/hypertag\">\n    keyselectable:true,\n    lazy:true,\n    \n    __scrollbegin__:function(){\n        self.lazyreversed = true;\n        self.reload();\n        self.items.last().setSelection();\n    },\n    \n    __scrollend__:function(){\n        self.lazyreversed = false;\n        self.reload();\n        self.items[0].setSelection();\n    }\n</script>\n    \n<script id=\"ScrollBoundaryEvents\" type=\"text/hypertag\">\n    __init__:function(){\n        $(self).scroll(self.checkForScrollBoundaries);\n        \n        if(self.addEventListener){\n            /* self.addEventListener('DOMMouseScroll', self.updateVisibleItems, false); */\n            self.addEventListener('mousewheel', self.checkForScrollBoundaries, false);\n        }\n        \n        else\n            self.onmousewheel = self.checkForScrollBoundaries;\n\n        /* when self.optimized[0] (ie. dimension, width, height) of our parent changes, reupdate what's visible */\n        listen(self, self.lazy, function(){\n            self.checkForScrollBoundaries(); \n        });\n    },\n    \n    deltaEventThreshold:60,\n    \n    _scrollBoundaryEventCounter:false,\n    \n    __reset__:function(){\n        clearTimeout(self.finishWaitingForScroll);\n        self._scrollBoundaryEventCounter = false;\n        self._scrollBoundaryDirection = undefined;\n    },\n    \n    finishWaitingForScroll:function(){\n        //console.log(\"finishWaitingForScroll: self._scrollBoundaryEventCounter, self.deltaEventThreshold\", self._scrollBoundaryEventCounter, self.deltaEventThreshold);\n        if(self._scrollBoundaryEventCounter !== false && self._scrollBoundaryEventCounter > self.deltaEventThreshold){\n            if(self._scrollBoundaryDirection)\n                self.fire(\"__scrollbegin__\");\n            else\n                self.fire(\"__scrollend__\");\n        }\n            \n        self._scrollBoundaryEventCounter = false;\n        self._scrollBoundaryDirection = undefined;\n\n    },\n    \n    checkForScrollBoundaries:function(event){\n        //get delta - if down , check against down version, if up, check against up version\n        \n        if(event instanceof WheelEvent){\n            if(self._scrollBoundaryDirection === undefined){\n                if(event.wheelDelta {- 0)\n                    self._scrollBoundaryDirection = false;\n                else\n                    self._scrollBoundaryDirection = true;\n                return;\n            }\n            \n            else if((self._scrollBoundaryDirection === true && event.wheelDelta {- 0) || (self._scrollBoundaryDirection === false && event.wheelDelta -} 0)){\n                clearTimeout(self.finishWaitingForScroll);\n                self._scrollBoundaryDirection = undefined;\n                self._scrollBoundaryEventCounter = false;\n                return;\n            }\n        }\n        \n        if(self._scrollBoundaryDirection === false && self.scrollTop+self.offsetHeight >= self.scrollHeight && self.items[self.items.length-1].ELEMENT_NODE){\n            if(self._scrollBoundaryEventCounter !== false)\n                self._scrollBoundaryEventCounter += 1;\n\n            else{\n                self._scrollBoundaryEventCounter = 0;\n                setTimeout(self.finishWaitingForScroll, 1000);\n            }\n        }\n        \n        else if(self._scrollBoundaryDirection === true && self.scrollTop === 0){\n            if(self._scrollBoundaryEventCounter !== false){\n                self._scrollBoundaryEventCounter += 1;\n            }\n\n            else{\n                self._scrollBoundaryEventCounter = 0;\n                setTimeout(self.finishWaitingForScroll, 1000);\n            }\n        }\n\n        else{\n            self._scrollBoundaryDirection = undefined;\n            self._scrollBoundaryEventCounter = false;\n        }\n    }\n</script>\n    \n<!-- a trait which will call the function provided to the trait on hover - but in \n     such a way as to reject accidental double activation -->\n<script id=\"HoverDoubleClickRejection\" type=\"text/hypertag\">\n    prevent_double_activation:false,\n    isOverUs:false,\n    \n    __hover__:function(state, e){\n        self.isOverUs = state;\n        \n        /* to prevent accidental opens */\n        if(self.prevent_double_activation)\n            return;\n        \n        self.prevent_double_activation = true;            \n        \n        setTimeout(function(){\n            if(self.isOverUs)\n                self.HoverDoubleClickRejection$(e);\n        }, 150); \n        \n        setTimeout(function(){\n            self.prevent_double_activation = false;\n        }, Hypertag.Runtime.dragdelay);\n    }\n</script>\n    \n<script type='text/javascript'>\n     listen(Hypertag, '__init__', function(){\n         \n         //this will allow a input field to have default provided until the user provides input\n         //it also exposes a \"getValue\" method which will return an empty string if the default\n         //value is still present. Short and simple\n         \n         //NOTE this supports password fields by flipping the type to field when no user input present\n         Hypertag.Runtime.addCSSTraits(\".defaultfield\", function(self){\n             var $self = $(self);\n             var default_value = self.getAttribute('default');\n             \n             self._isPassword = self.getAttribute('type') == 'password';\n             \n             self.setDefault = function(){\n                 self._isPassword && self.setAttribute('type', 'field');\n                 $self.val(default_value).addClass(\"fggrey italic\");\n             }\n    \n             $self.focus(function(){\n                 if($self.val() == default_value){\n                     self._isPassword && self.setAttribute('type', 'password');\n                     $self.val('').removeClass(\"fggrey italic\");\n                 }\n             }).blur(function(){\n                 if(!$self.val().trim()){\n                     self._isPassword && self.setAttribute('type', 'field');\n                     $self.val(default_value).addClass(\"fggrey italic\");\n                 }\n             });\n\n             self.getValue = function(){\n                 var val = $self.val();\n                 return val == default_value ? \"\" : val;\n             }\n\n             self.setValue = function(val){\n                if(val == '') \n                    self.setDefault();\n                else\n                    $self.val(val).removeClass(\"fggrey italic\");\n             }\n             \n             !$self.val().trim() && self.setDefault();\n         });   \n     })\n</script>\n\n<script id=\"DebugFlash\" type=\"text/hypertag\">\n    classes:\"ztop abs fixed orange hidden transparent\",\n    SizedToWindow$:true,\n    onDebugger:\"%%{Hypertag.Debugger.__error__, Hypertag.Debugger.__warning__, Hypertag.Debugger.__comment__ ;; self.flash()}\",\n    flash:function(){\n        $self = $(self);\n        $self.removeClass('hidden');\n        $self.css(\"opacity\", 0.5);\n        $self.animate({opacity:0}, {duration:Hypertag.GUI.duration+10, complete:function(){\n            $self.addClass('hidden');\n        }});\n    }\n</script>\n\n\n<script id=\"SortableTable\" type=\"text/hypertag\">\n    <!-- markup shml -->\n    \n    tabledata:[]\n    \n    <view class=\"rel\" width=\"%%{self.parent.width}\">\n        list:getkeys(self.root.tabledata.first()),\n        selectable:\"grey fgwhite bold, black fgwhite, grey fgwhite\",\n        multiselectable:false,\n        unselectable:false,\n        __selection__:function(elem){\n            var view = self.sibling('TheList');\n            view.list = self.root.tabledata.sortByKey(elem.data.item);\n            view.reload();\n        }\n        <view class=\"cell middle\" width=\"%%{self.parent.width ;; value/self.parent.evaluated_list.length}\" style=\"overflow: hidden;\">\n            <span class=\"middle\">[=item=]\n    \n    <SortableList name=\"TheList\"\n        class=\"rel scrollable\" \n        width=\"%%{self.parent.width}\" \n        height=\"%%{self.parent.height ;; value-self.offsetTop}\">\n        list:self.root.tabledata\n</script>\n\n<script id=\"SortableList\" type=\"text/hypertag\">\n    <!-- markup shml -->\n    \n    optimized:\"height, 30, 10\",\n    optimizeditems:true,\n    optimizedreload:true,\n    stickyselected:true,\n    multiselectable:false,\n    keyselectable:true,\n    autoscrollable:true,\n    selectable:\"vertLightBlueGradient fgblack, buttonGradient fgblack\"\n    \n    //row\n    <view width=\"%%{self.parent.width}\" height=\"30\" class=\"abs middle rightbordered rel [=iftest(i%2, 'lightergrey', 'white')=]\">\n        list:getkeys(self.getData())\n        \n        //cell\n        <view class=\"middle table\" height=\"30\" width=\"%%{self.parent.width;;value/self.parent.evaluated_list.length}\" style=\"overflow: hidden;\">\n            <div class=\"middle\">[=self.parent.data[item]=]\n</script>\n";

/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = "<script id=\"foo\" type=\"text/hypertag\">\n    <!-- markup shml -->\n\n    <view>\n        list:range(10),\n        selectable:\"paleyellow, buttonGradient\",\n        multiselectable:true,\n        keyselectable:true\n        <div class=\"padded\">\n            [=item=] * [=item=] = [=item*item=]\n</script>";

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = "<h3 class=\"lightgrey rounded\">\n    <div class=\"center\">\n        <i>start hello.tmpl</i>\n    </div>\n    \n    <div class=\"center lightblue\">\n        <b>Angular</b>\n    </div>\n    \n    <div class=\"white padded bordered\">\n        <div>\n            Type text:\n            <input type=\"text\" ng-model=\"sometext\"/>\n        </div>\n        <h1>text: {{ sometext }}</h1>\n    </div>\n    \n    <div class=\"center lightblue\">\n        <b>Hypertag</b>\n    </div>\n    \n    <div class=\"white padded bordered\">\n        <div class=\"hypertag\" template=\"foo\"></div>\n    </div>\n\n    <div class=\"center\">\n        <i>start hello.tmpl</i>\n    </div>\n</h3>";

/***/ }
/******/ ]);